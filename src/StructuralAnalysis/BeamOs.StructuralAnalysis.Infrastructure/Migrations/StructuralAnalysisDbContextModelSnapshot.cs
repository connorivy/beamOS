// <auto-generated />
using System;
using System.Collections.Generic;
using BeamOs.StructuralAnalysis.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BeamOs.StructuralAnalysis.Infrastructure.Migrations
{
    [DbContext(typeof(StructuralAnalysisDbContext))]
    partial class StructuralAnalysisDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BeamOs.StructuralAnalysis.Domain.PhysicalModel.NodeAggregate.Node", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ModelId")
                        .HasColumnType("uuid");

                    b.ComplexProperty<Dictionary<string, object>>("LocationPoint", "BeamOs.StructuralAnalysis.Domain.PhysicalModel.NodeAggregate.Node.LocationPoint#Point", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<double>("X")
                                .HasColumnType("double precision");

                            b1.Property<double>("Y")
                                .HasColumnType("double precision");

                            b1.Property<double>("Z")
                                .HasColumnType("double precision");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Restraint", "BeamOs.StructuralAnalysis.Domain.PhysicalModel.NodeAggregate.Node.Restraint#Restraint", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<bool>("CanRotateAboutX")
                                .HasColumnType("boolean");

                            b1.Property<bool>("CanRotateAboutY")
                                .HasColumnType("boolean");

                            b1.Property<bool>("CanRotateAboutZ")
                                .HasColumnType("boolean");

                            b1.Property<bool>("CanTranslateAlongX")
                                .HasColumnType("boolean");

                            b1.Property<bool>("CanTranslateAlongY")
                                .HasColumnType("boolean");

                            b1.Property<bool>("CanTranslateAlongZ")
                                .HasColumnType("boolean");
                        });

                    b.HasKey("Id", "ModelId");

                    b.ToTable("Nodes");
                });

            modelBuilder.Entity("BeamOs.StructuralAnalysis.Domain.PhysicalModel.PointLoadAggregate.PointLoad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ModelId")
                        .HasColumnType("uuid");

                    b.Property<string>("Direction")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Force")
                        .HasColumnType("double precision");

                    b.Property<int>("NodeId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("NodeModelId")
                        .HasColumnType("uuid");

                    b.HasKey("Id", "ModelId");

                    b.HasIndex("NodeId", "NodeModelId");

                    b.ToTable("PointLoad");
                });

            modelBuilder.Entity("BeamOs.StructuralAnalysis.Domain.PhysicalModel.PointLoadAggregate.PointLoad", b =>
                {
                    b.HasOne("BeamOs.StructuralAnalysis.Domain.PhysicalModel.NodeAggregate.Node", null)
                        .WithMany("PointLoads")
                        .HasForeignKey("NodeId", "NodeModelId");
                });

            modelBuilder.Entity("BeamOs.StructuralAnalysis.Domain.PhysicalModel.NodeAggregate.Node", b =>
                {
                    b.Navigation("PointLoads");
                });
#pragma warning restore 612, 618
        }
    }
}
