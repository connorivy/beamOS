// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using BeamOs.Common.Domain.Models;
using BeamOs.StructuralAnalysis.Domain.Common;
using BeamOs.StructuralAnalysis.Domain.PhysicalModel.Element1dAggregate;
using BeamOs.StructuralAnalysis.Domain.PhysicalModel.MaterialAggregate;
using BeamOs.StructuralAnalysis.Domain.PhysicalModel.ModelAggregate;
using BeamOs.StructuralAnalysis.Domain.PhysicalModel.NodeAggregate;
using BeamOs.StructuralAnalysis.Domain.PhysicalModel.SectionProfileAggregate;
using BeamOs.StructuralAnalysis.Infrastructure.Common;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace BeamOs.StructuralAnalysis.Api
{
    [EntityFrameworkInternal]
    public partial class Element1dProposalEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "BeamOs.StructuralAnalysis.Domain.PhysicalModel.Element1dAggregate.Element1dProposal",
                typeof(Element1dProposal),
                baseEntityType,
                propertyCount: 4,
                complexPropertyCount: 4,
                navigationCount: 2,
                foreignKeyCount: 2,
                unnamedIndexCount: 2,
                keyCount: 1);

            var id = runtimeEntityType.AddProperty(
                "Id",
                typeof(Element1dProposalId),
                propertyInfo: typeof(BeamOsEntity<Element1dProposalId>).GetProperty("Id", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(BeamOsEntity<Element1dProposalId>).GetField("<Id>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                valueConverter: new Element1dProposalIdConverter());
            id.SetSentinelFromProviderValue(0);

            var modelProposalId = runtimeEntityType.AddProperty(
                "ModelProposalId",
                typeof(ModelProposalId),
                propertyInfo: typeof(BeamOsModelProposalEntity<Element1dProposalId, Element1dId>).GetProperty("ModelProposalId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(BeamOsModelProposalEntity<Element1dProposalId, Element1dId>).GetField("<ModelProposalId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                afterSaveBehavior: PropertySaveBehavior.Throw,
                valueConverter: new ModelIdProposalConverter());
            modelProposalId.SetSentinelFromProviderValue(0);

            var modelId = runtimeEntityType.AddProperty(
                "ModelId",
                typeof(ModelId),
                propertyInfo: typeof(BeamOsModelProposalEntity<Element1dProposalId, Element1dId>).GetProperty("ModelId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(BeamOsModelProposalEntity<Element1dProposalId, Element1dId>).GetField("<ModelId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                afterSaveBehavior: PropertySaveBehavior.Throw,
                valueConverter: new ModelIdConverter());
            modelId.SetSentinelFromProviderValue(new Guid("01995299-f5eb-72c2-add0-1cbf546fa0fd"));

            var existingId = runtimeEntityType.AddProperty(
                "ExistingId",
                typeof(Element1dId?),
                propertyInfo: typeof(BeamOsModelProposalEntity<Element1dProposalId, Element1dId>).GetProperty("ExistingId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(BeamOsModelProposalEntity<Element1dProposalId, Element1dId>).GetField("<ExistingId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueConverter: new Element1dIdConverter());

            EndNodeIdComplexProperty.Create(runtimeEntityType);
            MaterialIdComplexProperty.Create(runtimeEntityType);
            SectionProfileIdComplexProperty.Create(runtimeEntityType);
            StartNodeIdComplexProperty.Create(runtimeEntityType);
            var key = runtimeEntityType.AddKey(
                new[] { id, modelProposalId, modelId });
            runtimeEntityType.SetPrimaryKey(key);

            var index = runtimeEntityType.AddIndex(
                new[] { modelId });

            var index0 = runtimeEntityType.AddIndex(
                new[] { modelProposalId, modelId });

            return runtimeEntityType;
        }

        public static class EndNodeIdComplexProperty
        {
            public static RuntimeComplexProperty Create(RuntimeEntityType declaringType)
            {
                var complexProperty = declaringType.AddComplexProperty("EndNodeId",
                    typeof(ExistingOrProposedNodeId),
                    "BeamOs.StructuralAnalysis.Domain.PhysicalModel.Element1dAggregate.Element1dProposal.EndNodeId#ExistingOrProposedNodeId",
                    typeof(ExistingOrProposedNodeId),
                    propertyInfo: typeof(Element1dProposal).GetProperty("EndNodeId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    fieldInfo: typeof(Element1dProposal).GetField("<EndNodeId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    propertyCount: 2);

                var complexType = complexProperty.ComplexType;
                var existingId = complexType.AddProperty(
                    "ExistingId",
                    typeof(NodeId?),
                    propertyInfo: typeof(ExistingOrProposedId<NodeId, NodeProposalId>).GetProperty("ExistingId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    fieldInfo: typeof(ExistingOrProposedId<NodeId, NodeProposalId>).GetField("<ExistingId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    nullable: true,
                    valueConverter: new NodeIdConverter());

                var proposedId = complexType.AddProperty(
                    "ProposedId",
                    typeof(NodeProposalId?),
                    propertyInfo: typeof(ExistingOrProposedId<NodeId, NodeProposalId>).GetProperty("ProposedId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    fieldInfo: typeof(ExistingOrProposedId<NodeId, NodeProposalId>).GetField("<ProposedId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    nullable: true,
                    valueConverter: new NodeProposalIdConverter());

                complexType.AddAnnotation("Relational:FunctionName", null);
                complexType.AddAnnotation("Relational:Schema", null);
                complexType.AddAnnotation("Relational:SqlQuery", null);
                complexType.AddAnnotation("Relational:TableName", "Element1dProposals");
                complexType.AddAnnotation("Relational:ViewName", null);
                complexType.AddAnnotation("Relational:ViewSchema", null);
                return complexProperty;
            }
        }

        public static class MaterialIdComplexProperty
        {
            public static RuntimeComplexProperty Create(RuntimeEntityType declaringType)
            {
                var complexProperty = declaringType.AddComplexProperty("MaterialId",
                    typeof(ExistingOrProposedMaterialId),
                    "BeamOs.StructuralAnalysis.Domain.PhysicalModel.Element1dAggregate.Element1dProposal.MaterialId#ExistingOrProposedMaterialId",
                    typeof(ExistingOrProposedMaterialId),
                    propertyInfo: typeof(Element1dProposal).GetProperty("MaterialId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    fieldInfo: typeof(Element1dProposal).GetField("<MaterialId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    propertyCount: 2);

                var complexType = complexProperty.ComplexType;
                var existingId = complexType.AddProperty(
                    "ExistingId",
                    typeof(MaterialId?),
                    propertyInfo: typeof(ExistingOrProposedId<MaterialId, MaterialProposalId>).GetProperty("ExistingId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    fieldInfo: typeof(ExistingOrProposedId<MaterialId, MaterialProposalId>).GetField("<ExistingId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    nullable: true,
                    valueConverter: new MaterialIdConverter());

                var proposedId = complexType.AddProperty(
                    "ProposedId",
                    typeof(MaterialProposalId?),
                    propertyInfo: typeof(ExistingOrProposedId<MaterialId, MaterialProposalId>).GetProperty("ProposedId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    fieldInfo: typeof(ExistingOrProposedId<MaterialId, MaterialProposalId>).GetField("<ProposedId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    nullable: true,
                    valueConverter: new MaterialProposalIdConverter());

                complexType.AddAnnotation("Relational:FunctionName", null);
                complexType.AddAnnotation("Relational:Schema", null);
                complexType.AddAnnotation("Relational:SqlQuery", null);
                complexType.AddAnnotation("Relational:TableName", "Element1dProposals");
                complexType.AddAnnotation("Relational:ViewName", null);
                complexType.AddAnnotation("Relational:ViewSchema", null);
                return complexProperty;
            }
        }

        public static class SectionProfileIdComplexProperty
        {
            public static RuntimeComplexProperty Create(RuntimeEntityType declaringType)
            {
                var complexProperty = declaringType.AddComplexProperty("SectionProfileId",
                    typeof(ExistingOrProposedSectionProfileId),
                    "BeamOs.StructuralAnalysis.Domain.PhysicalModel.Element1dAggregate.Element1dProposal.SectionProfileId#ExistingOrProposedSectionProfileId",
                    typeof(ExistingOrProposedSectionProfileId),
                    propertyInfo: typeof(Element1dProposal).GetProperty("SectionProfileId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    fieldInfo: typeof(Element1dProposal).GetField("<SectionProfileId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    propertyCount: 2);

                var complexType = complexProperty.ComplexType;
                var existingId = complexType.AddProperty(
                    "ExistingId",
                    typeof(SectionProfileId?),
                    propertyInfo: typeof(ExistingOrProposedId<SectionProfileId, SectionProfileProposalId>).GetProperty("ExistingId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    fieldInfo: typeof(ExistingOrProposedId<SectionProfileId, SectionProfileProposalId>).GetField("<ExistingId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    nullable: true,
                    valueConverter: new SectionProfileIdConverter());

                var proposedId = complexType.AddProperty(
                    "ProposedId",
                    typeof(SectionProfileProposalId?),
                    propertyInfo: typeof(ExistingOrProposedId<SectionProfileId, SectionProfileProposalId>).GetProperty("ProposedId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    fieldInfo: typeof(ExistingOrProposedId<SectionProfileId, SectionProfileProposalId>).GetField("<ProposedId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    nullable: true,
                    valueConverter: new SectionProfileProposalIdConverter());

                complexType.AddAnnotation("Relational:FunctionName", null);
                complexType.AddAnnotation("Relational:Schema", null);
                complexType.AddAnnotation("Relational:SqlQuery", null);
                complexType.AddAnnotation("Relational:TableName", "Element1dProposals");
                complexType.AddAnnotation("Relational:ViewName", null);
                complexType.AddAnnotation("Relational:ViewSchema", null);
                return complexProperty;
            }
        }

        public static class StartNodeIdComplexProperty
        {
            public static RuntimeComplexProperty Create(RuntimeEntityType declaringType)
            {
                var complexProperty = declaringType.AddComplexProperty("StartNodeId",
                    typeof(ExistingOrProposedNodeId),
                    "BeamOs.StructuralAnalysis.Domain.PhysicalModel.Element1dAggregate.Element1dProposal.StartNodeId#ExistingOrProposedNodeId",
                    typeof(ExistingOrProposedNodeId),
                    propertyInfo: typeof(Element1dProposal).GetProperty("StartNodeId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    fieldInfo: typeof(Element1dProposal).GetField("<StartNodeId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    propertyCount: 2);

                var complexType = complexProperty.ComplexType;
                var existingId = complexType.AddProperty(
                    "ExistingId",
                    typeof(NodeId?),
                    propertyInfo: typeof(ExistingOrProposedId<NodeId, NodeProposalId>).GetProperty("ExistingId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    fieldInfo: typeof(ExistingOrProposedId<NodeId, NodeProposalId>).GetField("<ExistingId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    nullable: true,
                    valueConverter: new NodeIdConverter());

                var proposedId = complexType.AddProperty(
                    "ProposedId",
                    typeof(NodeProposalId?),
                    propertyInfo: typeof(ExistingOrProposedId<NodeId, NodeProposalId>).GetProperty("ProposedId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    fieldInfo: typeof(ExistingOrProposedId<NodeId, NodeProposalId>).GetField("<ProposedId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    nullable: true,
                    valueConverter: new NodeProposalIdConverter());

                complexType.AddAnnotation("Relational:FunctionName", null);
                complexType.AddAnnotation("Relational:Schema", null);
                complexType.AddAnnotation("Relational:SqlQuery", null);
                complexType.AddAnnotation("Relational:TableName", "Element1dProposals");
                complexType.AddAnnotation("Relational:ViewName", null);
                complexType.AddAnnotation("Relational:ViewSchema", null);
                return complexProperty;
            }
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ModelId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id") }),
                principalEntityType,
                deleteBehavior: DeleteBehavior.Cascade,
                required: true);

            var model = declaringEntityType.AddNavigation("Model",
                runtimeForeignKey,
                onDependent: true,
                typeof(Model),
                propertyInfo: typeof(BeamOsModelProposalEntity<Element1dProposalId, Element1dId>).GetProperty("Model", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(BeamOsModelProposalEntity<Element1dProposalId, Element1dId>).GetField("<Model>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey2(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ModelProposalId"), declaringEntityType.FindProperty("ModelId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id"), principalEntityType.FindProperty("ModelId") }),
                principalEntityType,
                deleteBehavior: DeleteBehavior.Cascade,
                required: true);

            var modelProposal = declaringEntityType.AddNavigation("ModelProposal",
                runtimeForeignKey,
                onDependent: true,
                typeof(ModelProposal),
                propertyInfo: typeof(BeamOsModelProposalEntity<Element1dProposalId, Element1dId>).GetProperty("ModelProposal", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(BeamOsModelProposalEntity<Element1dProposalId, Element1dId>).GetField("<ModelProposal>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var element1dProposals = principalEntityType.AddNavigation("Element1dProposals",
                runtimeForeignKey,
                onDependent: false,
                typeof(List<Element1dProposal>),
                propertyInfo: typeof(ModelProposal).GetProperty("Element1dProposals", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ModelProposal).GetField("<Element1dProposals>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "Element1dProposals");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
