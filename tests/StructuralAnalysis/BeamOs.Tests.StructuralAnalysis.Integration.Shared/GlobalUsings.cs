global using Angle = UnitsNet.Angle;
global using AngleContract = BeamOs.StructuralAnalysis.Contracts.Common.Angle;
global using AngleUnit = UnitsNet.Units.AngleUnit;
global using AngleUnitContract = BeamOs.StructuralAnalysis.Contracts.Common.AngleUnit;
global using Area = UnitsNet.Area;
global using AreaContract = BeamOs.StructuralAnalysis.Contracts.Common.Area;
global using AreaMomentOfInertia = UnitsNet.AreaMomentOfInertia;
global using AreaMomentOfInertiaContract = BeamOs.StructuralAnalysis.Contracts.Common.AreaMomentOfInertia;
global using AreaMomentOfInertiaUnit = UnitsNet.Units.AreaMomentOfInertiaUnit;
global using AreaMomentOfInertiaUnitContract = BeamOs.StructuralAnalysis.Contracts.Common.AreaMomentOfInertiaUnit;
global using AreaUnit = UnitsNet.Units.AreaUnit;
global using AreaUnitContract = BeamOs.StructuralAnalysis.Contracts.Common.AreaUnit;
global using Force = UnitsNet.Force;
global using ForceContract = BeamOs.StructuralAnalysis.Contracts.Common.Force;
global using ForcePerLength = UnitsNet.ForcePerLength;
global using ForcePerLengthContract = BeamOs.StructuralAnalysis.Contracts.Common.ForcePerLength;
global using ForcePerLengthUnit = UnitsNet.Units.ForcePerLengthUnit;
global using ForcePerLengthUnitContract = BeamOs.StructuralAnalysis.Contracts.Common.ForcePerLengthUnit;
global using ForceUnit = UnitsNet.Units.ForceUnit;
global using ForceUnitContract = BeamOs.StructuralAnalysis.Contracts.Common.ForceUnit;
global using Length = UnitsNet.Length;
global using LengthContract = BeamOs.StructuralAnalysis.Contracts.Common.Length;
global using LengthUnit = UnitsNet.Units.LengthUnit;
global using LengthUnitContract = BeamOs.StructuralAnalysis.Contracts.Common.LengthUnit;
global using Pressure = UnitsNet.Pressure;
global using PressureContract = BeamOs.StructuralAnalysis.Contracts.Common.Pressure;
global using PressureUnit = UnitsNet.Units.PressureUnit;
global using PressureUnitContract = BeamOs.StructuralAnalysis.Contracts.Common.PressureUnit;
global using Torque = UnitsNet.Torque;
global using TorqueContract = BeamOs.StructuralAnalysis.Contracts.Common.Torque;
global using TorqueUnit = UnitsNet.Units.TorqueUnit;
global using TorqueUnitContract = BeamOs.StructuralAnalysis.Contracts.Common.TorqueUnit;
global using UnitSettingsContract = BeamOs.StructuralAnalysis.Contracts.Common.UnitSettings;
global using Volume = UnitsNet.Volume;
global using VolumeContract = BeamOs.StructuralAnalysis.Contracts.Common.Volume;
global using VolumeUnit = UnitsNet.Units.VolumeUnit;
global using VolumeUnitContract = BeamOs.StructuralAnalysis.Contracts.Common.VolumeUnit;
#if RUNTIME
global using TestAttribute = BeamOs.Tests.Common.TestAttribute;
global using MethodDataSourceAttribute = BeamOs.Tests.Common.MethodDataSourceAttribute;
global using ParallelGroupAttribute = BeamOs.Tests.Common.ParallelGroupAttribute;
global using DependsOnAttribute = BeamOs.Tests.Common.DependsOnAttribute;
global using BeforeAttribute = BeamOs.Tests.Common.BeforeAttribute;
global using TUnitHookType = BeamOs.Tests.Common.HookType;
#else
global using TestAttribute = TUnit.Core.TestAttribute;
global using MethodDataSourceAttribute = TUnit.Core.MethodDataSourceAttribute;
global using ParallelGroupAttribute = TUnit.Core.ParallelGroupAttribute;
global using DependsOnAttribute = TUnit.Core.DependsOnAttribute;
global using BeforeAttribute = TUnit.Core.BeforeAttribute;
global using TUnitHookType = TUnit.Core.HookType;
#endif
