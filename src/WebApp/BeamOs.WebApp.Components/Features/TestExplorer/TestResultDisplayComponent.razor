@using BeamOs.Tests.Common
@using BeamOs.WebApp.Client.Components.Features.TestExplorer
@inherits FluxorComponent

<div class="min-h-0 max-h-fit grow overflow-scroll point-events-auto">
    @if (@State.Value.AssertionResultArray is not null)
    {
        <AssertionResultVectorView AssertionResultArray="@State.Value.AssertionResultArray" ComparedValueName="@State.Value.ComparedValueName" ComparedValueNameCollection="@State.Value.ComparedValueNameCollection" />
    }
    else if (@State.Value.AssertionResultMatrix is not null)
    {
        <AssertionResultMatrixView AssertionResultMatrix="@State.Value.AssertionResultMatrix" ComparedValueName="@State.Value.ComparedValueName" ComparedValueNameCollection="@State.Value.ComparedValueNameCollection" />
    }
</div>

@code {

    [Inject]
    private IState<TestResultsForDisplayState> State { get; init; }

    [Inject]
    private IState<TestInfoState> TestInfoState { get; init; }

    [Inject]
    private IDispatcher Dispatcher { get; init; }

    [FeatureState]
    public record TestResultsForDisplayState(
        bool IsLoading,
        string? ComparedValueName,
        AssertionResult<double?[]>? AssertionResultArray,
        AssertionResult<double?[,]>? AssertionResultMatrix,
        ICollection<string>? ComparedValueNameCollection,
        string? TestResultId
    )
    {
        public TestResultsForDisplayState() : this(false, null, null, null, null, null)
        {

        }
    }

    private bool isLoadingAssertionResults;
    private string? ComparedValueName { get; set; }
    private AssertionResult<double?[]>? AssertionResultArray { get; set; }
    private AssertionResult<double?[,]>? AssertionResultMatrix { get; set; }
    private ICollection<string>? ComparedValueNameCollection { get; set; }

    private void ResetAssertionResults()
    {
        this.AssertionResultArray = null;
        this.AssertionResultMatrix = null;
        this.ComparedValueName = null;
    }

    public static class TestResultsForDisplayStateReducers
    {
        [ReducerMethod]
        public static TestResultsForDisplayState Reducer(
            TestResultsForDisplayState state,
            TestResultSelected action
        )
        {
            AssertionResult<double?[]>? assertionResultArray = null;
            AssertionResult<double?[,]>? assertionResultMatrix = null;

            if (
                action.Result.CalculatedValue is double[] calDoubArrVal
                && action.Result.ExpectedValue is double[] expDoubArrVal)
            {
                assertionResultArray = new(
                    expDoubArrVal.Cast<double?>().ToArray(),
                    calDoubArrVal.Cast<double?>().ToArray()
                );
            }
            else if (
                action.Result.CalculatedValue is double?[] calDoubArrValNul
                && action.Result.ExpectedValue is double?[] expDoubArrValNul)
            {
                assertionResultArray = new(
                    expDoubArrValNul,
                    calDoubArrValNul
                );
            }
            else if (
                action.Result.CalculatedValue is double[,] calDoubMatVal
                && action.Result.ExpectedValue is double[,] expDoubMatVal)
            {
                assertionResultMatrix = new(
                    AssertionResultMatrixView.ToNullable(expDoubMatVal),
                    AssertionResultMatrixView.ToNullable(calDoubMatVal)
                );
            }
            else if (
                action.Result.CalculatedValue is double?[,] calDoubMatValNul
                && action.Result.ExpectedValue is double?[,] expDoubMatValNul)
            {
                assertionResultMatrix = new(
                    expDoubMatValNul,
                    calDoubMatValNul
                );
            }
            return state with
            {
                IsLoading = true,
                AssertionResultArray = assertionResultArray,
                AssertionResultMatrix = assertionResultMatrix,
                ComparedValueName = action.Result.ComparedValueName,
                ComparedValueNameCollection = action.Result.ComparedValueNameCollection,
                TestResultId = action.Result.Id
            };
        }
    }

    public readonly record struct TestResultSelected(TestResult Result);

    protected override void OnInitialized()
    {
        base.OnInitialized();
        // this.SubscribeToAction<TestResultSelected>(action =>
        // {
        //     var singleTestInfo = this.TestInfoState.Value.TestInfoIdToTestResultDict[action.Result.Id];
        //     if (singleTestInfo.FrontEndProgressStatus != TestProgressStatus.NotStarted)
        //     {
        //         return;
        //     }

        //     this.Dispatcher.Dispatch(
        //         new TestResultProgressChanged(action.Result.Id, TestProgressStatus.InProgress)
        //     );
        // });
        // State.StateChanged += State_StateChanged;

        // this.SubscribeToAction<TestResultProgressChanged>(action =>
        // {
        //     var singleTestInfo = this.TestInfoState.Value.TestInfoIdToTestResultDict[action.Result.Id];
        //     if (singleTestInfo.FrontEndProgressStatus != TestProgressStatus.InProgress)
        //     {
        //         return;
        //     }

        //     var x = Convert.ToInt32(2500 * Random.Shared.NextDouble());
        //     var x = Convert.ToInt32(2500);
        //     Thread.Sleep(x);

        //     this.Dispatcher.Dispatch(
        //         new TestResultProgressChanged(action.Result, TestProgressStatus.Finished)
        //     );
        // });
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            // this.Dispatcher.Dispatch(new TestResultSelected(this.State.Value.TestResult));
        }
        base.OnAfterRender(firstRender);
    }

    private void State_StateChanged(object? sender, EventArgs e)
    {
        if (this.State.Value.IsLoading)
        {
            //var x = Convert.ToInt32(2500 * Random.Shared.NextDouble());
            var x = Convert.ToInt32(2500);
            Thread.Sleep(x);
            this.Dispatcher.Dispatch(new TestResultProgressChanged(this.State.Value.TestResultId, TestProgressStatus.Finished));
        }
    }
}
