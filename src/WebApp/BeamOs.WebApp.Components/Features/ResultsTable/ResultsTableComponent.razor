@using BeamOs.StructuralAnalysis.Contracts.AnalyticalResults.NodeResult
@using BeamOs.WebApp.Components.Features.Editor
<div class="flex flex-col h-full pointer-events-none @Class">
    @if (this.NodeResultResponses is not null)
    {      
        <MudTable Class="max-h-full overflow-auto pointer-events-auto" T="NodeResultResponse" Items="@NodeResultResponses" Breakpoint="Breakpoint.Xs" Dense="true">
            <HeaderContent>
                <MudTh>Joint ID</MudTh>
                <MudTh>U1 [in]</MudTh>
                <MudTh>U2 [in]</MudTh>
                <MudTh>U3 [in]</MudTh>
                <MudTh>R1 [rad]</MudTh>
                <MudTh>R2 [rad]</MudTh>
                <MudTh>R3 [rad]</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>@context.NodeId</MudTd>
                <MudTd>@Math.Round(context.Displacements.DisplacementAlongX.Value, 7)</MudTd>
                <MudTd>@Math.Round(context.Displacements.DisplacementAlongY.Value, 7)</MudTd>
                <MudTd>@Math.Round(context.Displacements.DisplacementAlongZ.Value, 7)</MudTd>
                <MudTd>@Math.Round(context.Displacements.RotationAboutX.Value, 7)</MudTd>
                <MudTd>@Math.Round(context.Displacements.RotationAboutY.Value, 7)</MudTd>
                <MudTd>@Math.Round(context.Displacements.RotationAboutZ.Value, 7)</MudTd>
            </RowTemplate>
        </MudTable>
    }
</div>

@code {
    [Parameter]
    public string? Class { get; init; }

    public NodeResultResponse[]? NodeResultResponses { get; set; }

    [Parameter]
    public required Guid ModelId { get; init; }

    private readonly IState<CachedModelState> modelState;
    public ResultsTableComponent(IState<CachedModelState> modelState)
    {
        this.modelState = modelState;
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        NodeResultResponses = this.modelState.Value.Models[this.ModelId].NodeResults.GetValueOrDefault(1)?.Values.OrderBy(r => r.NodeId).ToArray();
    }


}
