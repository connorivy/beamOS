//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export interface ISpeckleConnectorApi {

    /**
     * @param body (optional) 
     * @return OK
     */
    speckleRecieveOperation(modelId: string, body: SpeckleReceiveParameters | null | undefined): Promise<ModelProposalResponse>;
}

export class SpeckleConnectorApi implements ISpeckleConnectorApi {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "http://localhost:5079/";
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    speckleRecieveOperation(modelId: string, body: SpeckleReceiveParameters | null | undefined): Promise<ModelProposalResponse> {
        let url_ = this.baseUrl + "/api/speckle-receive?";
        if (modelId === undefined || modelId === null)
            throw new Error("The parameter 'modelId' must be defined and cannot be null.");
        else
            url_ += "ModelId=" + encodeURIComponent("" + modelId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSpeckleRecieveOperation(_response);
        });
    }

    protected processSpeckleRecieveOperation(response: Response): Promise<ModelProposalResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ModelProposalResponse;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ModelProposalResponse>(null as any);
    }
}

export interface Angle {
    value: number;
    unit: number;

    [key: string]: any;
}

export interface CreateElement1dProposalResponse {
    id?: number;
    startNodeId: ProposedID;
    endNodeId: ProposedID;
    materialId: ProposedID;
    sectionProfileId: ProposedID;
    sectionProfileRotation?: NullableOfAngle | undefined;
    metadata?: { [key: string]: string; } | undefined;

    [key: string]: any;
}

export interface CreateInternalNodeProposalResponse {
    element1dId: ProposedID;
    ratioAlongElement1d: Ratio;
    restraint: Restraint;
    metadata?: { [key: string]: string; } | undefined;
    id?: number;

    [key: string]: any;
}

export interface CreateNodeProposalResponse {
    id: number;
    locationPoint: Point;
    restraint: Restraint;
    metadata?: { [key: string]: string; } | undefined;

    [key: string]: any;
}

export interface DeleteModelEntityProposal {
    proposalType?: number;
    id: number;
    objectType: number;

    [key: string]: any;
}

export interface DisplacementsResponse {
    displacementAlongX: Length;
    displacementAlongY: Length;
    displacementAlongZ: Length;
    rotationAboutX: Angle;
    rotationAboutY: Angle;
    rotationAboutZ: Angle;

    [key: string]: any;
}

export interface Element1dResultResponse {
    modelId: string;
    resultSetId: number;
    element1dId: number;
    minShear: Length;
    maxShear: Length;
    minMoment: Torque;
    maxMoment: Torque;
    minDisplacement: Length;
    maxDisplacement: Length;

    [key: string]: any;
}

export interface Force {
    value: number;
    unit: number;

    [key: string]: any;
}

export interface ForcesResponse {
    forceAlongX: Force;
    forceAlongY: Force;
    forceAlongZ: Force;
    momentAboutX: Torque;
    momentAboutY: Torque;
    momentAboutZ: Torque;

    [key: string]: any;
}

export interface Length {
    value: number;
    unit: number;

    [key: string]: any;
}

export interface LoadCase {
    id: number;
    name: string;

    [key: string]: any;
}

export interface LoadCombination {
    id: number;
    loadCaseFactors: { [key: string]: number; };

    [key: string]: any;
}

export interface ModelProposalInfo {
    id: number;
    lastModified: Date;
    description?: string | undefined;

    [key: string]: any;
}

export interface ModelProposalResponse {
    id: number;
    lastModified: Date;
    modelProposal?: ModelProposalInfo | undefined;
    createNodeProposals?: CreateNodeProposalResponse[] | undefined;
    modifyNodeProposals?: ModifyNodeProposalResponse[] | undefined;
    createInternalNodeProposals?: CreateInternalNodeProposalResponse[] | undefined;
    modifyInternalNodeProposals?: ModifyInternalNodeProposalResponse[] | undefined;
    createElement1dProposals?: CreateElement1dProposalResponse[] | undefined;
    modifyElement1dProposals?: ModifyElement1dProposalResponse[] | undefined;
    element1dsModifiedBecauseOfNodeChange?: number[] | undefined;
    materialProposals?: PutMaterialRequest[] | undefined;
    sectionProfileProposals?: PutSectionProfileRequest[] | undefined;
    sectionProfileFromLibraryProposals?: SectionProfileFromLibrary[] | undefined;
    pointLoadProposals?: PointLoad[] | undefined;
    momentLoadProposals?: MomentLoad[] | undefined;
    resultSetProposals?: ResultSet[] | undefined;
    loadCaseProposals?: LoadCase[] | undefined;
    loadCombinationProposals?: LoadCombination[] | undefined;
    proposalIssues?: ProposalIssue[] | undefined;
    deleteModelEntityProposals?: DeleteModelEntityProposal[] | undefined;

    [key: string]: any;
}

export interface ModifyElement1dProposalResponse {
    id?: number;
    existingElement1dId: number;
    startNodeId: ProposedID;
    endNodeId: ProposedID;
    materialId: ProposedID;
    sectionProfileId: ProposedID;
    existingId?: number;
    objectType?: number;
    sectionProfileRotation?: NullableOfAngle | undefined;
    metadata?: { [key: string]: string; } | undefined;

    [key: string]: any;
}

export interface ModifyInternalNodeProposalResponse {
    id: number;
    element1dId: ProposedID;
    ratioAlongElement1d: Ratio;
    restraint?: NullableOfRestraint | undefined;
    existingInternalNodeId: number;
    metadata?: { [key: string]: string; } | undefined;

    [key: string]: any;
}

export interface ModifyNodeProposalResponse {
    existingNodeId: number;
    id: number;
    locationPoint: Point;
    restraint: Restraint;
    metadata?: { [key: string]: string; } | undefined;

    [key: string]: any;
}

export interface MomentLoad {
    id?: number;
    nodeId: number;
    loadCaseId: number;
    torque: Torque;
    axisDirection: Vector3;

    [key: string]: any;
}

export interface NodeResultResponse {
    modelId: string;
    resultSetId: number;
    nodeId: number;
    forces: ForcesResponse;
    displacements: DisplacementsResponse;

    [key: string]: any;
}

export interface NullableOfAngle {
    value: number;
    unit: number;

    [key: string]: any;
}

export interface NullableOfRestraint {
    canTranslateAlongX: boolean;
    canTranslateAlongY: boolean;
    canTranslateAlongZ: boolean;
    canRotateAboutX: boolean;
    canRotateAboutY: boolean;
    canRotateAboutZ: boolean;

    [key: string]: any;
}

export interface Point {
    x: number;
    y: number;
    z: number;
    lengthUnit: number;

    [key: string]: any;
}

export interface PointLoad {
    id: number;
    nodeId: number;
    loadCaseId: number;
    force: Force;
    direction: Vector3;

    [key: string]: any;
}

export interface ProposalIssue {
    id: number;
    proposedId: ProposedID;
    objectType: number;
    message: string;
    severity: number;
    code: number;

    [key: string]: any;
}

export interface ProposedID {
    existingId: number | undefined;
    proposedId: number | undefined;

    [key: string]: any;
}

export interface PutMaterialRequest {
    id?: number;
    modulusOfElasticity: number;
    modulusOfRigidity: number;
    pressureUnit: number;

    [key: string]: any;
}

export interface PutSectionProfileRequest {
    id: number;
    area: number;
    strongAxisMomentOfInertia: number;
    weakAxisMomentOfInertia: number;
    polarMomentOfInertia: number;
    strongAxisPlasticSectionModulus: number;
    weakAxisPlasticSectionModulus: number;
    strongAxisShearArea?: number | undefined;
    weakAxisShearArea?: number | undefined;
    lengthUnit: number;
    name: string;

    [key: string]: any;
}

export interface Ratio {
    value: number;
    unit: number;

    [key: string]: any;
}

export interface Restraint {
    canTranslateAlongX: boolean;
    canTranslateAlongY: boolean;
    canTranslateAlongZ: boolean;
    canRotateAboutX: boolean;
    canRotateAboutY: boolean;
    canRotateAboutZ: boolean;

    [key: string]: any;
}

export interface ResultSet {
    id: number;
    modelId: string;
    nodeResults?: NodeResultResponse[] | undefined;
    element1dResults?: Element1dResultResponse[] | undefined;

    [key: string]: any;
}

export interface SectionProfileFromLibrary {
    id: number;
    library: number;
    name: string;

    [key: string]: any;
}

export interface SpeckleReceiveParameters {
    apiToken: string;
    projectId: string;
    objectId: string;
    serverUrl: string;

    [key: string]: any;
}

export interface Torque {
    value: number;
    unit: number;

    [key: string]: any;
}

export interface Vector3 {
    x: number;
    y: number;
    z: number;

    [key: string]: any;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}