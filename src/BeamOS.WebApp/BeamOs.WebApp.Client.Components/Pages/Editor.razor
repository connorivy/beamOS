@page "/editor/{ModelId}"
@using BeamOs.WebApp.Client.Components.Caches
@using BeamOs.WebApp.Client.Components.Components.Editor
@using BeamOs.WebApp.Client.Components.Components.Editor.Commands
@using BeamOs.WebApp.Client.Components.Features.Common.Flux
@using BeamOs.WebApp.Client.Components.Repositories
@using BeamOs.CodeGen.Apis.EditorApi
@using BeamOs.ApiClient
@using BeamOs.Contracts.AnalyticalResults.Model
@using BeamOs.Contracts.Common
@using BeamOs.Contracts.PhysicalModel.Element1d
@using BeamOs.Contracts.PhysicalModel.Model
@using BeamOs.Contracts.PhysicalModel.Node
@using BeamOs.Contracts.PhysicalModel.PointLoad
@using Fluxor.Blazor.Web.Components
@using static BeamOs.WebApp.Client.Components.Components.Editor.EditorComponent
@using BeamOs.WebApp.Client.Components.Components.Editor.CommandHandlers;

@implements IDisposable

<PageTitle>Editor</PageTitle>

<MudDrawerContainer Class="h-full w-full">
    <MudTextField @bind-Value="modelIdInput" Label="ModelId" Variant="Variant.Filled"></MudTextField>
    <MudButton OnClick="LoadModel">Load Model</MudButton>
    <MudButton OnClick="RunAnalysis">Run DSM</MudButton>
    <MudButton OnClick="LoadShearDiagrams">Show Shear Diagrams</MudButton>
    <MudButton OnClick="LoadMomentDiagrams">Show Moment Diagrams</MudButton>
    <MudButton OnClick="ShowReactions">Show Reactions</MudButton>
    @if (editorComponent is not null)
    {
        <MudPopover Open="@(editorComponent.EditorComponentState.SelectedObjects.Length > 0)" Fixed="true" Class="w-80 m-2">
            <SelectionInfoComponent SelectedObjects="@editorComponent.EditorComponentState.SelectedObjects" ModelId="@editorComponent.EditorComponentState.LoadedModelId"></SelectionInfoComponent>
        </MudPopover>
    }
    <EditorComponent Class="h-full" @ref="editorComponent" PhysicalModelId="@ModelId"></EditorComponent>
</MudDrawerContainer>

@code {
    [Parameter]
    public string ModelId { get; set; }

    [Inject]
    private IApiAlphaClient ApiAlphaClient { get; init; }

    [Inject]
    private AddEntityContractToEditorCommandHandler AddEntityContractToEditorCommandHandler { get; init; }

    [Inject]
    private AddShearDiagramsToEditorCommandHandler AddShearDiagramsToEditorCommandHandler { get; init; }

    [Inject]
    private AddMomentDiagramsToEditorCommandHandler AddMomentDiagramsToEditorCommandHandler { get; init; }

    [Inject]
    private AddPointLoadsToEditorCommandHandler AddPointLoadsToEditorCommandHandler { get; init; }

    [Inject]
    private AllStructuralAnalysisModelCaches allStructuralAnalysisModelCaches { get; init; }

    [Inject]
    private NavigationManager NavigationManager { get; init; }

    public string modelIdInput { get; set; }
    private EditorComponent editorComponent;

    protected override void OnInitialized()
    {
        EventEmitter.VisibleStateChanged += this.EventEmitter_VisibleStateChanged;
        base.OnInitialized();
    }

    private void EventEmitter_VisibleStateChanged(object? sender, EventArgs _) =>
        InvokeAsync(StateHasChanged);

    private async Task LoadShearDiagrams()
    {
        var modelResults = await this.ApiAlphaClient.GetModelResultsAsync(editorComponent.EditorComponentState.LoadedModelId);
        await this.editorComponent.EditorApiAlpha.SetModelResultsAsync(modelResults);

        var shearDiagrams = await this.ApiAlphaClient.GetShearDiagramsAsync(editorComponent.EditorComponentState.LoadedModelId);
        await AddShearDiagramsToEditorCommandHandler.ExecuteAsync(new(editorComponent.ElementId, shearDiagrams));
    }

    private async Task LoadMomentDiagrams()
    {
        var modelResults = await this.ApiAlphaClient.GetModelResultsAsync(editorComponent.EditorComponentState.LoadedModelId);
        await this.editorComponent.EditorApiAlpha.SetModelResultsAsync(modelResults);

        var diagrams = await this.ApiAlphaClient.GetMomentDiagramsAsync(editorComponent.EditorComponentState.LoadedModelId);
        await AddMomentDiagramsToEditorCommandHandler.ExecuteAsync(new(editorComponent.ElementId, diagrams));
    }

    private async Task LoadModel()
    {
        this.ModelId = modelIdInput;
        this.NavigationManager.NavigateTo($"editor/{this.ModelId}");
        await this.editorComponent.LoadModel(this.ModelId);
    }

    private async Task RunAnalysis()
    {
        await ApiAlphaClient.RunDirectStiffnessMethodAsync(editorComponent.EditorComponentState.LoadedModelId);
    }

    private async Task ShowReactions()
    {
        var allForces = await this.ApiAlphaClient.GetNodeResultsAsync(this.ModelId, null);

        await AddPointLoadsToEditorCommandHandler.ExecuteAsync(new(this.editorComponent.ElementId,
            allForces
                .Where(f => Math.Abs(f.Forces.ForceAlongY.Value) > .001)
                .Select(f => new PointLoadResponse(
                    Guid.NewGuid().ToString(),
                    this.ModelId,
                    f.NodeId,
                    f.Forces.ForceAlongY,
                    new(0, 1, 0)
                ))
                .ToArray() // must prevent multiple enumerations or different ids will be generated
        ));
    }

    public void Dispose()
    {
        EventEmitter.VisibleStateChanged -= this.EventEmitter_VisibleStateChanged;
    }
}
