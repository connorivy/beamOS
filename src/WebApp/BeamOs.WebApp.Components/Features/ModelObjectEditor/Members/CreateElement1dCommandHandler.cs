using BeamOs.CodeGen.StructuralAnalysisApiClient;
using BeamOs.Common.Contracts;
using BeamOs.StructuralAnalysis.Application.Common;
using BeamOs.StructuralAnalysis.Contracts.PhysicalModel.Element1ds;
using BeamOs.WebApp.Components.Features.Common;
using BeamOs.WebApp.Components.Features.Editor;
using BeamOs.WebApp.EditorCommands.Interfaces;
using Fluxor;
using Microsoft.Extensions.Logging;
using MudBlazor;

namespace BeamOs.WebApp.Components.Features.ModelObjectEditor.Members;

public sealed class CreateElement1dClientCommandHandler(
    ILogger<CreateElement1dClientCommandHandler> logger,
    ISnackbar snackbar,
    IStructuralAnalysisApiClientV1 structuralAnalysisApiClientV1,
    IDispatcher dispatcher,
    IState<EditorComponentState> editorState
) : ClientCommandHandlerBase<CreateElement1dClientCommand, Element1dResponse>(logger, snackbar)
{
    protected override async ValueTask<Result> UpdateEditor(CreateElement1dClientCommand command)
    {
        var editorApi =
            editorState.Value.EditorApi
            ?? throw new InvalidOperationException("Editor API is not initialized");

        return await editorApi.CreateElement1dAsync(
            new Element1dResponse(
                command.TempElement1dId,
                command.ModelId,
                command.Data.StartNodeId,
                command.Data.EndNodeId,
                command.Data.MaterialId,
                command.Data.SectionProfileId,
                command.Data.SectionProfileRotation ?? new()
            )
        );
    }

    protected override async ValueTask<Result<Element1dResponse>> UpdateServer(
        CreateElement1dClientCommand command,
        CancellationToken ct = default
    )
    {
        return await structuralAnalysisApiClientV1.CreateElement1dAsync(
            command.ModelId,
            new CreateElement1dRequest(command.Data),
            ct
        );
    }

    protected override async ValueTask<Result> UpdateEditorAfterServerResponse(
        CreateElement1dClientCommand command,
        Result<Element1dResponse> serverResponse
    )
    {
        var editorApi =
            editorState.Value.EditorApi
            ?? throw new InvalidOperationException("Editor API is not initialized");

        if (serverResponse.IsSuccess)
        {
            await editorApi.CreateElement1dAsync(serverResponse.Value);
        }

        return await editorApi.DeleteElement1dAsync(
            new ModelEntityCommand() { Id = command.TempElement1dId, ModelId = command.ModelId }
        );
    }

    protected override ValueTask<Result> UpdateClient(
        CreateElement1dClientCommand command,
        Result<Element1dResponse> serverResponse
    )
    {
        if (serverResponse.IsSuccess)
        {
            dispatcher.Dispatch(command with { Element1dId = serverResponse.Value.Id });
        }

        return new(Result.Success);
    }
}

public record CreateElement1dClientCommand(Element1dData Data) : IBeamOsClientCommand
{
    public Guid Id { get; } = Guid.NewGuid();
    public bool HandledByEditor { get; init; }
    public bool HandledByBlazor { get; init; }
    public bool HandledByServer { get; init; }
    public int TempElement1dId { get; init; } = ClientUtils.GenerateTempId();
    public required Guid ModelId { get; init; }

    /// <summary>
    /// The ID of the element1d in the model. This is null for temporary elements.
    /// The ID is generated by the server when the element is created.
    /// </summary>
    public int? Element1dId { get; init; }

    public IBeamOsClientCommand GetUndoCommand(BeamOsClientCommandArgs? args = null) =>
        new DeleteElement1dClientCommand
        {
            ModelId = this.ModelId,
            Element1dId = this.Element1dId ?? this.TempElement1dId,
            Data = this.Data,
            HandledByBlazor = args?.HandledByBlazor ?? this.HandledByBlazor,
            HandledByEditor = args?.HandledByEditor ?? this.HandledByEditor,
            HandledByServer = args?.HandledByServer ?? this.HandledByServer,
        };

    public IBeamOsClientCommand WithArgs(BeamOsClientCommandArgs? args = null) =>
        this with
        {
            HandledByBlazor = args?.HandledByBlazor ?? this.HandledByBlazor,
            HandledByEditor = args?.HandledByEditor ?? this.HandledByEditor,
            HandledByServer = args?.HandledByServer ?? this.HandledByServer,
        };
}
