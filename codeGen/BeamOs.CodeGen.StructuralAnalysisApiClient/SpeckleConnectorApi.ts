//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export interface ISpeckleConnectorApi {

    /**
     * @param body (optional) 
     * @return OK
     */
    convertToBeamOs(body: SpeckleReceiveParameters | undefined): Promise<ResultOfBeamOsModelBuilderDto>;
}

export class SpeckleConnectorApi implements ISpeckleConnectorApi {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "http://localhost:5079";
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    convertToBeamOs(body: SpeckleReceiveParameters | undefined): Promise<ResultOfBeamOsModelBuilderDto> {
        let url_ = this.baseUrl + "/api/speckle-receive";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processConvertToBeamOs(_response);
        });
    }

    protected processConvertToBeamOs(response: Response): Promise<ResultOfBeamOsModelBuilderDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultOfBeamOsModelBuilderDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultOfBeamOsModelBuilderDto>(null as any);
    }
}

export class AnalysisSettings implements IAnalysisSettings {
    element1DAnalysisType?: number;

    [key: string]: any;

    constructor(data?: IAnalysisSettings) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.element1DAnalysisType = _data["element1DAnalysisType"];
        }
    }

    static fromJS(data: any): AnalysisSettings {
        data = typeof data === 'object' ? data : {};
        let result = new AnalysisSettings();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["element1DAnalysisType"] = this.element1DAnalysisType;
        return data;
    }
}

export interface IAnalysisSettings {
    element1DAnalysisType?: number;

    [key: string]: any;
}

export class BeamOsError implements IBeamOsError {
    code!: string;
    description!: string;
    type!: number;
    numericType?: number;
    metadata!: { [key: string]: string; } | undefined;

    [key: string]: any;

    constructor(data?: IBeamOsError) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.code = _data["code"];
            this.description = _data["description"];
            this.type = _data["type"];
            this.numericType = _data["numericType"];
            if (_data["metadata"]) {
                this.metadata = {} as any;
                for (let key in _data["metadata"]) {
                    if (_data["metadata"].hasOwnProperty(key))
                        (<any>this.metadata)![key] = _data["metadata"][key];
                }
            }
        }
    }

    static fromJS(data: any): BeamOsError {
        data = typeof data === 'object' ? data : {};
        let result = new BeamOsError();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["code"] = this.code;
        data["description"] = this.description;
        data["type"] = this.type;
        data["numericType"] = this.numericType;
        if (this.metadata) {
            data["metadata"] = {};
            for (let key in this.metadata) {
                if (this.metadata.hasOwnProperty(key))
                    (<any>data["metadata"])[key] = (<any>this.metadata)[key];
            }
        }
        return data;
    }
}

export interface IBeamOsError {
    code: string;
    description: string;
    type: number;
    numericType?: number;
    metadata: { [key: string]: string; } | undefined;

    [key: string]: any;
}

export class BeamOsModelBuilderDto implements IBeamOsModelBuilderDto {
    name?: string;
    description?: string;
    settings?: ModelSettings;
    guidString?: string;
    nodes?: PutNodeRequest[];
    materials?: PutMaterialRequest[];
    sectionProfiles?: PutSectionProfileRequest[];
    element1ds?: PutElement1dRequest[];
    pointLoads?: PutPointLoadRequest[];
    momentLoads?: PutMomentLoadRequest[];

    [key: string]: any;

    constructor(data?: IBeamOsModelBuilderDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.name = _data["name"];
            this.description = _data["description"];
            this.settings = _data["settings"] ? ModelSettings.fromJS(_data["settings"]) : <any>undefined;
            this.guidString = _data["guidString"];
            if (Array.isArray(_data["nodes"])) {
                this.nodes = [] as any;
                for (let item of _data["nodes"])
                    this.nodes!.push(PutNodeRequest.fromJS(item));
            }
            if (Array.isArray(_data["materials"])) {
                this.materials = [] as any;
                for (let item of _data["materials"])
                    this.materials!.push(PutMaterialRequest.fromJS(item));
            }
            if (Array.isArray(_data["sectionProfiles"])) {
                this.sectionProfiles = [] as any;
                for (let item of _data["sectionProfiles"])
                    this.sectionProfiles!.push(PutSectionProfileRequest.fromJS(item));
            }
            if (Array.isArray(_data["element1ds"])) {
                this.element1ds = [] as any;
                for (let item of _data["element1ds"])
                    this.element1ds!.push(PutElement1dRequest.fromJS(item));
            }
            if (Array.isArray(_data["pointLoads"])) {
                this.pointLoads = [] as any;
                for (let item of _data["pointLoads"])
                    this.pointLoads!.push(PutPointLoadRequest.fromJS(item));
            }
            if (Array.isArray(_data["momentLoads"])) {
                this.momentLoads = [] as any;
                for (let item of _data["momentLoads"])
                    this.momentLoads!.push(PutMomentLoadRequest.fromJS(item));
            }
        }
    }

    static fromJS(data: any): BeamOsModelBuilderDto {
        data = typeof data === 'object' ? data : {};
        let result = new BeamOsModelBuilderDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["name"] = this.name;
        data["description"] = this.description;
        data["settings"] = this.settings ? this.settings.toJSON() : <any>undefined;
        data["guidString"] = this.guidString;
        if (Array.isArray(this.nodes)) {
            data["nodes"] = [];
            for (let item of this.nodes)
                data["nodes"].push(item.toJSON());
        }
        if (Array.isArray(this.materials)) {
            data["materials"] = [];
            for (let item of this.materials)
                data["materials"].push(item.toJSON());
        }
        if (Array.isArray(this.sectionProfiles)) {
            data["sectionProfiles"] = [];
            for (let item of this.sectionProfiles)
                data["sectionProfiles"].push(item.toJSON());
        }
        if (Array.isArray(this.element1ds)) {
            data["element1ds"] = [];
            for (let item of this.element1ds)
                data["element1ds"].push(item.toJSON());
        }
        if (Array.isArray(this.pointLoads)) {
            data["pointLoads"] = [];
            for (let item of this.pointLoads)
                data["pointLoads"].push(item.toJSON());
        }
        if (Array.isArray(this.momentLoads)) {
            data["momentLoads"] = [];
            for (let item of this.momentLoads)
                data["momentLoads"].push(item.toJSON());
        }
        return data;
    }
}

export interface IBeamOsModelBuilderDto {
    name?: string;
    description?: string;
    settings?: ModelSettings;
    guidString?: string;
    nodes?: PutNodeRequest[];
    materials?: PutMaterialRequest[];
    sectionProfiles?: PutSectionProfileRequest[];
    element1ds?: PutElement1dRequest[];
    pointLoads?: PutPointLoadRequest[];
    momentLoads?: PutMomentLoadRequest[];

    [key: string]: any;
}

export class Force implements IForce {
    value!: number;
    unit!: number;

    [key: string]: any;

    constructor(data?: IForce) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.value = _data["value"];
            this.unit = _data["unit"];
        }
    }

    static fromJS(data: any): Force {
        data = typeof data === 'object' ? data : {};
        let result = new Force();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["value"] = this.value;
        data["unit"] = this.unit;
        return data;
    }
}

export interface IForce {
    value: number;
    unit: number;

    [key: string]: any;
}

export class ModelSettings implements IModelSettings {
    unitSettings!: UnitSettings;
    analysisSettings?: AnalysisSettings | undefined;
    yAxisUp?: boolean;

    [key: string]: any;

    constructor(data?: IModelSettings) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.unitSettings = new UnitSettings();
            this.yAxisUp = true;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.unitSettings = _data["unitSettings"] ? UnitSettings.fromJS(_data["unitSettings"]) : new UnitSettings();
            this.analysisSettings = _data["analysisSettings"] ? AnalysisSettings.fromJS(_data["analysisSettings"]) : <any>undefined;
            this.yAxisUp = _data["yAxisUp"] !== undefined ? _data["yAxisUp"] : true;
        }
    }

    static fromJS(data: any): ModelSettings {
        data = typeof data === 'object' ? data : {};
        let result = new ModelSettings();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["unitSettings"] = this.unitSettings ? this.unitSettings.toJSON() : <any>undefined;
        data["analysisSettings"] = this.analysisSettings ? this.analysisSettings.toJSON() : <any>undefined;
        data["yAxisUp"] = this.yAxisUp;
        return data;
    }
}

export interface IModelSettings {
    unitSettings: UnitSettings;
    analysisSettings?: AnalysisSettings | undefined;
    yAxisUp?: boolean;

    [key: string]: any;
}

export class NullableOfAngle implements INullableOfAngle {
    value!: number;
    unit!: number;

    [key: string]: any;

    constructor(data?: INullableOfAngle) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.value = _data["value"];
            this.unit = _data["unit"];
        }
    }

    static fromJS(data: any): NullableOfAngle {
        data = typeof data === 'object' ? data : {};
        let result = new NullableOfAngle();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["value"] = this.value;
        data["unit"] = this.unit;
        return data;
    }
}

export interface INullableOfAngle {
    value: number;
    unit: number;

    [key: string]: any;
}

export class Point implements IPoint {
    x!: number;
    y!: number;
    z!: number;
    lengthUnit!: number;

    [key: string]: any;

    constructor(data?: IPoint) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.x = _data["x"];
            this.y = _data["y"];
            this.z = _data["z"];
            this.lengthUnit = _data["lengthUnit"];
        }
    }

    static fromJS(data: any): Point {
        data = typeof data === 'object' ? data : {};
        let result = new Point();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["x"] = this.x;
        data["y"] = this.y;
        data["z"] = this.z;
        data["lengthUnit"] = this.lengthUnit;
        return data;
    }
}

export interface IPoint {
    x: number;
    y: number;
    z: number;
    lengthUnit: number;

    [key: string]: any;
}

export class PutElement1dRequest implements IPutElement1dRequest {
    id!: number;
    startNodeId!: number;
    endNodeId!: number;
    materialId!: number;
    sectionProfileId!: number;
    sectionProfileRotation?: NullableOfAngle | undefined;
    metadata?: { [key: string]: string; } | undefined;

    [key: string]: any;

    constructor(data?: IPutElement1dRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.startNodeId = _data["startNodeId"];
            this.endNodeId = _data["endNodeId"];
            this.materialId = _data["materialId"];
            this.sectionProfileId = _data["sectionProfileId"];
            this.sectionProfileRotation = _data["sectionProfileRotation"] ? NullableOfAngle.fromJS(_data["sectionProfileRotation"]) : <any>undefined;
            if (_data["metadata"]) {
                this.metadata = {} as any;
                for (let key in _data["metadata"]) {
                    if (_data["metadata"].hasOwnProperty(key))
                        (<any>this.metadata)![key] = _data["metadata"][key];
                }
            }
        }
    }

    static fromJS(data: any): PutElement1dRequest {
        data = typeof data === 'object' ? data : {};
        let result = new PutElement1dRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["startNodeId"] = this.startNodeId;
        data["endNodeId"] = this.endNodeId;
        data["materialId"] = this.materialId;
        data["sectionProfileId"] = this.sectionProfileId;
        data["sectionProfileRotation"] = this.sectionProfileRotation ? this.sectionProfileRotation.toJSON() : <any>undefined;
        if (this.metadata) {
            data["metadata"] = {};
            for (let key in this.metadata) {
                if (this.metadata.hasOwnProperty(key))
                    (<any>data["metadata"])[key] = (<any>this.metadata)[key];
            }
        }
        return data;
    }
}

export interface IPutElement1dRequest {
    id: number;
    startNodeId: number;
    endNodeId: number;
    materialId: number;
    sectionProfileId: number;
    sectionProfileRotation?: NullableOfAngle | undefined;
    metadata?: { [key: string]: string; } | undefined;

    [key: string]: any;
}

export class PutMaterialRequest implements IPutMaterialRequest {
    id?: number;
    modulusOfElasticity!: number;
    modulusOfRigidity!: number;
    pressureUnit!: number;

    [key: string]: any;

    constructor(data?: IPutMaterialRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.modulusOfElasticity = _data["modulusOfElasticity"];
            this.modulusOfRigidity = _data["modulusOfRigidity"];
            this.pressureUnit = _data["pressureUnit"];
        }
    }

    static fromJS(data: any): PutMaterialRequest {
        data = typeof data === 'object' ? data : {};
        let result = new PutMaterialRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["modulusOfElasticity"] = this.modulusOfElasticity;
        data["modulusOfRigidity"] = this.modulusOfRigidity;
        data["pressureUnit"] = this.pressureUnit;
        return data;
    }
}

export interface IPutMaterialRequest {
    id?: number;
    modulusOfElasticity: number;
    modulusOfRigidity: number;
    pressureUnit: number;

    [key: string]: any;
}

export class PutMomentLoadRequest implements IPutMomentLoadRequest {
    id?: number;
    nodeId!: number;
    torque!: Torque;
    axisDirection!: Vector3;

    [key: string]: any;

    constructor(data?: IPutMomentLoadRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.torque = new Torque();
            this.axisDirection = new Vector3();
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.nodeId = _data["nodeId"];
            this.torque = _data["torque"] ? Torque.fromJS(_data["torque"]) : new Torque();
            this.axisDirection = _data["axisDirection"] ? Vector3.fromJS(_data["axisDirection"]) : new Vector3();
        }
    }

    static fromJS(data: any): PutMomentLoadRequest {
        data = typeof data === 'object' ? data : {};
        let result = new PutMomentLoadRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["nodeId"] = this.nodeId;
        data["torque"] = this.torque ? this.torque.toJSON() : <any>undefined;
        data["axisDirection"] = this.axisDirection ? this.axisDirection.toJSON() : <any>undefined;
        return data;
    }
}

export interface IPutMomentLoadRequest {
    id?: number;
    nodeId: number;
    torque: Torque;
    axisDirection: Vector3;

    [key: string]: any;
}

export class PutNodeRequest implements IPutNodeRequest {
    id!: number;
    locationPoint!: Point;
    restraint!: Restraint;
    metadata?: { [key: string]: string; } | undefined;

    [key: string]: any;

    constructor(data?: IPutNodeRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.locationPoint = new Point();
            this.restraint = new Restraint();
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.locationPoint = _data["locationPoint"] ? Point.fromJS(_data["locationPoint"]) : new Point();
            this.restraint = _data["restraint"] ? Restraint.fromJS(_data["restraint"]) : new Restraint();
            if (_data["metadata"]) {
                this.metadata = {} as any;
                for (let key in _data["metadata"]) {
                    if (_data["metadata"].hasOwnProperty(key))
                        (<any>this.metadata)![key] = _data["metadata"][key];
                }
            }
        }
    }

    static fromJS(data: any): PutNodeRequest {
        data = typeof data === 'object' ? data : {};
        let result = new PutNodeRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["locationPoint"] = this.locationPoint ? this.locationPoint.toJSON() : <any>undefined;
        data["restraint"] = this.restraint ? this.restraint.toJSON() : <any>undefined;
        if (this.metadata) {
            data["metadata"] = {};
            for (let key in this.metadata) {
                if (this.metadata.hasOwnProperty(key))
                    (<any>data["metadata"])[key] = (<any>this.metadata)[key];
            }
        }
        return data;
    }
}

export interface IPutNodeRequest {
    id: number;
    locationPoint: Point;
    restraint: Restraint;
    metadata?: { [key: string]: string; } | undefined;

    [key: string]: any;
}

export class PutPointLoadRequest implements IPutPointLoadRequest {
    id!: number;
    nodeId!: number;
    force!: Force;
    direction!: Vector3;

    [key: string]: any;

    constructor(data?: IPutPointLoadRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.force = new Force();
            this.direction = new Vector3();
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.nodeId = _data["nodeId"];
            this.force = _data["force"] ? Force.fromJS(_data["force"]) : new Force();
            this.direction = _data["direction"] ? Vector3.fromJS(_data["direction"]) : new Vector3();
        }
    }

    static fromJS(data: any): PutPointLoadRequest {
        data = typeof data === 'object' ? data : {};
        let result = new PutPointLoadRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["nodeId"] = this.nodeId;
        data["force"] = this.force ? this.force.toJSON() : <any>undefined;
        data["direction"] = this.direction ? this.direction.toJSON() : <any>undefined;
        return data;
    }
}

export interface IPutPointLoadRequest {
    id: number;
    nodeId: number;
    force: Force;
    direction: Vector3;

    [key: string]: any;
}

export class PutSectionProfileRequest implements IPutSectionProfileRequest {
    id!: number;
    area!: number;
    strongAxisMomentOfInertia!: number;
    weakAxisMomentOfInertia!: number;
    polarMomentOfInertia!: number;
    strongAxisShearArea!: number;
    weakAxisShearArea!: number;
    areaUnit?: number;
    areaMomentOfInertiaUnit?: number;

    [key: string]: any;

    constructor(data?: IPutSectionProfileRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.area = _data["area"];
            this.strongAxisMomentOfInertia = _data["strongAxisMomentOfInertia"];
            this.weakAxisMomentOfInertia = _data["weakAxisMomentOfInertia"];
            this.polarMomentOfInertia = _data["polarMomentOfInertia"];
            this.strongAxisShearArea = _data["strongAxisShearArea"];
            this.weakAxisShearArea = _data["weakAxisShearArea"];
            this.areaUnit = _data["areaUnit"];
            this.areaMomentOfInertiaUnit = _data["areaMomentOfInertiaUnit"];
        }
    }

    static fromJS(data: any): PutSectionProfileRequest {
        data = typeof data === 'object' ? data : {};
        let result = new PutSectionProfileRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["area"] = this.area;
        data["strongAxisMomentOfInertia"] = this.strongAxisMomentOfInertia;
        data["weakAxisMomentOfInertia"] = this.weakAxisMomentOfInertia;
        data["polarMomentOfInertia"] = this.polarMomentOfInertia;
        data["strongAxisShearArea"] = this.strongAxisShearArea;
        data["weakAxisShearArea"] = this.weakAxisShearArea;
        data["areaUnit"] = this.areaUnit;
        data["areaMomentOfInertiaUnit"] = this.areaMomentOfInertiaUnit;
        return data;
    }
}

export interface IPutSectionProfileRequest {
    id: number;
    area: number;
    strongAxisMomentOfInertia: number;
    weakAxisMomentOfInertia: number;
    polarMomentOfInertia: number;
    strongAxisShearArea: number;
    weakAxisShearArea: number;
    areaUnit?: number;
    areaMomentOfInertiaUnit?: number;

    [key: string]: any;
}

export class Restraint implements IRestraint {
    canTranslateAlongX!: boolean;
    canTranslateAlongY!: boolean;
    canTranslateAlongZ!: boolean;
    canRotateAboutX!: boolean;
    canRotateAboutY!: boolean;
    canRotateAboutZ!: boolean;

    [key: string]: any;

    constructor(data?: IRestraint) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.canTranslateAlongX = _data["canTranslateAlongX"];
            this.canTranslateAlongY = _data["canTranslateAlongY"];
            this.canTranslateAlongZ = _data["canTranslateAlongZ"];
            this.canRotateAboutX = _data["canRotateAboutX"];
            this.canRotateAboutY = _data["canRotateAboutY"];
            this.canRotateAboutZ = _data["canRotateAboutZ"];
        }
    }

    static fromJS(data: any): Restraint {
        data = typeof data === 'object' ? data : {};
        let result = new Restraint();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["canTranslateAlongX"] = this.canTranslateAlongX;
        data["canTranslateAlongY"] = this.canTranslateAlongY;
        data["canTranslateAlongZ"] = this.canTranslateAlongZ;
        data["canRotateAboutX"] = this.canRotateAboutX;
        data["canRotateAboutY"] = this.canRotateAboutY;
        data["canRotateAboutZ"] = this.canRotateAboutZ;
        return data;
    }
}

export interface IRestraint {
    canTranslateAlongX: boolean;
    canTranslateAlongY: boolean;
    canTranslateAlongZ: boolean;
    canRotateAboutX: boolean;
    canRotateAboutY: boolean;
    canRotateAboutZ: boolean;

    [key: string]: any;
}

export class ResultOfBeamOsModelBuilderDto implements IResultOfBeamOsModelBuilderDto {
    value!: BeamOsModelBuilderDto | undefined;
    error!: BeamOsError | undefined;
    isError!: boolean;

    [key: string]: any;

    constructor(data?: IResultOfBeamOsModelBuilderDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.value = _data["value"] ? BeamOsModelBuilderDto.fromJS(_data["value"]) : <any>undefined;
            this.error = _data["error"] ? BeamOsError.fromJS(_data["error"]) : <any>undefined;
            this.isError = _data["isError"];
        }
    }

    static fromJS(data: any): ResultOfBeamOsModelBuilderDto {
        data = typeof data === 'object' ? data : {};
        let result = new ResultOfBeamOsModelBuilderDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["value"] = this.value ? this.value.toJSON() : <any>undefined;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["isError"] = this.isError;
        return data;
    }
}

export interface IResultOfBeamOsModelBuilderDto {
    value: BeamOsModelBuilderDto | undefined;
    error: BeamOsError | undefined;
    isError: boolean;

    [key: string]: any;
}

export class SpeckleReceiveParameters implements ISpeckleReceiveParameters {
    apiToken!: string;
    projectId!: string;
    objectId!: string;
    serverUrl!: string;

    [key: string]: any;

    constructor(data?: ISpeckleReceiveParameters) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.apiToken = _data["apiToken"];
            this.projectId = _data["projectId"];
            this.objectId = _data["objectId"];
            this.serverUrl = _data["serverUrl"];
        }
    }

    static fromJS(data: any): SpeckleReceiveParameters {
        data = typeof data === 'object' ? data : {};
        let result = new SpeckleReceiveParameters();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["apiToken"] = this.apiToken;
        data["projectId"] = this.projectId;
        data["objectId"] = this.objectId;
        data["serverUrl"] = this.serverUrl;
        return data;
    }
}

export interface ISpeckleReceiveParameters {
    apiToken: string;
    projectId: string;
    objectId: string;
    serverUrl: string;

    [key: string]: any;
}

export class Torque implements ITorque {
    value!: number;
    unit!: number;

    [key: string]: any;

    constructor(data?: ITorque) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.value = _data["value"];
            this.unit = _data["unit"];
        }
    }

    static fromJS(data: any): Torque {
        data = typeof data === 'object' ? data : {};
        let result = new Torque();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["value"] = this.value;
        data["unit"] = this.unit;
        return data;
    }
}

export interface ITorque {
    value: number;
    unit: number;

    [key: string]: any;
}

export class UnitSettings implements IUnitSettings {
    lengthUnit!: number;
    forceUnit!: number;
    angleUnit?: number;

    [key: string]: any;

    constructor(data?: IUnitSettings) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.lengthUnit = _data["lengthUnit"];
            this.forceUnit = _data["forceUnit"];
            this.angleUnit = _data["angleUnit"];
        }
    }

    static fromJS(data: any): UnitSettings {
        data = typeof data === 'object' ? data : {};
        let result = new UnitSettings();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["lengthUnit"] = this.lengthUnit;
        data["forceUnit"] = this.forceUnit;
        data["angleUnit"] = this.angleUnit;
        return data;
    }
}

export interface IUnitSettings {
    lengthUnit: number;
    forceUnit: number;
    angleUnit?: number;

    [key: string]: any;
}

export class Vector3 implements IVector3 {
    x!: number;
    y!: number;
    z!: number;

    [key: string]: any;

    constructor(data?: IVector3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.x = _data["x"];
            this.y = _data["y"];
            this.z = _data["z"];
        }
    }

    static fromJS(data: any): Vector3 {
        data = typeof data === 'object' ? data : {};
        let result = new Vector3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["x"] = this.x;
        data["y"] = this.y;
        data["z"] = this.z;
        return data;
    }
}

export interface IVector3 {
    x: number;
    y: number;
    z: number;

    [key: string]: any;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}