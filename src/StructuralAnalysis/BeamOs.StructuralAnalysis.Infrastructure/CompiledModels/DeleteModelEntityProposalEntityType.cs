// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using BeamOs.Common.Domain.Models;
using BeamOs.StructuralAnalysis.Contracts.Common;
using BeamOs.StructuralAnalysis.Domain.Common;
using BeamOs.StructuralAnalysis.Domain.PhysicalModel.ModelAggregate;
using BeamOs.StructuralAnalysis.Infrastructure.Common;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace BeamOs.StructuralAnalysis.Api
{
    [EntityFrameworkInternal]
    public partial class DeleteModelEntityProposalEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "BeamOs.StructuralAnalysis.Domain.PhysicalModel.ModelAggregate.DeleteModelEntityProposal",
                typeof(DeleteModelEntityProposal),
                baseEntityType,
                propertyCount: 5,
                navigationCount: 2,
                foreignKeyCount: 2,
                unnamedIndexCount: 2,
                keyCount: 1);

            var id = runtimeEntityType.AddProperty(
                "Id",
                typeof(ModelEntityDeleteProposalId),
                propertyInfo: typeof(BeamOsEntity<ModelEntityDeleteProposalId>).GetProperty("Id", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(BeamOsEntity<ModelEntityDeleteProposalId>).GetField("<Id>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                valueConverter: new ModelEntityDeleteProposalIdConverter());
            id.SetSentinelFromProviderValue(0);

            var modelProposalId = runtimeEntityType.AddProperty(
                "ModelProposalId",
                typeof(ModelProposalId),
                propertyInfo: typeof(DeleteModelEntityProposal).GetProperty("ModelProposalId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(DeleteModelEntityProposal).GetField("<ModelProposalId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                afterSaveBehavior: PropertySaveBehavior.Throw,
                valueConverter: new ModelIdProposalConverter());
            modelProposalId.SetSentinelFromProviderValue(0);

            var modelId = runtimeEntityType.AddProperty(
                "ModelId",
                typeof(ModelId),
                propertyInfo: typeof(BeamOsModelEntity<ModelEntityDeleteProposalId>).GetProperty("ModelId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(BeamOsModelEntity<ModelEntityDeleteProposalId>).GetField("<ModelId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                afterSaveBehavior: PropertySaveBehavior.Throw,
                valueConverter: new ModelIdConverter());
            modelId.SetSentinelFromProviderValue(new Guid("01995299-f5f8-7712-b157-ccaeb80992a1"));

            var modelEntityId = runtimeEntityType.AddProperty(
                "ModelEntityId",
                typeof(int),
                propertyInfo: typeof(DeleteModelEntityProposal).GetProperty("ModelEntityId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(DeleteModelEntityProposal).GetField("<ModelEntityId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0);

            var objectType = runtimeEntityType.AddProperty(
                "ObjectType",
                typeof(BeamOsObjectType),
                propertyInfo: typeof(DeleteModelEntityProposal).GetProperty("ObjectType", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(DeleteModelEntityProposal).GetField("<ObjectType>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            objectType.SetSentinelFromProviderValue((byte)0);

            var key = runtimeEntityType.AddKey(
                new[] { id, modelProposalId, modelId });
            runtimeEntityType.SetPrimaryKey(key);

            var index = runtimeEntityType.AddIndex(
                new[] { modelId });

            var index0 = runtimeEntityType.AddIndex(
                new[] { modelProposalId, modelId });

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ModelId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id") }),
                principalEntityType,
                deleteBehavior: DeleteBehavior.Cascade,
                required: true);

            var model = declaringEntityType.AddNavigation("Model",
                runtimeForeignKey,
                onDependent: true,
                typeof(Model),
                propertyInfo: typeof(BeamOsModelEntity<ModelEntityDeleteProposalId>).GetProperty("Model", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(BeamOsModelEntity<ModelEntityDeleteProposalId>).GetField("<Model>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey2(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ModelProposalId"), declaringEntityType.FindProperty("ModelId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id"), principalEntityType.FindProperty("ModelId") }),
                principalEntityType,
                deleteBehavior: DeleteBehavior.Cascade,
                required: true);

            var modelProposal = declaringEntityType.AddNavigation("ModelProposal",
                runtimeForeignKey,
                onDependent: true,
                typeof(ModelProposal),
                propertyInfo: typeof(DeleteModelEntityProposal).GetProperty("ModelProposal", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(DeleteModelEntityProposal).GetField("<ModelProposal>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var deleteModelEntityProposals = principalEntityType.AddNavigation("DeleteModelEntityProposals",
                runtimeForeignKey,
                onDependent: false,
                typeof(List<DeleteModelEntityProposal>),
                propertyInfo: typeof(ModelProposal).GetProperty("DeleteModelEntityProposals", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ModelProposal).GetField("<DeleteModelEntityProposals>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "DeleteModelEntityProposals");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
