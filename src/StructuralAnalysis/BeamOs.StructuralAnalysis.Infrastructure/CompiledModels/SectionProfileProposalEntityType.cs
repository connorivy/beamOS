// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using BeamOs.Common.Domain.Models;
using BeamOs.StructuralAnalysis.Domain.Common;
using BeamOs.StructuralAnalysis.Domain.PhysicalModel.ModelAggregate;
using BeamOs.StructuralAnalysis.Domain.PhysicalModel.SectionProfileAggregate;
using BeamOs.StructuralAnalysis.Infrastructure.Common;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using UnitsNet;

#pragma warning disable 219, 612, 618
#nullable disable

namespace BeamOs.StructuralAnalysis.Api
{
    [EntityFrameworkInternal]
    public partial class SectionProfileProposalEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "BeamOs.StructuralAnalysis.Domain.PhysicalModel.SectionProfileAggregate.SectionProfileProposal",
                typeof(SectionProfileProposal),
                baseEntityType,
                propertyCount: 13,
                navigationCount: 2,
                foreignKeyCount: 2,
                unnamedIndexCount: 2,
                keyCount: 1);

            var id = runtimeEntityType.AddProperty(
                "Id",
                typeof(SectionProfileProposalId),
                propertyInfo: typeof(BeamOsEntity<SectionProfileProposalId>).GetProperty("Id", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(BeamOsEntity<SectionProfileProposalId>).GetField("<Id>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                valueConverter: new SectionProfileProposalIdConverter());
            id.SetSentinelFromProviderValue(0);

            var modelProposalId = runtimeEntityType.AddProperty(
                "ModelProposalId",
                typeof(ModelProposalId),
                propertyInfo: typeof(BeamOsModelProposalEntity<SectionProfileProposalId, SectionProfileId>).GetProperty("ModelProposalId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(BeamOsModelProposalEntity<SectionProfileProposalId, SectionProfileId>).GetField("<ModelProposalId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                afterSaveBehavior: PropertySaveBehavior.Throw,
                valueConverter: new ModelIdProposalConverter());
            modelProposalId.SetSentinelFromProviderValue(0);

            var modelId = runtimeEntityType.AddProperty(
                "ModelId",
                typeof(ModelId),
                propertyInfo: typeof(BeamOsModelProposalEntity<SectionProfileProposalId, SectionProfileId>).GetProperty("ModelId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(BeamOsModelProposalEntity<SectionProfileProposalId, SectionProfileId>).GetField("<ModelId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                afterSaveBehavior: PropertySaveBehavior.Throw,
                valueConverter: new ModelIdConverter());
            modelId.SetSentinelFromProviderValue(new Guid("01995299-f612-7873-be1e-e7864359aee4"));

            var area = runtimeEntityType.AddProperty(
                "Area",
                typeof(Area),
                propertyInfo: typeof(SectionProfileProposal).GetProperty("Area", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SectionProfileProposal).GetField("<Area>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueConverter: new AreaValueConverter());
            area.SetSentinelFromProviderValue(0.0);

            var existingId = runtimeEntityType.AddProperty(
                "ExistingId",
                typeof(SectionProfileId?),
                propertyInfo: typeof(BeamOsModelProposalEntity<SectionProfileProposalId, SectionProfileId>).GetProperty("ExistingId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(BeamOsModelProposalEntity<SectionProfileProposalId, SectionProfileId>).GetField("<ExistingId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueConverter: new SectionProfileIdConverter());

            var name = runtimeEntityType.AddProperty(
                "Name",
                typeof(string),
                propertyInfo: typeof(SectionProfileProposalInfoBase).GetProperty("Name", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SectionProfileProposalInfoBase).GetField("<Name>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var polarMomentOfInertia = runtimeEntityType.AddProperty(
                "PolarMomentOfInertia",
                typeof(AreaMomentOfInertia),
                propertyInfo: typeof(SectionProfileProposal).GetProperty("PolarMomentOfInertia", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SectionProfileProposal).GetField("<PolarMomentOfInertia>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueConverter: new AreaMomentOfInertiaValueConverter());
            polarMomentOfInertia.SetSentinelFromProviderValue(0.0);

            var strongAxisMomentOfInertia = runtimeEntityType.AddProperty(
                "StrongAxisMomentOfInertia",
                typeof(AreaMomentOfInertia),
                propertyInfo: typeof(SectionProfileProposal).GetProperty("StrongAxisMomentOfInertia", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SectionProfileProposal).GetField("<StrongAxisMomentOfInertia>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueConverter: new AreaMomentOfInertiaValueConverter());
            strongAxisMomentOfInertia.SetSentinelFromProviderValue(0.0);

            var strongAxisPlasticSectionModulus = runtimeEntityType.AddProperty(
                "StrongAxisPlasticSectionModulus",
                typeof(Volume),
                propertyInfo: typeof(SectionProfileProposal).GetProperty("StrongAxisPlasticSectionModulus", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SectionProfileProposal).GetField("<StrongAxisPlasticSectionModulus>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueConverter: new VolumeValueConverter());
            strongAxisPlasticSectionModulus.SetSentinelFromProviderValue(0.0);

            var strongAxisShearArea = runtimeEntityType.AddProperty(
                "StrongAxisShearArea",
                typeof(Area?),
                propertyInfo: typeof(SectionProfileProposal).GetProperty("StrongAxisShearArea", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SectionProfileProposal).GetField("<StrongAxisShearArea>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueConverter: new AreaValueConverter());

            var weakAxisMomentOfInertia = runtimeEntityType.AddProperty(
                "WeakAxisMomentOfInertia",
                typeof(AreaMomentOfInertia),
                propertyInfo: typeof(SectionProfileProposal).GetProperty("WeakAxisMomentOfInertia", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SectionProfileProposal).GetField("<WeakAxisMomentOfInertia>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueConverter: new AreaMomentOfInertiaValueConverter());
            weakAxisMomentOfInertia.SetSentinelFromProviderValue(0.0);

            var weakAxisPlasticSectionModulus = runtimeEntityType.AddProperty(
                "WeakAxisPlasticSectionModulus",
                typeof(Volume),
                propertyInfo: typeof(SectionProfileProposal).GetProperty("WeakAxisPlasticSectionModulus", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SectionProfileProposal).GetField("<WeakAxisPlasticSectionModulus>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueConverter: new VolumeValueConverter());
            weakAxisPlasticSectionModulus.SetSentinelFromProviderValue(0.0);

            var weakAxisShearArea = runtimeEntityType.AddProperty(
                "WeakAxisShearArea",
                typeof(Area?),
                propertyInfo: typeof(SectionProfileProposal).GetProperty("WeakAxisShearArea", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SectionProfileProposal).GetField("<WeakAxisShearArea>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueConverter: new AreaValueConverter());

            var key = runtimeEntityType.AddKey(
                new[] { id, modelProposalId, modelId });
            runtimeEntityType.SetPrimaryKey(key);

            var index = runtimeEntityType.AddIndex(
                new[] { modelId });

            var index0 = runtimeEntityType.AddIndex(
                new[] { modelProposalId, modelId });

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ModelId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id") }),
                principalEntityType,
                deleteBehavior: DeleteBehavior.Cascade,
                required: true);

            var model = declaringEntityType.AddNavigation("Model",
                runtimeForeignKey,
                onDependent: true,
                typeof(Model),
                propertyInfo: typeof(BeamOsModelProposalEntity<SectionProfileProposalId, SectionProfileId>).GetProperty("Model", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(BeamOsModelProposalEntity<SectionProfileProposalId, SectionProfileId>).GetField("<Model>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey2(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ModelProposalId"), declaringEntityType.FindProperty("ModelId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id"), principalEntityType.FindProperty("ModelId") }),
                principalEntityType,
                deleteBehavior: DeleteBehavior.Cascade,
                required: true);

            var modelProposal = declaringEntityType.AddNavigation("ModelProposal",
                runtimeForeignKey,
                onDependent: true,
                typeof(ModelProposal),
                propertyInfo: typeof(BeamOsModelProposalEntity<SectionProfileProposalId, SectionProfileId>).GetProperty("ModelProposal", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(BeamOsModelProposalEntity<SectionProfileProposalId, SectionProfileId>).GetField("<ModelProposal>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var sectionProfileProposals = principalEntityType.AddNavigation("SectionProfileProposals",
                runtimeForeignKey,
                onDependent: false,
                typeof(List<SectionProfileProposal>),
                propertyInfo: typeof(ModelProposal).GetProperty("SectionProfileProposals", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ModelProposal).GetField("<SectionProfileProposals>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "SectionProfileProposal");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
