@page "/editor"
@using BeamOS.DirectStiffnessMethod.Client
@using BeamOS.DirectStiffnessMethod.Contracts.Model
@using BeamOS.PhysicalModel.Client
@using BeamOS.PhysicalModel.Contracts.Element1D
@using BeamOS.PhysicalModel.Contracts.Model
@using BeamOS.PhysicalModel.Contracts.Node
@using BeamOS.WebApp.EditorApi

@rendermode InteractiveAuto

@inject IJSRuntime js
@inject IPhysicalModelAlphaClient apiClient
@inject IDirectStiffnessMethodAlphaClient dsmClient
@inject EditorApiProxyFactory editorApiAlphaFactory

<PageTitle>Editor</PageTitle>

<div class="relative w-full h-3/4">
    <div class="bg-gray-900 w-full h-full absolute"></div>
    <canvas id="@elementId" class="w-full h-full absolute"></canvas>
    @if (isLoading)
    {   
        <div class="bg-gray-900 w-full h-full absolute justify-center items-center opacity-90">
            <div class="flex w-full h-full m-auto left-0 right-0 top-0 bottom-0 justify-center items-center">
                <div class="rounded animate-spin ease duration-300 w-10 h-10 border-4 border-white"></div>
                <h2 class="px-3 font-bold text-white"> @loadingText ...</h2>
            </div>
        </div>
    }
</div>

<div class="flex flex-col p-6 w-full">
    <div class="flex justify-center items-center pb-2.5">
        <AuthorizeView>
            <Authorized>
                <button @onclick="Solve" class="bg-indigo-300 hover:bg-indigo-400 text-gray-800 font-bold py-2 px-4 rounded inline-flex items-center">
                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M15.75 15.75V18m-7.5-6.75h.008v.008H8.25v-.008Zm0 2.25h.008v.008H8.25V13.5Zm0 2.25h.008v.008H8.25v-.008Zm0 2.25h.008v.008H8.25V18Zm2.498-6.75h.007v.008h-.007v-.008Zm0 2.25h.007v.008h-.007V13.5Zm0 2.25h.007v.008h-.007v-.008Zm0 2.25h.007v.008h-.007V18Zm2.504-6.75h.008v.008h-.008v-.008Zm0 2.25h.008v.008h-.008V13.5Zm0 2.25h.008v.008h-.008v-.008Zm0 2.25h.008v.008h-.008V18Zm2.498-6.75h.008v.008h-.008v-.008Zm0 2.25h.008v.008h-.008V13.5ZM8.25 6h7.5v2.25h-7.5V6ZM12 2.25c-1.892 0-3.758.11-5.593.322C5.307 2.7 4.5 3.65 4.5 4.757V19.5a2.25 2.25 0 0 0 2.25 2.25h10.5a2.25 2.25 0 0 0 2.25-2.25V4.757c0-1.108-.806-2.057-1.907-2.185A48.507 48.507 0 0 0 12 2.25Z" />
                    </svg>
                  <span>Solve</span>
                </button>
            </Authorized>
            <NotAuthorized>
                <button disabled class="bg-gray-300 text-gray-800 font-bold py-2 px-4 rounded inline-flex items-center">
                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M15.75 15.75V18m-7.5-6.75h.008v.008H8.25v-.008Zm0 2.25h.008v.008H8.25V13.5Zm0 2.25h.008v.008H8.25v-.008Zm0 2.25h.008v.008H8.25V18Zm2.498-6.75h.007v.008h-.007v-.008Zm0 2.25h.007v.008h-.007V13.5Zm0 2.25h.007v.008h-.007v-.008Zm0 2.25h.007v.008h-.007V18Zm2.504-6.75h.008v.008h-.008v-.008Zm0 2.25h.008v.008h-.008V13.5Zm0 2.25h.008v.008h-.008v-.008Zm0 2.25h.008v.008h-.008V18Zm2.498-6.75h.008v.008h-.008v-.008Zm0 2.25h.008v.008h-.008V13.5ZM8.25 6h7.5v2.25h-7.5V6ZM12 2.25c-1.892 0-3.758.11-5.593.322C5.307 2.7 4.5 3.65 4.5 4.757V19.5a2.25 2.25 0 0 0 2.25 2.25h10.5a2.25 2.25 0 0 0 2.25-2.25V4.757c0-1.108-.806-2.057-1.907-2.185A48.507 48.507 0 0 0 12 2.25Z" />
                    </svg>
                  <span>Solve</span>
                </button>
                <div id="alert-border-4" class="flex justify-center items-center p-4 mx-2 text-yellow-800 border-t-4 border-yellow-300 bg-yellow-50 dark:text-yellow-300 dark:bg-gray-800 dark:border-yellow-800" role="alert">
                    <svg class="flex-shrink-0 w-4 h-4" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20">
                      <path d="M10 .5a9.5 9.5 0 1 0 9.5 9.5A9.51 9.51 0 0 0 10 .5ZM9.5 4a1.5 1.5 0 1 1 0 3 1.5 1.5 0 0 1 0-3ZM12 15H8a1 1 0 0 1 0-2h1v-3H8a1 1 0 0 1 0-2h2a1 1 0 0 1 1 1v4h1a1 1 0 0 1 0 2Z"/>
                    </svg>
                    <div class="ms-3 text-sm font-medium">
                      You need to login to enable analysis functionality.
                    </div>
                </div>
            </NotAuthorized>
        </AuthorizeView>
    </div>

    <div class="flex flex-col md:flex-row mb-8">
        <div class="w-full overflow-x-auto shadow-md sm:rounded-lg">
            <table class="w-full text-sm text-left rtl:text-right text-gray-500">
                <thead class="text-xs text-gray-700 uppercase bg-gray-50">
                    <tr>
                        <th scope="col" class="px-6 py-3">
                            Calculated Reactions
                        </th>
                        <th scope="col" class="px-6 py-3">
                            Expected Reactions
                        </th>
                        <th scope="col" class="px-6 py-3">
                            Difference
                        </th>
                    </tr>
                </thead>
                <tbody>
                @for (int i = 0; i < @ExpectedDisplacements.Count; i++)
                {
                    <tr class="odd:bg-white even:bg-gray-50 border-b">
                        <td class="px-6 py-4">@CalculatedDisplacements?.ElementAt(i)</td>
                        <td class="px-6 py-4">@ExpectedDisplacements[i]</td>
                        <th scope="row" class="px-6 py-4 font-medium text-gray-900 whitespace-nowrap">
                            @(@GetDifferenceOrNull(
                                @ExpectedDisplacements[i],
                                @CalculatedDisplacements?.ElementAt(i))?
                            .ToString() ?? "N/A")
                        </th>
                    </tr>
                }
                </tbody>
            </table>
        </div>

        <div class="p-4"></div>

        <div class="w-full overflow-x-auto shadow-md sm:rounded-lg">
            <table class="w-full text-sm text-left rtl:text-right text-gray-500">
                <thead class="text-xs text-gray-700 uppercase bg-gray-50">
                    <tr>
                        <th scope="col" class="px-6 py-3">
                            Calculated Reactions
                        </th>
                        <th scope="col" class="px-6 py-3">
                            Expected Reactions
                        </th>
                        <th scope="col" class="px-6 py-3">
                            Difference
                        </th>
                    </tr>
                </thead>
                <tbody>
                @for (int i = 0; i < @ExpectedDisplacements.Count; i++)
                {
                    <tr class="odd:bg-white even:bg-gray-50 border-b">
                        <td class="px-6 py-4">@CalculatedReactions?.ElementAt(i)</td>
                        <td class="px-6 py-4">@ExpectedReactions[i]</td>
                        <th scope="row" class="px-6 py-4 font-medium text-gray-900 whitespace-nowrap">
                            @(@GetDifferenceOrNull(
                                ExpectedReactions[i],
                                CalculatedReactions?.ElementAt(i))?
                            .ToString() ?? "N/A")
                        </th>
                    </tr>
                }
                </tbody>
            </table>
        </div>
    </div>
</div>

@code {
    private IEditorApiAlpha? editorApiAlpha;

    private string loadingText = "Loading beamOS Editor";
    private bool isLoading = true;

    string elementId = "id" + Guid.NewGuid().ToString("N");

    const string physicalModelId = "00000000-0000-0000-0000-000000000000";

    public List<double>? CalculatedReactions { get; set; }
    public List<double>? CalculatedDisplacements { get; set; }
    public List<double> ExpectedReactions { get; } = [
        0,
        0,
        0,
        -10.064,
        -13.419,
        0,
        0,
        0,
        0,
        126.83,
        0,
        0,
        0,
        -139.94,
        186.58,
        0,
        0,
        0,
    ];

    public List<double> ExpectedDisplacements { get; } = [
        .21552,
        -.13995,
        0,
        0,
        0,
        0
    ];

    private double? GetDifferenceOrNull(double expected, double? calculated)
    {
        if (calculated is not double typedCalculated)
        {
            return null;
        }
        return Math.Round(expected - typedCalculated, 3);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isLoading = true;
            editorApiAlpha ??= await editorApiAlphaFactory.Create(elementId);
            loadingText = "Fetching Data";
            StateHasChanged();
            await LoadModel();
            isLoading = false;
            StateHasChanged();
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task AddNode()
    {
        CreateNodeRequest request = new(
            physicalModelId,
            10,
            5,
            10,
            "Foot");

        NodeResponse response = await apiClient.CreateNodeAsync(request);
        var x = await editorApiAlpha.CreateNodeAsync(response);
    }

    private async Task LoadModel()
    {
        try
        {
            ModelResponseHydrated response = await apiClient.GetModelHydratedAsync(physicalModelId);
            var x = await editorApiAlpha.CreateModelHydratedAsync(response);
        }
        catch
        {

        }
    }

    private async Task Solve()
    {
        AnalyticalModelResponse response = await dsmClient.RunDirectStiffnessMethodAsync(physicalModelId);
        CalculatedReactions = response.AnalyticalNodeReactions;
        CalculatedDisplacements = response.AnalyticalNodeDisplacements;
    }
}

