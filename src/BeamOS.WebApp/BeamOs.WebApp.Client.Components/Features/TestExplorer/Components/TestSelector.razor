@using BeamOs.Contracts.PhysicalModel.Common
@using BeamOs.Tests.TestRunner
@using BeamOs.WebApp.Client.EditorCommands

@inherits FluxorComponent

@* <MudPaper Class="w-full basis-1/3 grow min-h-0 point-events-auto"> *@

<MudDrawerHeader Class="flex flex-row p-0 h-fit min-h-4 items-center">
    <MudTooltip Text="Back to All Example Problems">
        <MudIconButton Icon="@Icons.Material.Filled.ArrowBack" OnClick="GoBack"></MudIconButton>
    </MudTooltip>
    <MudText Typo="Typo.h6" Class="grow text-center">Test Results for @this.TestSelectorState.Value.SelectedObjectType</MudText>
    <div class="w-12"></div>
</MudDrawerHeader>

    <div class="flex flex-col h-full w-full">

@*     <MudGrid>
        <MudItem xs="3">

        </MudItem>
        <MudItem xs="9">

        </MudItem>
    </MudGrid> *@
    <div class="px-2">
        <MudText Typo="Typo.subtitle1" Color="Color.Primary">Id: @this.TestSelectorState.Value.SelectedObjectId</MudText>
    </div>

    @{
        int numSelectedTests = 0;
    }
    <MudList Class="grow" T="TestResult2" SelectedValueChanged="OnSelectedTestInfoChanged">
        @if (this.TestSelectorState.Value.SelectedTestResults is List<TestResult2> results)
        {
            @foreach (var testResult in results)
            {
                numSelectedTests++;
                <MudListItem Value="@testResult" Text="@testResult.TestName">

                </MudListItem>
            }
        }
        else
        {
            <div class="flex flex-col w-full h-full justify-center items-center">
                <MudText>This item does not have any individual tests</MudText>
                <MudText>Select an element that has tests</MudText>
            </div>
        }
    </MudList>
     @* <MudList>

     </MudList> *@
    <div class="p-2 flex flex-col w-full items-center">
        <MudText>This model has @(this.TestSelectorState.Value.TotalNumTests - numSelectedTests) other tests.</MudText>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="ToggleFilter">
            @(this.TestSelectorState.Value.EditorFilterApplied ? "Remove Filter" : "Hide Elements Without Tests")
        </MudButton>
    </div>
    </div>
@* </MudPaper> *@

@code {
    // [Parameter]
    // public string ModelId { get; init; }

    // [Parameter]
    // public string CanvasId { get; init; }

    [Inject]
    private IState<TestSelectorState> TestSelectorState { get; init; }

    [Inject]
    private IDispatcher Dispatcher { get; init; }

    [Inject]
    private TestInfoProvider TestInfoProvider { get; init; }

    [Inject]
    private IServiceProvider ServiceProvider { get; init; }

    [Inject]
    private AllStructuralAnalysisModelCaches AllStructuralAnalysisModelCaches { get; init; }

    private void OnSelectedTestInfoChanged(TestResult2 testResult)
    {
        // this.Dispatcher.Dispatch(new ChangeSelectedTestInfoAction(testInfo));
        // await this.HandleExecuteTestAction(testInfo.Id);
        this.Dispatcher.Dispatch(new ExecutionTestActionResult("", testResult));
    }

    private async Task OnSelectedTestInfoChanged(TestInfo? testInfo)
    {
        this.Dispatcher.Dispatch(new ChangeSelectedTestInfoAction(testInfo));
        await this.HandleExecuteTestAction(testInfo.Id);
    }

    private async Task HandleExecuteTestAction(string testId)
    {
        TestInfo testInfo = this.TestInfoProvider.TestInfos[testId];

        // todo : get and add to cache
        TestResult result = await testInfo.RunTest(this.ServiceProvider);
        this.Dispatcher.Dispatch(new ExecutionTestActionResult(testId, result));
    }

    private bool filterApplied;

    private void ToggleFilter()
    {
        if (this.TestSelectorState.Value.EditorFilterApplied)
        {
            this.RemoveFilters();
            this.Dispatcher.Dispatch(new ChangeEditorFilterApplied(false));
        }
        else
        {
            this.GhostObjectsWithoutTests();
            this.Dispatcher.Dispatch(new ChangeEditorFilterApplied(true));
        }
    }

    private void GoBack()
    {
        this.Dispatcher.Dispatch(new ChangeSelectedProblemTests(null));
    }

    private void GhostObjectsWithoutTests()
    {
        var testIds = this.TestSelectorState.Value.AllTestResults.SelectMany(kvp => kvp.Value.Select(r => r.BeamOsObjectId)).ToList();

        this.Dispatcher.Dispatch(new SetColorFilterCommand(this.TestSelectorState.Value.CanvasId, new(testIds, true, "0x808080", true)));

        // var idsToGhost = this.AllStructuralAnalysisModelCaches.GetByModelId(modelId).GetEntityIdsOfType<BeamOsEntityContractBase>();
        // foreach (var id in this.TestSelectorState.Value.AllTestResults.SelectMany(kvp => kvp.Value.Select(r => r.BeamOsObjectId)))
        // {
        //     idsToGhost.Remove(id);
        // }

    }

    private void RemoveFilters()
    {
        var testIds = this.TestSelectorState.Value.AllTestResults.SelectMany(kvp => kvp.Value.Select(r => r.BeamOsObjectId)).ToList();

        this.Dispatcher.Dispatch(new RemoveColorFilterCommand(this.TestSelectorState.Value.CanvasId, new(testIds, true)));
    }
}
