using BeamOs.CodeGen.StructuralAnalysisApiClient;
using BeamOs.Common.Contracts;
using BeamOs.StructuralAnalysis.Application.Common;
using BeamOs.StructuralAnalysis.Contracts.PhysicalModel.MomentLoads;
using BeamOs.WebApp.Components.Features.Common;
using BeamOs.WebApp.Components.Features.Editor;
using BeamOs.WebApp.EditorCommands.Interfaces;
using Fluxor;
using Microsoft.Extensions.Logging;
using MudBlazor;

namespace BeamOs.WebApp.Components.Features.ModelObjectEditor.MomentLoads;

public sealed class CreateMomentLoadClientCommandHandler(
    ILogger<CreateMomentLoadClientCommandHandler> logger,
    ISnackbar snackbar,
    IStructuralAnalysisApiClientV1 structuralAnalysisApiClientV1,
    IDispatcher dispatcher,
    IState<EditorComponentState> editorState
) : ClientCommandHandlerBase<CreateMomentLoadClientCommand, MomentLoadResponse>(logger, snackbar)
{
    // protected override async ValueTask<Result> UpdateEditor(CreateMomentLoadClientCommand command)
    // {
    //     var editorApi =
    //         editorState.Value.EditorApi
    //         ?? throw new InvalidOperationException("Editor API is not initialized");

    //     return await editorApi.CreateMomentLoadAsync(
    //         new MomentLoadResponse(command.TempMomentLoadId, command.ModelId, command.Data).ToEditorUnits()
    //     );
    // }

    protected override async ValueTask<Result<MomentLoadResponse>> UpdateServer(
        CreateMomentLoadClientCommand command,
        CancellationToken ct = default
    )
    {
        return await structuralAnalysisApiClientV1.CreateMomentLoadAsync(
            command.ModelId,
            new(command.Data.NodeId, command.Data.Torque, command.Data.AxisDirection),
            ct
        );
    }

    // protected override async ValueTask<Result> UpdateEditorAfterServerResponse(
    //     CreateMomentLoadClientCommand command,
    //     Result<MomentLoadResponse> serverResponse
    // )
    // {
    //     var editorApi =
    //         editorState.Value.EditorApi
    //         ?? throw new InvalidOperationException("Editor API is not initialized");

    //     if (serverResponse.IsSuccess)
    //     {
    //         await editorApi.CreateMomentLoadAsync(serverResponse.Value.ToEditorUnits());
    //     }

    //     return await editorApi.DeleteMomentLoadAsync(
    //         new ModelEntityCommand() { Id = command.TempMomentLoadId, ModelId = command.ModelId }
    //     );
    // }

    protected override ValueTask<Result> UpdateClient(
        CreateMomentLoadClientCommand command,
        Result<MomentLoadResponse> serverResponse
    )
    {
        if (serverResponse.IsSuccess)
        {
            dispatcher.Dispatch(command with { MomentLoadId = serverResponse.Value.Id });
        }

        return new(Result.Success);
    }
}

public record CreateMomentLoadClientCommand(MomentLoadData Data) : IBeamOsClientCommand
{
    public Guid Id { get; } = Guid.NewGuid();
    public bool HandledByEditor { get; init; }
    public bool HandledByBlazor { get; init; }
    public bool HandledByServer { get; init; }
    public int TempMomentLoadId { get; init; } = ClientUtils.GenerateTempId();
    public required Guid ModelId { get; init; }

    /// <summary>
    /// The ID of the node in the model. This is null for temporary nodes.
    /// The ID is generated by the server when the node is created.
    /// </summary>
    public int? MomentLoadId { get; init; }

    public IBeamOsClientCommand GetUndoCommand(BeamOsClientCommandArgs? args = null) =>
        new DeleteMomentLoadClientCommand
        {
            ModelId = this.ModelId,
            MomentLoadId = this.MomentLoadId ?? this.TempMomentLoadId,
            Data = this.Data,
            HandledByBlazor = args?.HandledByBlazor ?? this.HandledByBlazor,
            HandledByEditor = args?.HandledByEditor ?? this.HandledByEditor,
            HandledByServer = args?.HandledByServer ?? this.HandledByServer,
        };

    public IBeamOsClientCommand WithArgs(BeamOsClientCommandArgs? args = null) =>
        this with
        {
            HandledByBlazor = args?.HandledByBlazor ?? this.HandledByBlazor,
            HandledByEditor = args?.HandledByEditor ?? this.HandledByEditor,
            HandledByServer = args?.HandledByServer ?? this.HandledByServer,
        };
}
