//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export interface IStructuralAnalysisContracts {

    /**
     * @return OK
     */
    beamOs_Contracts_PhysicalModel_SectionProfile_CreateSectionProfileRequest(): Promise<CreateSectionProfileRequest>;

    /**
     * @return OK
     */
    beamOs_Contracts_PhysicalModel_SectionProfile_SectionProfileResponse(): Promise<SectionProfileResponse>;

    /**
     * @return OK
     */
    beamOs_Contracts_PhysicalModel_PointLoad_CreatePointLoadRequest(): Promise<CreatePointLoadRequest>;

    /**
     * @return OK
     */
    beamOs_Contracts_PhysicalModel_PointLoad_PointLoadResponse(): Promise<PointLoadResponse>;

    /**
     * @return OK
     */
    beamOs_Contracts_PhysicalModel_Node_CreateNodeRequest(): Promise<CreateNodeRequest>;

    /**
     * @return OK
     */
    beamOs_Contracts_PhysicalModel_Node_Point(): Promise<Point>;

    /**
     * @return OK
     */
    beamOs_Contracts_PhysicalModel_Node_PatchPointRequest(): Promise<PatchPointRequest>;

    /**
     * @return OK
     */
    beamOs_Contracts_PhysicalModel_Node_PatchRestraintRequest(): Promise<PatchRestraintRequest>;

    /**
     * @return OK
     */
    beamOs_Contracts_PhysicalModel_Node_PatchNodeRequest(): Promise<PatchNodeRequest>;

    /**
     * @return OK
     */
    beamOs_Contracts_PhysicalModel_Node_NodeResponse(): Promise<NodeResponse>;

    /**
     * @return OK
     */
    beamOs_Contracts_PhysicalModel_Node_RestraintContract(): Promise<RestraintContract>;

    /**
     * @return OK
     */
    beamOs_Contracts_PhysicalModel_MomentLoad_CreateMomentLoadRequest(): Promise<CreateMomentLoadRequest>;

    /**
     * @return OK
     */
    beamOs_Contracts_PhysicalModel_MomentLoad_GetMomentLoadRequest(): Promise<GetMomentLoadRequest>;

    /**
     * @return OK
     */
    beamOs_Contracts_PhysicalModel_MomentLoad_MomentLoadResponse(): Promise<MomentLoadResponse>;

    /**
     * @return OK
     */
    beamOs_Contracts_PhysicalModel_Model_CreateModelRequest(): Promise<CreateModelRequest>;

    /**
     * @return OK
     */
    beamOs_Contracts_PhysicalModel_Model_PhysicalModelSettings(): Promise<PhysicalModelSettings>;

    /**
     * @return OK
     */
    beamOs_Contracts_PhysicalModel_Model_AnalysisSettingsContract(): Promise<AnalysisSettingsContract>;

    /**
     * @return OK
     */
    beamOs_Contracts_PhysicalModel_Model_Element1dAnalysisType(): Promise<Element1dAnalysisType>;

    /**
     * @return OK
     */
    beamOs_Contracts_PhysicalModel_Model_GetElementsInModelRequest(): Promise<GetElementsInModelRequest>;

    /**
     * @return OK
     */
    beamOs_Contracts_PhysicalModel_Model_ModelResponse(): Promise<ModelResponse>;

    /**
     * @return OK
     */
    beamOs_Contracts_PhysicalModel_Model_ModelSettingsResponse(): Promise<ModelSettingsResponse>;

    /**
     * @return OK
     */
    beamOs_Contracts_PhysicalModel_Model_UnitSettingsResponse(): Promise<UnitSettingsResponse>;

    /**
     * @return OK
     */
    beamOs_Contracts_PhysicalModel_Model_ModelResponseHydrated(): Promise<ModelResponseHydrated>;

    /**
     * @return OK
     */
    beamOs_Contracts_PhysicalModel_Material_CreateMaterialRequest(): Promise<CreateMaterialRequest>;

    /**
     * @return OK
     */
    beamOs_Contracts_PhysicalModel_Material_MaterialResponse(): Promise<MaterialResponse>;

    /**
     * @return OK
     */
    beamOs_Contracts_PhysicalModel_Element1d_CreateElement1dRequest(): Promise<CreateElement1dRequest>;

    /**
     * @return OK
     */
    beamOs_Contracts_PhysicalModel_Element1d_Element1DResponse(): Promise<Element1DResponse>;

    /**
     * @return OK
     */
    beamOs_Contracts_PhysicalModel_Element1d_GetElement1dsRequest(): Promise<GetElement1dsRequest>;

    /**
     * @return OK
     */
    beamOs_Contracts_Editor_SetColorFilter(): Promise<SetColorFilter>;

    /**
     * @return OK
     */
    beamOs_Contracts_Editor_ClearFilters(): Promise<ClearFilters>;

    /**
     * @return OK
     */
    beamOs_Contracts_Common_EmptyRequest(): Promise<EmptyRequest>;

    /**
     * @return OK
     */
    beamOs_Contracts_Common_IdRequest(): Promise<IdRequest>;

    /**
     * @return OK
     */
    beamOs_Contracts_Common_ModelIdRequest(): Promise<ModelIdRequest>;

    /**
     * @return OK
     */
    beamOs_Contracts_Common_IdRequestWithProperties(): Promise<IdRequestWithProperties>;

    /**
     * @return OK
     */
    beamOs_Contracts_Common_ModelIdRequestWithProperties(): Promise<ModelIdRequestWithProperties>;

    /**
     * @return OK
     */
    beamOs_Contracts_Common_GetNodeResultsRequest(): Promise<GetNodeResultsRequest>;

    /**
     * @return OK
     */
    beamOs_Contracts_Common_UnitSettingsContract(): Promise<UnitSettingsContract>;

    /**
     * @return OK
     */
    beamOs_Contracts_Common_LengthUnitContract(): Promise<LengthUnitContract>;

    /**
     * @return OK
     */
    beamOs_Contracts_Common_AreaUnitContract(): Promise<AreaUnitContract>;

    /**
     * @return OK
     */
    beamOs_Contracts_Common_VolumeUnitContract(): Promise<VolumeUnitContract>;

    /**
     * @return OK
     */
    beamOs_Contracts_Common_AreaMomentOfInertiaUnitContract(): Promise<AreaMomentOfInertiaUnitContract>;

    /**
     * @return OK
     */
    beamOs_Contracts_Common_ForceUnitContract(): Promise<ForceUnitContract>;

    /**
     * @return OK
     */
    beamOs_Contracts_Common_AngleUnitContract(): Promise<AngleUnitContract>;

    /**
     * @return OK
     */
    beamOs_Contracts_Common_TorqueUnitContract(): Promise<TorqueUnitContract>;

    /**
     * @return OK
     */
    beamOs_Contracts_Common_ForcePerLengthUnitContract(): Promise<ForcePerLengthUnitContract>;

    /**
     * @return OK
     */
    beamOs_Contracts_Common_PressureUnitContract(): Promise<PressureUnitContract>;

    /**
     * @return OK
     */
    beamOs_Contracts_Common_UnitSettingsDto(): Promise<UnitSettingsDto>;

    /**
     * @return OK
     */
    beamOs_Contracts_Common_UnitSettingsDtoVerbose(): Promise<UnitSettingsDtoVerbose>;

    /**
     * @return OK
     */
    beamOs_Contracts_Common_PreconfiguredUnits(): Promise<PreconfiguredUnits>;

    /**
     * @return OK
     */
    beamOs_Contracts_Common_UnitValueDto(): Promise<UnitValueDto>;

    /**
     * @return OK
     */
    beamOs_Contracts_Common_LengthContract(): Promise<LengthContract>;

    /**
     * @return OK
     */
    beamOs_Contracts_Common_AreaContract(): Promise<AreaContract>;

    /**
     * @return OK
     */
    beamOs_Contracts_Common_VolumeContract(): Promise<VolumeContract>;

    /**
     * @return OK
     */
    beamOs_Contracts_Common_AreaMomentOfInertiaContract(): Promise<AreaMomentOfInertiaContract>;

    /**
     * @return OK
     */
    beamOs_Contracts_Common_ForceContract(): Promise<ForceContract>;

    /**
     * @return OK
     */
    beamOs_Contracts_Common_AngleContract(): Promise<AngleContract>;

    /**
     * @return OK
     */
    beamOs_Contracts_Common_TorqueContract(): Promise<TorqueContract>;

    /**
     * @return OK
     */
    beamOs_Contracts_Common_ForcePerLengthContract(): Promise<ForcePerLengthContract>;

    /**
     * @return OK
     */
    beamOs_Contracts_Common_PressureContract(): Promise<PressureContract>;

    /**
     * @return OK
     */
    beamOs_Contracts_Common_Vector3(): Promise<Vector3>;

    /**
     * @return OK
     */
    beamOs_Contracts_AnalyticalModel_DisplacementsResponse(): Promise<DisplacementsResponse>;

    /**
     * @return OK
     */
    beamOs_Contracts_AnalyticalModel_Results_AnalyticalModelResponse(): Promise<AnalyticalModelResponse>;

    /**
     * @return OK
     */
    beamOs_Contracts_AnalyticalModel_Results_AnalyticalModelResponse2(): Promise<AnalyticalModelResponse2>;

    /**
     * @return OK
     */
    beamOs_Contracts_AnalyticalModel_Results_AnalyticalModelResponse3(): Promise<AnalyticalModelResponse3>;

    /**
     * @return OK
     */
    beamOs_Contracts_AnalyticalModel_Results_UnsupportedStructureDisplacementIdResponse(): Promise<UnsupportedStructureDisplacementIdResponse>;

    /**
     * @return OK
     */
    beamOs_Contracts_AnalyticalModel_Results_AnalyticalResultsResponse(): Promise<AnalyticalResultsResponse>;

    /**
     * @return OK
     */
    beamOs_Contracts_AnalyticalModel_Results_RunAnalysisRequest(): Promise<RunAnalysisRequest>;

    /**
     * @return OK
     */
    beamOs_Contracts_AnalyticalModel_Results_ModelSettingsRequest(): Promise<ModelSettingsRequest>;

    /**
     * @return OK
     */
    beamOs_Contracts_AnalyticalModel_Results_UnitSettingsRequest(): Promise<UnitSettingsRequest>;

    /**
     * @return OK
     */
    beamOs_Contracts_AnalyticalModel_Forces_ForcesResponse(): Promise<ForcesResponse>;

    /**
     * @return OK
     */
    beamOs_Contracts_AnalyticalModel_Diagrams_DiagramResponse(): Promise<DiagramResponse>;

    /**
     * @return OK
     */
    beamOs_Contracts_AnalyticalModel_Diagrams_DiagramConsistentIntervalResponse(): Promise<DiagramConsistentIntervalResponse>;

    /**
     * @return OK
     */
    beamOs_Contracts_AnalyticalModel_Diagrams_ShearDiagramResponse(): Promise<ShearDiagramResponse>;

    /**
     * @return OK
     */
    beamOs_Contracts_AnalyticalModel_Diagrams_MomentDiagramResponse(): Promise<MomentDiagramResponse>;

    /**
     * @return OK
     */
    beamOs_Contracts_AnalyticalModel_AnalyticalNode_NodeResultResponse(): Promise<NodeResultResponse>;
}

export class StructuralAnalysisContracts implements IStructuralAnalysisContracts {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @return OK
     */
    beamOs_Contracts_PhysicalModel_SectionProfile_CreateSectionProfileRequest(): Promise<CreateSectionProfileRequest> {
        let url_ = this.baseUrl + "/StructuralAnalysisContracts/BeamOs.Contracts.PhysicalModel.SectionProfile.CreateSectionProfileRequest";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBeamOs_Contracts_PhysicalModel_SectionProfile_CreateSectionProfileRequest(_response);
        });
    }

    protected processBeamOs_Contracts_PhysicalModel_SectionProfile_CreateSectionProfileRequest(response: Response): Promise<CreateSectionProfileRequest> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CreateSectionProfileRequest.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CreateSectionProfileRequest>(null as any);
    }

    /**
     * @return OK
     */
    beamOs_Contracts_PhysicalModel_SectionProfile_SectionProfileResponse(): Promise<SectionProfileResponse> {
        let url_ = this.baseUrl + "/StructuralAnalysisContracts/BeamOs.Contracts.PhysicalModel.SectionProfile.SectionProfileResponse";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBeamOs_Contracts_PhysicalModel_SectionProfile_SectionProfileResponse(_response);
        });
    }

    protected processBeamOs_Contracts_PhysicalModel_SectionProfile_SectionProfileResponse(response: Response): Promise<SectionProfileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SectionProfileResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<SectionProfileResponse>(null as any);
    }

    /**
     * @return OK
     */
    beamOs_Contracts_PhysicalModel_PointLoad_CreatePointLoadRequest(): Promise<CreatePointLoadRequest> {
        let url_ = this.baseUrl + "/StructuralAnalysisContracts/BeamOs.Contracts.PhysicalModel.PointLoad.CreatePointLoadRequest";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBeamOs_Contracts_PhysicalModel_PointLoad_CreatePointLoadRequest(_response);
        });
    }

    protected processBeamOs_Contracts_PhysicalModel_PointLoad_CreatePointLoadRequest(response: Response): Promise<CreatePointLoadRequest> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CreatePointLoadRequest.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CreatePointLoadRequest>(null as any);
    }

    /**
     * @return OK
     */
    beamOs_Contracts_PhysicalModel_PointLoad_PointLoadResponse(): Promise<PointLoadResponse> {
        let url_ = this.baseUrl + "/StructuralAnalysisContracts/BeamOs.Contracts.PhysicalModel.PointLoad.PointLoadResponse";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBeamOs_Contracts_PhysicalModel_PointLoad_PointLoadResponse(_response);
        });
    }

    protected processBeamOs_Contracts_PhysicalModel_PointLoad_PointLoadResponse(response: Response): Promise<PointLoadResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PointLoadResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PointLoadResponse>(null as any);
    }

    /**
     * @return OK
     */
    beamOs_Contracts_PhysicalModel_Node_CreateNodeRequest(): Promise<CreateNodeRequest> {
        let url_ = this.baseUrl + "/StructuralAnalysisContracts/BeamOs.Contracts.PhysicalModel.Node.CreateNodeRequest";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBeamOs_Contracts_PhysicalModel_Node_CreateNodeRequest(_response);
        });
    }

    protected processBeamOs_Contracts_PhysicalModel_Node_CreateNodeRequest(response: Response): Promise<CreateNodeRequest> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CreateNodeRequest.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CreateNodeRequest>(null as any);
    }

    /**
     * @return OK
     */
    beamOs_Contracts_PhysicalModel_Node_Point(): Promise<Point> {
        let url_ = this.baseUrl + "/StructuralAnalysisContracts/BeamOs.Contracts.PhysicalModel.Node.Point";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBeamOs_Contracts_PhysicalModel_Node_Point(_response);
        });
    }

    protected processBeamOs_Contracts_PhysicalModel_Node_Point(response: Response): Promise<Point> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Point.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Point>(null as any);
    }

    /**
     * @return OK
     */
    beamOs_Contracts_PhysicalModel_Node_PatchPointRequest(): Promise<PatchPointRequest> {
        let url_ = this.baseUrl + "/StructuralAnalysisContracts/BeamOs.Contracts.PhysicalModel.Node.PatchPointRequest";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBeamOs_Contracts_PhysicalModel_Node_PatchPointRequest(_response);
        });
    }

    protected processBeamOs_Contracts_PhysicalModel_Node_PatchPointRequest(response: Response): Promise<PatchPointRequest> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PatchPointRequest.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PatchPointRequest>(null as any);
    }

    /**
     * @return OK
     */
    beamOs_Contracts_PhysicalModel_Node_PatchRestraintRequest(): Promise<PatchRestraintRequest> {
        let url_ = this.baseUrl + "/StructuralAnalysisContracts/BeamOs.Contracts.PhysicalModel.Node.PatchRestraintRequest";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBeamOs_Contracts_PhysicalModel_Node_PatchRestraintRequest(_response);
        });
    }

    protected processBeamOs_Contracts_PhysicalModel_Node_PatchRestraintRequest(response: Response): Promise<PatchRestraintRequest> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PatchRestraintRequest.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PatchRestraintRequest>(null as any);
    }

    /**
     * @return OK
     */
    beamOs_Contracts_PhysicalModel_Node_PatchNodeRequest(): Promise<PatchNodeRequest> {
        let url_ = this.baseUrl + "/StructuralAnalysisContracts/BeamOs.Contracts.PhysicalModel.Node.PatchNodeRequest";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBeamOs_Contracts_PhysicalModel_Node_PatchNodeRequest(_response);
        });
    }

    protected processBeamOs_Contracts_PhysicalModel_Node_PatchNodeRequest(response: Response): Promise<PatchNodeRequest> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PatchNodeRequest.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PatchNodeRequest>(null as any);
    }

    /**
     * @return OK
     */
    beamOs_Contracts_PhysicalModel_Node_NodeResponse(): Promise<NodeResponse> {
        let url_ = this.baseUrl + "/StructuralAnalysisContracts/BeamOs.Contracts.PhysicalModel.Node.NodeResponse";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBeamOs_Contracts_PhysicalModel_Node_NodeResponse(_response);
        });
    }

    protected processBeamOs_Contracts_PhysicalModel_Node_NodeResponse(response: Response): Promise<NodeResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = NodeResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<NodeResponse>(null as any);
    }

    /**
     * @return OK
     */
    beamOs_Contracts_PhysicalModel_Node_RestraintContract(): Promise<RestraintContract> {
        let url_ = this.baseUrl + "/StructuralAnalysisContracts/BeamOs.Contracts.PhysicalModel.Node.RestraintContract";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBeamOs_Contracts_PhysicalModel_Node_RestraintContract(_response);
        });
    }

    protected processBeamOs_Contracts_PhysicalModel_Node_RestraintContract(response: Response): Promise<RestraintContract> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RestraintContract.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<RestraintContract>(null as any);
    }

    /**
     * @return OK
     */
    beamOs_Contracts_PhysicalModel_MomentLoad_CreateMomentLoadRequest(): Promise<CreateMomentLoadRequest> {
        let url_ = this.baseUrl + "/StructuralAnalysisContracts/BeamOs.Contracts.PhysicalModel.MomentLoad.CreateMomentLoadRequest";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBeamOs_Contracts_PhysicalModel_MomentLoad_CreateMomentLoadRequest(_response);
        });
    }

    protected processBeamOs_Contracts_PhysicalModel_MomentLoad_CreateMomentLoadRequest(response: Response): Promise<CreateMomentLoadRequest> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CreateMomentLoadRequest.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CreateMomentLoadRequest>(null as any);
    }

    /**
     * @return OK
     */
    beamOs_Contracts_PhysicalModel_MomentLoad_GetMomentLoadRequest(): Promise<GetMomentLoadRequest> {
        let url_ = this.baseUrl + "/StructuralAnalysisContracts/BeamOs.Contracts.PhysicalModel.MomentLoad.GetMomentLoadRequest";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBeamOs_Contracts_PhysicalModel_MomentLoad_GetMomentLoadRequest(_response);
        });
    }

    protected processBeamOs_Contracts_PhysicalModel_MomentLoad_GetMomentLoadRequest(response: Response): Promise<GetMomentLoadRequest> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetMomentLoadRequest.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GetMomentLoadRequest>(null as any);
    }

    /**
     * @return OK
     */
    beamOs_Contracts_PhysicalModel_MomentLoad_MomentLoadResponse(): Promise<MomentLoadResponse> {
        let url_ = this.baseUrl + "/StructuralAnalysisContracts/BeamOs.Contracts.PhysicalModel.MomentLoad.MomentLoadResponse";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBeamOs_Contracts_PhysicalModel_MomentLoad_MomentLoadResponse(_response);
        });
    }

    protected processBeamOs_Contracts_PhysicalModel_MomentLoad_MomentLoadResponse(response: Response): Promise<MomentLoadResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = MomentLoadResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<MomentLoadResponse>(null as any);
    }

    /**
     * @return OK
     */
    beamOs_Contracts_PhysicalModel_Model_CreateModelRequest(): Promise<CreateModelRequest> {
        let url_ = this.baseUrl + "/StructuralAnalysisContracts/BeamOs.Contracts.PhysicalModel.Model.CreateModelRequest";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBeamOs_Contracts_PhysicalModel_Model_CreateModelRequest(_response);
        });
    }

    protected processBeamOs_Contracts_PhysicalModel_Model_CreateModelRequest(response: Response): Promise<CreateModelRequest> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CreateModelRequest.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CreateModelRequest>(null as any);
    }

    /**
     * @return OK
     */
    beamOs_Contracts_PhysicalModel_Model_PhysicalModelSettings(): Promise<PhysicalModelSettings> {
        let url_ = this.baseUrl + "/StructuralAnalysisContracts/BeamOs.Contracts.PhysicalModel.Model.PhysicalModelSettings";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBeamOs_Contracts_PhysicalModel_Model_PhysicalModelSettings(_response);
        });
    }

    protected processBeamOs_Contracts_PhysicalModel_Model_PhysicalModelSettings(response: Response): Promise<PhysicalModelSettings> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PhysicalModelSettings.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PhysicalModelSettings>(null as any);
    }

    /**
     * @return OK
     */
    beamOs_Contracts_PhysicalModel_Model_AnalysisSettingsContract(): Promise<AnalysisSettingsContract> {
        let url_ = this.baseUrl + "/StructuralAnalysisContracts/BeamOs.Contracts.PhysicalModel.Model.AnalysisSettingsContract";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBeamOs_Contracts_PhysicalModel_Model_AnalysisSettingsContract(_response);
        });
    }

    protected processBeamOs_Contracts_PhysicalModel_Model_AnalysisSettingsContract(response: Response): Promise<AnalysisSettingsContract> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AnalysisSettingsContract.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AnalysisSettingsContract>(null as any);
    }

    /**
     * @return OK
     */
    beamOs_Contracts_PhysicalModel_Model_Element1dAnalysisType(): Promise<Element1dAnalysisType> {
        let url_ = this.baseUrl + "/StructuralAnalysisContracts/BeamOs.Contracts.PhysicalModel.Model.Element1dAnalysisType";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBeamOs_Contracts_PhysicalModel_Model_Element1dAnalysisType(_response);
        });
    }

    protected processBeamOs_Contracts_PhysicalModel_Model_Element1dAnalysisType(response: Response): Promise<Element1dAnalysisType> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Element1dAnalysisType>(null as any);
    }

    /**
     * @return OK
     */
    beamOs_Contracts_PhysicalModel_Model_GetElementsInModelRequest(): Promise<GetElementsInModelRequest> {
        let url_ = this.baseUrl + "/StructuralAnalysisContracts/BeamOs.Contracts.PhysicalModel.Model.GetElementsInModelRequest";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBeamOs_Contracts_PhysicalModel_Model_GetElementsInModelRequest(_response);
        });
    }

    protected processBeamOs_Contracts_PhysicalModel_Model_GetElementsInModelRequest(response: Response): Promise<GetElementsInModelRequest> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetElementsInModelRequest.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GetElementsInModelRequest>(null as any);
    }

    /**
     * @return OK
     */
    beamOs_Contracts_PhysicalModel_Model_ModelResponse(): Promise<ModelResponse> {
        let url_ = this.baseUrl + "/StructuralAnalysisContracts/BeamOs.Contracts.PhysicalModel.Model.ModelResponse";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBeamOs_Contracts_PhysicalModel_Model_ModelResponse(_response);
        });
    }

    protected processBeamOs_Contracts_PhysicalModel_Model_ModelResponse(response: Response): Promise<ModelResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ModelResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ModelResponse>(null as any);
    }

    /**
     * @return OK
     */
    beamOs_Contracts_PhysicalModel_Model_ModelSettingsResponse(): Promise<ModelSettingsResponse> {
        let url_ = this.baseUrl + "/StructuralAnalysisContracts/BeamOs.Contracts.PhysicalModel.Model.ModelSettingsResponse";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBeamOs_Contracts_PhysicalModel_Model_ModelSettingsResponse(_response);
        });
    }

    protected processBeamOs_Contracts_PhysicalModel_Model_ModelSettingsResponse(response: Response): Promise<ModelSettingsResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ModelSettingsResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ModelSettingsResponse>(null as any);
    }

    /**
     * @return OK
     */
    beamOs_Contracts_PhysicalModel_Model_UnitSettingsResponse(): Promise<UnitSettingsResponse> {
        let url_ = this.baseUrl + "/StructuralAnalysisContracts/BeamOs.Contracts.PhysicalModel.Model.UnitSettingsResponse";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBeamOs_Contracts_PhysicalModel_Model_UnitSettingsResponse(_response);
        });
    }

    protected processBeamOs_Contracts_PhysicalModel_Model_UnitSettingsResponse(response: Response): Promise<UnitSettingsResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UnitSettingsResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<UnitSettingsResponse>(null as any);
    }

    /**
     * @return OK
     */
    beamOs_Contracts_PhysicalModel_Model_ModelResponseHydrated(): Promise<ModelResponseHydrated> {
        let url_ = this.baseUrl + "/StructuralAnalysisContracts/BeamOs.Contracts.PhysicalModel.Model.ModelResponseHydrated";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBeamOs_Contracts_PhysicalModel_Model_ModelResponseHydrated(_response);
        });
    }

    protected processBeamOs_Contracts_PhysicalModel_Model_ModelResponseHydrated(response: Response): Promise<ModelResponseHydrated> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ModelResponseHydrated.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ModelResponseHydrated>(null as any);
    }

    /**
     * @return OK
     */
    beamOs_Contracts_PhysicalModel_Material_CreateMaterialRequest(): Promise<CreateMaterialRequest> {
        let url_ = this.baseUrl + "/StructuralAnalysisContracts/BeamOs.Contracts.PhysicalModel.Material.CreateMaterialRequest";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBeamOs_Contracts_PhysicalModel_Material_CreateMaterialRequest(_response);
        });
    }

    protected processBeamOs_Contracts_PhysicalModel_Material_CreateMaterialRequest(response: Response): Promise<CreateMaterialRequest> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CreateMaterialRequest.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CreateMaterialRequest>(null as any);
    }

    /**
     * @return OK
     */
    beamOs_Contracts_PhysicalModel_Material_MaterialResponse(): Promise<MaterialResponse> {
        let url_ = this.baseUrl + "/StructuralAnalysisContracts/BeamOs.Contracts.PhysicalModel.Material.MaterialResponse";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBeamOs_Contracts_PhysicalModel_Material_MaterialResponse(_response);
        });
    }

    protected processBeamOs_Contracts_PhysicalModel_Material_MaterialResponse(response: Response): Promise<MaterialResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = MaterialResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<MaterialResponse>(null as any);
    }

    /**
     * @return OK
     */
    beamOs_Contracts_PhysicalModel_Element1d_CreateElement1dRequest(): Promise<CreateElement1dRequest> {
        let url_ = this.baseUrl + "/StructuralAnalysisContracts/BeamOs.Contracts.PhysicalModel.Element1d.CreateElement1dRequest";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBeamOs_Contracts_PhysicalModel_Element1d_CreateElement1dRequest(_response);
        });
    }

    protected processBeamOs_Contracts_PhysicalModel_Element1d_CreateElement1dRequest(response: Response): Promise<CreateElement1dRequest> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CreateElement1dRequest.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CreateElement1dRequest>(null as any);
    }

    /**
     * @return OK
     */
    beamOs_Contracts_PhysicalModel_Element1d_Element1DResponse(): Promise<Element1DResponse> {
        let url_ = this.baseUrl + "/StructuralAnalysisContracts/BeamOs.Contracts.PhysicalModel.Element1d.Element1DResponse";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBeamOs_Contracts_PhysicalModel_Element1d_Element1DResponse(_response);
        });
    }

    protected processBeamOs_Contracts_PhysicalModel_Element1d_Element1DResponse(response: Response): Promise<Element1DResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Element1DResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Element1DResponse>(null as any);
    }

    /**
     * @return OK
     */
    beamOs_Contracts_PhysicalModel_Element1d_GetElement1dsRequest(): Promise<GetElement1dsRequest> {
        let url_ = this.baseUrl + "/StructuralAnalysisContracts/BeamOs.Contracts.PhysicalModel.Element1d.GetElement1dsRequest";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBeamOs_Contracts_PhysicalModel_Element1d_GetElement1dsRequest(_response);
        });
    }

    protected processBeamOs_Contracts_PhysicalModel_Element1d_GetElement1dsRequest(response: Response): Promise<GetElement1dsRequest> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetElement1dsRequest.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GetElement1dsRequest>(null as any);
    }

    /**
     * @return OK
     */
    beamOs_Contracts_Editor_SetColorFilter(): Promise<SetColorFilter> {
        let url_ = this.baseUrl + "/StructuralAnalysisContracts/BeamOs.Contracts.Editor.SetColorFilter";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBeamOs_Contracts_Editor_SetColorFilter(_response);
        });
    }

    protected processBeamOs_Contracts_Editor_SetColorFilter(response: Response): Promise<SetColorFilter> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SetColorFilter.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<SetColorFilter>(null as any);
    }

    /**
     * @return OK
     */
    beamOs_Contracts_Editor_ClearFilters(): Promise<ClearFilters> {
        let url_ = this.baseUrl + "/StructuralAnalysisContracts/BeamOs.Contracts.Editor.ClearFilters";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBeamOs_Contracts_Editor_ClearFilters(_response);
        });
    }

    protected processBeamOs_Contracts_Editor_ClearFilters(response: Response): Promise<ClearFilters> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ClearFilters.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ClearFilters>(null as any);
    }

    /**
     * @return OK
     */
    beamOs_Contracts_Common_EmptyRequest(): Promise<EmptyRequest> {
        let url_ = this.baseUrl + "/StructuralAnalysisContracts/BeamOs.Contracts.Common.EmptyRequest";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBeamOs_Contracts_Common_EmptyRequest(_response);
        });
    }

    protected processBeamOs_Contracts_Common_EmptyRequest(response: Response): Promise<EmptyRequest> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EmptyRequest.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<EmptyRequest>(null as any);
    }

    /**
     * @return OK
     */
    beamOs_Contracts_Common_IdRequest(): Promise<IdRequest> {
        let url_ = this.baseUrl + "/StructuralAnalysisContracts/BeamOs.Contracts.Common.IdRequest";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBeamOs_Contracts_Common_IdRequest(_response);
        });
    }

    protected processBeamOs_Contracts_Common_IdRequest(response: Response): Promise<IdRequest> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IdRequest.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<IdRequest>(null as any);
    }

    /**
     * @return OK
     */
    beamOs_Contracts_Common_ModelIdRequest(): Promise<ModelIdRequest> {
        let url_ = this.baseUrl + "/StructuralAnalysisContracts/BeamOs.Contracts.Common.ModelIdRequest";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBeamOs_Contracts_Common_ModelIdRequest(_response);
        });
    }

    protected processBeamOs_Contracts_Common_ModelIdRequest(response: Response): Promise<ModelIdRequest> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ModelIdRequest.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ModelIdRequest>(null as any);
    }

    /**
     * @return OK
     */
    beamOs_Contracts_Common_IdRequestWithProperties(): Promise<IdRequestWithProperties> {
        let url_ = this.baseUrl + "/StructuralAnalysisContracts/BeamOs.Contracts.Common.IdRequestWithProperties";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBeamOs_Contracts_Common_IdRequestWithProperties(_response);
        });
    }

    protected processBeamOs_Contracts_Common_IdRequestWithProperties(response: Response): Promise<IdRequestWithProperties> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IdRequestWithProperties.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<IdRequestWithProperties>(null as any);
    }

    /**
     * @return OK
     */
    beamOs_Contracts_Common_ModelIdRequestWithProperties(): Promise<ModelIdRequestWithProperties> {
        let url_ = this.baseUrl + "/StructuralAnalysisContracts/BeamOs.Contracts.Common.ModelIdRequestWithProperties";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBeamOs_Contracts_Common_ModelIdRequestWithProperties(_response);
        });
    }

    protected processBeamOs_Contracts_Common_ModelIdRequestWithProperties(response: Response): Promise<ModelIdRequestWithProperties> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ModelIdRequestWithProperties.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ModelIdRequestWithProperties>(null as any);
    }

    /**
     * @return OK
     */
    beamOs_Contracts_Common_GetNodeResultsRequest(): Promise<GetNodeResultsRequest> {
        let url_ = this.baseUrl + "/StructuralAnalysisContracts/BeamOs.Contracts.Common.GetNodeResultsRequest";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBeamOs_Contracts_Common_GetNodeResultsRequest(_response);
        });
    }

    protected processBeamOs_Contracts_Common_GetNodeResultsRequest(response: Response): Promise<GetNodeResultsRequest> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetNodeResultsRequest.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GetNodeResultsRequest>(null as any);
    }

    /**
     * @return OK
     */
    beamOs_Contracts_Common_UnitSettingsContract(): Promise<UnitSettingsContract> {
        let url_ = this.baseUrl + "/StructuralAnalysisContracts/BeamOs.Contracts.Common.UnitSettingsContract";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBeamOs_Contracts_Common_UnitSettingsContract(_response);
        });
    }

    protected processBeamOs_Contracts_Common_UnitSettingsContract(response: Response): Promise<UnitSettingsContract> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UnitSettingsContract.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<UnitSettingsContract>(null as any);
    }

    /**
     * @return OK
     */
    beamOs_Contracts_Common_LengthUnitContract(): Promise<LengthUnitContract> {
        let url_ = this.baseUrl + "/StructuralAnalysisContracts/BeamOs.Contracts.Common.LengthUnitContract";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBeamOs_Contracts_Common_LengthUnitContract(_response);
        });
    }

    protected processBeamOs_Contracts_Common_LengthUnitContract(response: Response): Promise<LengthUnitContract> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<LengthUnitContract>(null as any);
    }

    /**
     * @return OK
     */
    beamOs_Contracts_Common_AreaUnitContract(): Promise<AreaUnitContract> {
        let url_ = this.baseUrl + "/StructuralAnalysisContracts/BeamOs.Contracts.Common.AreaUnitContract";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBeamOs_Contracts_Common_AreaUnitContract(_response);
        });
    }

    protected processBeamOs_Contracts_Common_AreaUnitContract(response: Response): Promise<AreaUnitContract> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AreaUnitContract>(null as any);
    }

    /**
     * @return OK
     */
    beamOs_Contracts_Common_VolumeUnitContract(): Promise<VolumeUnitContract> {
        let url_ = this.baseUrl + "/StructuralAnalysisContracts/BeamOs.Contracts.Common.VolumeUnitContract";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBeamOs_Contracts_Common_VolumeUnitContract(_response);
        });
    }

    protected processBeamOs_Contracts_Common_VolumeUnitContract(response: Response): Promise<VolumeUnitContract> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<VolumeUnitContract>(null as any);
    }

    /**
     * @return OK
     */
    beamOs_Contracts_Common_AreaMomentOfInertiaUnitContract(): Promise<AreaMomentOfInertiaUnitContract> {
        let url_ = this.baseUrl + "/StructuralAnalysisContracts/BeamOs.Contracts.Common.AreaMomentOfInertiaUnitContract";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBeamOs_Contracts_Common_AreaMomentOfInertiaUnitContract(_response);
        });
    }

    protected processBeamOs_Contracts_Common_AreaMomentOfInertiaUnitContract(response: Response): Promise<AreaMomentOfInertiaUnitContract> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AreaMomentOfInertiaUnitContract>(null as any);
    }

    /**
     * @return OK
     */
    beamOs_Contracts_Common_ForceUnitContract(): Promise<ForceUnitContract> {
        let url_ = this.baseUrl + "/StructuralAnalysisContracts/BeamOs.Contracts.Common.ForceUnitContract";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBeamOs_Contracts_Common_ForceUnitContract(_response);
        });
    }

    protected processBeamOs_Contracts_Common_ForceUnitContract(response: Response): Promise<ForceUnitContract> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ForceUnitContract>(null as any);
    }

    /**
     * @return OK
     */
    beamOs_Contracts_Common_AngleUnitContract(): Promise<AngleUnitContract> {
        let url_ = this.baseUrl + "/StructuralAnalysisContracts/BeamOs.Contracts.Common.AngleUnitContract";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBeamOs_Contracts_Common_AngleUnitContract(_response);
        });
    }

    protected processBeamOs_Contracts_Common_AngleUnitContract(response: Response): Promise<AngleUnitContract> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AngleUnitContract>(null as any);
    }

    /**
     * @return OK
     */
    beamOs_Contracts_Common_TorqueUnitContract(): Promise<TorqueUnitContract> {
        let url_ = this.baseUrl + "/StructuralAnalysisContracts/BeamOs.Contracts.Common.TorqueUnitContract";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBeamOs_Contracts_Common_TorqueUnitContract(_response);
        });
    }

    protected processBeamOs_Contracts_Common_TorqueUnitContract(response: Response): Promise<TorqueUnitContract> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<TorqueUnitContract>(null as any);
    }

    /**
     * @return OK
     */
    beamOs_Contracts_Common_ForcePerLengthUnitContract(): Promise<ForcePerLengthUnitContract> {
        let url_ = this.baseUrl + "/StructuralAnalysisContracts/BeamOs.Contracts.Common.ForcePerLengthUnitContract";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBeamOs_Contracts_Common_ForcePerLengthUnitContract(_response);
        });
    }

    protected processBeamOs_Contracts_Common_ForcePerLengthUnitContract(response: Response): Promise<ForcePerLengthUnitContract> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ForcePerLengthUnitContract>(null as any);
    }

    /**
     * @return OK
     */
    beamOs_Contracts_Common_PressureUnitContract(): Promise<PressureUnitContract> {
        let url_ = this.baseUrl + "/StructuralAnalysisContracts/BeamOs.Contracts.Common.PressureUnitContract";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBeamOs_Contracts_Common_PressureUnitContract(_response);
        });
    }

    protected processBeamOs_Contracts_Common_PressureUnitContract(response: Response): Promise<PressureUnitContract> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PressureUnitContract>(null as any);
    }

    /**
     * @return OK
     */
    beamOs_Contracts_Common_UnitSettingsDto(): Promise<UnitSettingsDto> {
        let url_ = this.baseUrl + "/StructuralAnalysisContracts/BeamOs.Contracts.Common.UnitSettingsDto";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBeamOs_Contracts_Common_UnitSettingsDto(_response);
        });
    }

    protected processBeamOs_Contracts_Common_UnitSettingsDto(response: Response): Promise<UnitSettingsDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UnitSettingsDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<UnitSettingsDto>(null as any);
    }

    /**
     * @return OK
     */
    beamOs_Contracts_Common_UnitSettingsDtoVerbose(): Promise<UnitSettingsDtoVerbose> {
        let url_ = this.baseUrl + "/StructuralAnalysisContracts/BeamOs.Contracts.Common.UnitSettingsDtoVerbose";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBeamOs_Contracts_Common_UnitSettingsDtoVerbose(_response);
        });
    }

    protected processBeamOs_Contracts_Common_UnitSettingsDtoVerbose(response: Response): Promise<UnitSettingsDtoVerbose> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UnitSettingsDtoVerbose.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<UnitSettingsDtoVerbose>(null as any);
    }

    /**
     * @return OK
     */
    beamOs_Contracts_Common_PreconfiguredUnits(): Promise<PreconfiguredUnits> {
        let url_ = this.baseUrl + "/StructuralAnalysisContracts/BeamOs.Contracts.Common.PreconfiguredUnits";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBeamOs_Contracts_Common_PreconfiguredUnits(_response);
        });
    }

    protected processBeamOs_Contracts_Common_PreconfiguredUnits(response: Response): Promise<PreconfiguredUnits> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PreconfiguredUnits>(null as any);
    }

    /**
     * @return OK
     */
    beamOs_Contracts_Common_UnitValueDto(): Promise<UnitValueDto> {
        let url_ = this.baseUrl + "/StructuralAnalysisContracts/BeamOs.Contracts.Common.UnitValueDto";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBeamOs_Contracts_Common_UnitValueDto(_response);
        });
    }

    protected processBeamOs_Contracts_Common_UnitValueDto(response: Response): Promise<UnitValueDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UnitValueDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<UnitValueDto>(null as any);
    }

    /**
     * @return OK
     */
    beamOs_Contracts_Common_LengthContract(): Promise<LengthContract> {
        let url_ = this.baseUrl + "/StructuralAnalysisContracts/BeamOs.Contracts.Common.LengthContract";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBeamOs_Contracts_Common_LengthContract(_response);
        });
    }

    protected processBeamOs_Contracts_Common_LengthContract(response: Response): Promise<LengthContract> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = LengthContract.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<LengthContract>(null as any);
    }

    /**
     * @return OK
     */
    beamOs_Contracts_Common_AreaContract(): Promise<AreaContract> {
        let url_ = this.baseUrl + "/StructuralAnalysisContracts/BeamOs.Contracts.Common.AreaContract";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBeamOs_Contracts_Common_AreaContract(_response);
        });
    }

    protected processBeamOs_Contracts_Common_AreaContract(response: Response): Promise<AreaContract> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AreaContract.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AreaContract>(null as any);
    }

    /**
     * @return OK
     */
    beamOs_Contracts_Common_VolumeContract(): Promise<VolumeContract> {
        let url_ = this.baseUrl + "/StructuralAnalysisContracts/BeamOs.Contracts.Common.VolumeContract";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBeamOs_Contracts_Common_VolumeContract(_response);
        });
    }

    protected processBeamOs_Contracts_Common_VolumeContract(response: Response): Promise<VolumeContract> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = VolumeContract.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<VolumeContract>(null as any);
    }

    /**
     * @return OK
     */
    beamOs_Contracts_Common_AreaMomentOfInertiaContract(): Promise<AreaMomentOfInertiaContract> {
        let url_ = this.baseUrl + "/StructuralAnalysisContracts/BeamOs.Contracts.Common.AreaMomentOfInertiaContract";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBeamOs_Contracts_Common_AreaMomentOfInertiaContract(_response);
        });
    }

    protected processBeamOs_Contracts_Common_AreaMomentOfInertiaContract(response: Response): Promise<AreaMomentOfInertiaContract> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AreaMomentOfInertiaContract.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AreaMomentOfInertiaContract>(null as any);
    }

    /**
     * @return OK
     */
    beamOs_Contracts_Common_ForceContract(): Promise<ForceContract> {
        let url_ = this.baseUrl + "/StructuralAnalysisContracts/BeamOs.Contracts.Common.ForceContract";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBeamOs_Contracts_Common_ForceContract(_response);
        });
    }

    protected processBeamOs_Contracts_Common_ForceContract(response: Response): Promise<ForceContract> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ForceContract.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ForceContract>(null as any);
    }

    /**
     * @return OK
     */
    beamOs_Contracts_Common_AngleContract(): Promise<AngleContract> {
        let url_ = this.baseUrl + "/StructuralAnalysisContracts/BeamOs.Contracts.Common.AngleContract";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBeamOs_Contracts_Common_AngleContract(_response);
        });
    }

    protected processBeamOs_Contracts_Common_AngleContract(response: Response): Promise<AngleContract> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AngleContract.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AngleContract>(null as any);
    }

    /**
     * @return OK
     */
    beamOs_Contracts_Common_TorqueContract(): Promise<TorqueContract> {
        let url_ = this.baseUrl + "/StructuralAnalysisContracts/BeamOs.Contracts.Common.TorqueContract";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBeamOs_Contracts_Common_TorqueContract(_response);
        });
    }

    protected processBeamOs_Contracts_Common_TorqueContract(response: Response): Promise<TorqueContract> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TorqueContract.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<TorqueContract>(null as any);
    }

    /**
     * @return OK
     */
    beamOs_Contracts_Common_ForcePerLengthContract(): Promise<ForcePerLengthContract> {
        let url_ = this.baseUrl + "/StructuralAnalysisContracts/BeamOs.Contracts.Common.ForcePerLengthContract";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBeamOs_Contracts_Common_ForcePerLengthContract(_response);
        });
    }

    protected processBeamOs_Contracts_Common_ForcePerLengthContract(response: Response): Promise<ForcePerLengthContract> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ForcePerLengthContract.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ForcePerLengthContract>(null as any);
    }

    /**
     * @return OK
     */
    beamOs_Contracts_Common_PressureContract(): Promise<PressureContract> {
        let url_ = this.baseUrl + "/StructuralAnalysisContracts/BeamOs.Contracts.Common.PressureContract";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBeamOs_Contracts_Common_PressureContract(_response);
        });
    }

    protected processBeamOs_Contracts_Common_PressureContract(response: Response): Promise<PressureContract> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PressureContract.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PressureContract>(null as any);
    }

    /**
     * @return OK
     */
    beamOs_Contracts_Common_Vector3(): Promise<Vector3> {
        let url_ = this.baseUrl + "/StructuralAnalysisContracts/BeamOs.Contracts.Common.Vector3";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBeamOs_Contracts_Common_Vector3(_response);
        });
    }

    protected processBeamOs_Contracts_Common_Vector3(response: Response): Promise<Vector3> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Vector3.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Vector3>(null as any);
    }

    /**
     * @return OK
     */
    beamOs_Contracts_AnalyticalModel_DisplacementsResponse(): Promise<DisplacementsResponse> {
        let url_ = this.baseUrl + "/StructuralAnalysisContracts/BeamOs.Contracts.AnalyticalModel.DisplacementsResponse";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBeamOs_Contracts_AnalyticalModel_DisplacementsResponse(_response);
        });
    }

    protected processBeamOs_Contracts_AnalyticalModel_DisplacementsResponse(response: Response): Promise<DisplacementsResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = DisplacementsResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<DisplacementsResponse>(null as any);
    }

    /**
     * @return OK
     */
    beamOs_Contracts_AnalyticalModel_Results_AnalyticalModelResponse(): Promise<AnalyticalModelResponse> {
        let url_ = this.baseUrl + "/StructuralAnalysisContracts/BeamOs.Contracts.AnalyticalModel.Results.AnalyticalModelResponse";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBeamOs_Contracts_AnalyticalModel_Results_AnalyticalModelResponse(_response);
        });
    }

    protected processBeamOs_Contracts_AnalyticalModel_Results_AnalyticalModelResponse(response: Response): Promise<AnalyticalModelResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AnalyticalModelResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AnalyticalModelResponse>(null as any);
    }

    /**
     * @return OK
     */
    beamOs_Contracts_AnalyticalModel_Results_AnalyticalModelResponse2(): Promise<AnalyticalModelResponse2> {
        let url_ = this.baseUrl + "/StructuralAnalysisContracts/BeamOs.Contracts.AnalyticalModel.Results.AnalyticalModelResponse2";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBeamOs_Contracts_AnalyticalModel_Results_AnalyticalModelResponse2(_response);
        });
    }

    protected processBeamOs_Contracts_AnalyticalModel_Results_AnalyticalModelResponse2(response: Response): Promise<AnalyticalModelResponse2> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AnalyticalModelResponse2.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AnalyticalModelResponse2>(null as any);
    }

    /**
     * @return OK
     */
    beamOs_Contracts_AnalyticalModel_Results_AnalyticalModelResponse3(): Promise<AnalyticalModelResponse3> {
        let url_ = this.baseUrl + "/StructuralAnalysisContracts/BeamOs.Contracts.AnalyticalModel.Results.AnalyticalModelResponse3";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBeamOs_Contracts_AnalyticalModel_Results_AnalyticalModelResponse3(_response);
        });
    }

    protected processBeamOs_Contracts_AnalyticalModel_Results_AnalyticalModelResponse3(response: Response): Promise<AnalyticalModelResponse3> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AnalyticalModelResponse3.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AnalyticalModelResponse3>(null as any);
    }

    /**
     * @return OK
     */
    beamOs_Contracts_AnalyticalModel_Results_UnsupportedStructureDisplacementIdResponse(): Promise<UnsupportedStructureDisplacementIdResponse> {
        let url_ = this.baseUrl + "/StructuralAnalysisContracts/BeamOs.Contracts.AnalyticalModel.Results.UnsupportedStructureDisplacementIdResponse";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBeamOs_Contracts_AnalyticalModel_Results_UnsupportedStructureDisplacementIdResponse(_response);
        });
    }

    protected processBeamOs_Contracts_AnalyticalModel_Results_UnsupportedStructureDisplacementIdResponse(response: Response): Promise<UnsupportedStructureDisplacementIdResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UnsupportedStructureDisplacementIdResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<UnsupportedStructureDisplacementIdResponse>(null as any);
    }

    /**
     * @return OK
     */
    beamOs_Contracts_AnalyticalModel_Results_AnalyticalResultsResponse(): Promise<AnalyticalResultsResponse> {
        let url_ = this.baseUrl + "/StructuralAnalysisContracts/BeamOs.Contracts.AnalyticalModel.Results.AnalyticalResultsResponse";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBeamOs_Contracts_AnalyticalModel_Results_AnalyticalResultsResponse(_response);
        });
    }

    protected processBeamOs_Contracts_AnalyticalModel_Results_AnalyticalResultsResponse(response: Response): Promise<AnalyticalResultsResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AnalyticalResultsResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AnalyticalResultsResponse>(null as any);
    }

    /**
     * @return OK
     */
    beamOs_Contracts_AnalyticalModel_Results_RunAnalysisRequest(): Promise<RunAnalysisRequest> {
        let url_ = this.baseUrl + "/StructuralAnalysisContracts/BeamOs.Contracts.AnalyticalModel.Results.RunAnalysisRequest";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBeamOs_Contracts_AnalyticalModel_Results_RunAnalysisRequest(_response);
        });
    }

    protected processBeamOs_Contracts_AnalyticalModel_Results_RunAnalysisRequest(response: Response): Promise<RunAnalysisRequest> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RunAnalysisRequest.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<RunAnalysisRequest>(null as any);
    }

    /**
     * @return OK
     */
    beamOs_Contracts_AnalyticalModel_Results_ModelSettingsRequest(): Promise<ModelSettingsRequest> {
        let url_ = this.baseUrl + "/StructuralAnalysisContracts/BeamOs.Contracts.AnalyticalModel.Results.ModelSettingsRequest";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBeamOs_Contracts_AnalyticalModel_Results_ModelSettingsRequest(_response);
        });
    }

    protected processBeamOs_Contracts_AnalyticalModel_Results_ModelSettingsRequest(response: Response): Promise<ModelSettingsRequest> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ModelSettingsRequest.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ModelSettingsRequest>(null as any);
    }

    /**
     * @return OK
     */
    beamOs_Contracts_AnalyticalModel_Results_UnitSettingsRequest(): Promise<UnitSettingsRequest> {
        let url_ = this.baseUrl + "/StructuralAnalysisContracts/BeamOs.Contracts.AnalyticalModel.Results.UnitSettingsRequest";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBeamOs_Contracts_AnalyticalModel_Results_UnitSettingsRequest(_response);
        });
    }

    protected processBeamOs_Contracts_AnalyticalModel_Results_UnitSettingsRequest(response: Response): Promise<UnitSettingsRequest> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UnitSettingsRequest.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<UnitSettingsRequest>(null as any);
    }

    /**
     * @return OK
     */
    beamOs_Contracts_AnalyticalModel_Forces_ForcesResponse(): Promise<ForcesResponse> {
        let url_ = this.baseUrl + "/StructuralAnalysisContracts/BeamOs.Contracts.AnalyticalModel.Forces.ForcesResponse";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBeamOs_Contracts_AnalyticalModel_Forces_ForcesResponse(_response);
        });
    }

    protected processBeamOs_Contracts_AnalyticalModel_Forces_ForcesResponse(response: Response): Promise<ForcesResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ForcesResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ForcesResponse>(null as any);
    }

    /**
     * @return OK
     */
    beamOs_Contracts_AnalyticalModel_Diagrams_DiagramResponse(): Promise<DiagramResponse> {
        let url_ = this.baseUrl + "/StructuralAnalysisContracts/BeamOs.Contracts.AnalyticalModel.Diagrams.DiagramResponse";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBeamOs_Contracts_AnalyticalModel_Diagrams_DiagramResponse(_response);
        });
    }

    protected processBeamOs_Contracts_AnalyticalModel_Diagrams_DiagramResponse(response: Response): Promise<DiagramResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = DiagramResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<DiagramResponse>(null as any);
    }

    /**
     * @return OK
     */
    beamOs_Contracts_AnalyticalModel_Diagrams_DiagramConsistentIntervalResponse(): Promise<DiagramConsistentIntervalResponse> {
        let url_ = this.baseUrl + "/StructuralAnalysisContracts/BeamOs.Contracts.AnalyticalModel.Diagrams.DiagramConsistentIntervalResponse";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBeamOs_Contracts_AnalyticalModel_Diagrams_DiagramConsistentIntervalResponse(_response);
        });
    }

    protected processBeamOs_Contracts_AnalyticalModel_Diagrams_DiagramConsistentIntervalResponse(response: Response): Promise<DiagramConsistentIntervalResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = DiagramConsistentIntervalResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<DiagramConsistentIntervalResponse>(null as any);
    }

    /**
     * @return OK
     */
    beamOs_Contracts_AnalyticalModel_Diagrams_ShearDiagramResponse(): Promise<ShearDiagramResponse> {
        let url_ = this.baseUrl + "/StructuralAnalysisContracts/BeamOs.Contracts.AnalyticalModel.Diagrams.ShearDiagramResponse";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBeamOs_Contracts_AnalyticalModel_Diagrams_ShearDiagramResponse(_response);
        });
    }

    protected processBeamOs_Contracts_AnalyticalModel_Diagrams_ShearDiagramResponse(response: Response): Promise<ShearDiagramResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ShearDiagramResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ShearDiagramResponse>(null as any);
    }

    /**
     * @return OK
     */
    beamOs_Contracts_AnalyticalModel_Diagrams_MomentDiagramResponse(): Promise<MomentDiagramResponse> {
        let url_ = this.baseUrl + "/StructuralAnalysisContracts/BeamOs.Contracts.AnalyticalModel.Diagrams.MomentDiagramResponse";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBeamOs_Contracts_AnalyticalModel_Diagrams_MomentDiagramResponse(_response);
        });
    }

    protected processBeamOs_Contracts_AnalyticalModel_Diagrams_MomentDiagramResponse(response: Response): Promise<MomentDiagramResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = MomentDiagramResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<MomentDiagramResponse>(null as any);
    }

    /**
     * @return OK
     */
    beamOs_Contracts_AnalyticalModel_AnalyticalNode_NodeResultResponse(): Promise<NodeResultResponse> {
        let url_ = this.baseUrl + "/StructuralAnalysisContracts/BeamOs.Contracts.AnalyticalModel.AnalyticalNode.NodeResultResponse";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBeamOs_Contracts_AnalyticalModel_AnalyticalNode_NodeResultResponse(_response);
        });
    }

    protected processBeamOs_Contracts_AnalyticalModel_AnalyticalNode_NodeResultResponse(response: Response): Promise<NodeResultResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = NodeResultResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<NodeResultResponse>(null as any);
    }
}

export class AnalysisSettingsContract implements IAnalysisSettingsContract {
    element1DAnalysisType!: Element1dAnalysisType;

    constructor(data?: IAnalysisSettingsContract) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.element1DAnalysisType = _data["element1DAnalysisType"];
        }
    }

    static fromJS(data: any): AnalysisSettingsContract {
        data = typeof data === 'object' ? data : {};
        let result = new AnalysisSettingsContract();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["element1DAnalysisType"] = this.element1DAnalysisType;
        return data;
    }
}

export interface IAnalysisSettingsContract {
    element1DAnalysisType: Element1dAnalysisType;
}

export class AnalyticalModelResponse implements IAnalyticalModelResponse {
    degreeOfFreedomIds!: UnsupportedStructureDisplacementIdResponse[];
    boundaryConditionIds!: UnsupportedStructureDisplacementIdResponse[];
    analyticalNodeDisplacements!: number[];
    analyticalNodeReactions!: number[];

    constructor(data?: IAnalyticalModelResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.degreeOfFreedomIds = [];
            this.boundaryConditionIds = [];
            this.analyticalNodeDisplacements = [];
            this.analyticalNodeReactions = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["degreeOfFreedomIds"])) {
                this.degreeOfFreedomIds = [] as any;
                for (let item of _data["degreeOfFreedomIds"])
                    this.degreeOfFreedomIds!.push(UnsupportedStructureDisplacementIdResponse.fromJS(item));
            }
            if (Array.isArray(_data["boundaryConditionIds"])) {
                this.boundaryConditionIds = [] as any;
                for (let item of _data["boundaryConditionIds"])
                    this.boundaryConditionIds!.push(UnsupportedStructureDisplacementIdResponse.fromJS(item));
            }
            if (Array.isArray(_data["analyticalNodeDisplacements"])) {
                this.analyticalNodeDisplacements = [] as any;
                for (let item of _data["analyticalNodeDisplacements"])
                    this.analyticalNodeDisplacements!.push(item);
            }
            if (Array.isArray(_data["analyticalNodeReactions"])) {
                this.analyticalNodeReactions = [] as any;
                for (let item of _data["analyticalNodeReactions"])
                    this.analyticalNodeReactions!.push(item);
            }
        }
    }

    static fromJS(data: any): AnalyticalModelResponse {
        data = typeof data === 'object' ? data : {};
        let result = new AnalyticalModelResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.degreeOfFreedomIds)) {
            data["degreeOfFreedomIds"] = [];
            for (let item of this.degreeOfFreedomIds)
                data["degreeOfFreedomIds"].push(item.toJSON());
        }
        if (Array.isArray(this.boundaryConditionIds)) {
            data["boundaryConditionIds"] = [];
            for (let item of this.boundaryConditionIds)
                data["boundaryConditionIds"].push(item.toJSON());
        }
        if (Array.isArray(this.analyticalNodeDisplacements)) {
            data["analyticalNodeDisplacements"] = [];
            for (let item of this.analyticalNodeDisplacements)
                data["analyticalNodeDisplacements"].push(item);
        }
        if (Array.isArray(this.analyticalNodeReactions)) {
            data["analyticalNodeReactions"] = [];
            for (let item of this.analyticalNodeReactions)
                data["analyticalNodeReactions"].push(item);
        }
        return data;
    }
}

export interface IAnalyticalModelResponse {
    degreeOfFreedomIds: UnsupportedStructureDisplacementIdResponse[];
    boundaryConditionIds: UnsupportedStructureDisplacementIdResponse[];
    analyticalNodeDisplacements: number[];
    analyticalNodeReactions: number[];
}

export class AnalyticalModelResponse2 implements IAnalyticalModelResponse2 {
    degreeOfFreedomIds!: UnsupportedStructureDisplacementIdResponse[];
    boundaryConditionIds!: UnsupportedStructureDisplacementIdResponse[];
    nodeResponses!: NodeResultResponse[];

    constructor(data?: IAnalyticalModelResponse2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.degreeOfFreedomIds = [];
            this.boundaryConditionIds = [];
            this.nodeResponses = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["degreeOfFreedomIds"])) {
                this.degreeOfFreedomIds = [] as any;
                for (let item of _data["degreeOfFreedomIds"])
                    this.degreeOfFreedomIds!.push(UnsupportedStructureDisplacementIdResponse.fromJS(item));
            }
            if (Array.isArray(_data["boundaryConditionIds"])) {
                this.boundaryConditionIds = [] as any;
                for (let item of _data["boundaryConditionIds"])
                    this.boundaryConditionIds!.push(UnsupportedStructureDisplacementIdResponse.fromJS(item));
            }
            if (Array.isArray(_data["nodeResponses"])) {
                this.nodeResponses = [] as any;
                for (let item of _data["nodeResponses"])
                    this.nodeResponses!.push(NodeResultResponse.fromJS(item));
            }
        }
    }

    static fromJS(data: any): AnalyticalModelResponse2 {
        data = typeof data === 'object' ? data : {};
        let result = new AnalyticalModelResponse2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.degreeOfFreedomIds)) {
            data["degreeOfFreedomIds"] = [];
            for (let item of this.degreeOfFreedomIds)
                data["degreeOfFreedomIds"].push(item.toJSON());
        }
        if (Array.isArray(this.boundaryConditionIds)) {
            data["boundaryConditionIds"] = [];
            for (let item of this.boundaryConditionIds)
                data["boundaryConditionIds"].push(item.toJSON());
        }
        if (Array.isArray(this.nodeResponses)) {
            data["nodeResponses"] = [];
            for (let item of this.nodeResponses)
                data["nodeResponses"].push(item.toJSON());
        }
        return data;
    }
}

export interface IAnalyticalModelResponse2 {
    degreeOfFreedomIds: UnsupportedStructureDisplacementIdResponse[];
    boundaryConditionIds: UnsupportedStructureDisplacementIdResponse[];
    nodeResponses: NodeResultResponse[];
}

export class AnalyticalModelResponse3 implements IAnalyticalModelResponse3 {
    nodeResponses!: NodeResultResponse[];

    constructor(data?: IAnalyticalModelResponse3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.nodeResponses = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["nodeResponses"])) {
                this.nodeResponses = [] as any;
                for (let item of _data["nodeResponses"])
                    this.nodeResponses!.push(NodeResultResponse.fromJS(item));
            }
        }
    }

    static fromJS(data: any): AnalyticalModelResponse3 {
        data = typeof data === 'object' ? data : {};
        let result = new AnalyticalModelResponse3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.nodeResponses)) {
            data["nodeResponses"] = [];
            for (let item of this.nodeResponses)
                data["nodeResponses"].push(item.toJSON());
        }
        return data;
    }
}

export interface IAnalyticalModelResponse3 {
    nodeResponses: NodeResultResponse[];
}

export class AnalyticalResultsResponse implements IAnalyticalResultsResponse {
    modelId!: string;
    maxShear!: ForceContract;
    minShear!: ForceContract;
    maxMoment!: TorqueContract;
    minMoment!: TorqueContract;

    constructor(data?: IAnalyticalResultsResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.maxShear = new ForceContract();
            this.minShear = new ForceContract();
            this.maxMoment = new TorqueContract();
            this.minMoment = new TorqueContract();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.modelId = _data["modelId"];
            this.maxShear = _data["maxShear"] ? ForceContract.fromJS(_data["maxShear"]) : new ForceContract();
            this.minShear = _data["minShear"] ? ForceContract.fromJS(_data["minShear"]) : new ForceContract();
            this.maxMoment = _data["maxMoment"] ? TorqueContract.fromJS(_data["maxMoment"]) : new TorqueContract();
            this.minMoment = _data["minMoment"] ? TorqueContract.fromJS(_data["minMoment"]) : new TorqueContract();
        }
    }

    static fromJS(data: any): AnalyticalResultsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new AnalyticalResultsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["modelId"] = this.modelId;
        data["maxShear"] = this.maxShear ? this.maxShear.toJSON() : <any>undefined;
        data["minShear"] = this.minShear ? this.minShear.toJSON() : <any>undefined;
        data["maxMoment"] = this.maxMoment ? this.maxMoment.toJSON() : <any>undefined;
        data["minMoment"] = this.minMoment ? this.minMoment.toJSON() : <any>undefined;
        return data;
    }
}

export interface IAnalyticalResultsResponse {
    modelId: string;
    maxShear: ForceContract;
    minShear: ForceContract;
    maxMoment: TorqueContract;
    minMoment: TorqueContract;
}

export class AngleContract implements IAngleContract {
    value!: number;
    unit!: AngleUnitContract;

    constructor(data?: IAngleContract) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.value = _data["value"];
            this.unit = _data["unit"];
        }
    }

    static fromJS(data: any): AngleContract {
        data = typeof data === 'object' ? data : {};
        let result = new AngleContract();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        data["unit"] = this.unit;
        return data;
    }
}

export interface IAngleContract {
    value: number;
    unit: AngleUnitContract;
}

export enum AngleUnitContract {
    _0 = 0,
    _1 = 1,
    _2 = 2,
}

export class AreaContract implements IAreaContract {
    value!: number;
    unit!: AreaUnitContract;

    constructor(data?: IAreaContract) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.value = _data["value"];
            this.unit = _data["unit"];
        }
    }

    static fromJS(data: any): AreaContract {
        data = typeof data === 'object' ? data : {};
        let result = new AreaContract();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        data["unit"] = this.unit;
        return data;
    }
}

export interface IAreaContract {
    value: number;
    unit: AreaUnitContract;
}

export class AreaMomentOfInertiaContract implements IAreaMomentOfInertiaContract {
    value!: number;
    unit!: AreaMomentOfInertiaUnitContract;

    constructor(data?: IAreaMomentOfInertiaContract) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.value = _data["value"];
            this.unit = _data["unit"];
        }
    }

    static fromJS(data: any): AreaMomentOfInertiaContract {
        data = typeof data === 'object' ? data : {};
        let result = new AreaMomentOfInertiaContract();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        data["unit"] = this.unit;
        return data;
    }
}

export interface IAreaMomentOfInertiaContract {
    value: number;
    unit: AreaMomentOfInertiaUnitContract;
}

export enum AreaMomentOfInertiaUnitContract {
    _0 = 0,
    _1 = 1,
    _2 = 2,
    _3 = 3,
    _4 = 4,
    _5 = 5,
}

export enum AreaUnitContract {
    _0 = 0,
    _1 = 1,
    _2 = 2,
    _3 = 3,
    _4 = 4,
    _5 = 5,
}

export class ClearFilters implements IClearFilters {
    beamOsIds!: string[];
    colorAllOthers!: boolean;

    constructor(data?: IClearFilters) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.beamOsIds = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["beamOsIds"])) {
                this.beamOsIds = [] as any;
                for (let item of _data["beamOsIds"])
                    this.beamOsIds!.push(item);
            }
            this.colorAllOthers = _data["colorAllOthers"];
        }
    }

    static fromJS(data: any): ClearFilters {
        data = typeof data === 'object' ? data : {};
        let result = new ClearFilters();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.beamOsIds)) {
            data["beamOsIds"] = [];
            for (let item of this.beamOsIds)
                data["beamOsIds"].push(item);
        }
        data["colorAllOthers"] = this.colorAllOthers;
        return data;
    }
}

export interface IClearFilters {
    beamOsIds: string[];
    colorAllOthers: boolean;
}

export class CreateElement1dRequest implements ICreateElement1dRequest {
    modelId!: string;
    startNodeId!: string;
    endNodeId!: string;
    materialId!: string;
    sectionProfileId!: string;
    sectionProfileRotation!: AngleContract;
    customData?: { [key: string]: any; } | undefined;

    constructor(data?: ICreateElement1dRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.sectionProfileRotation = new AngleContract();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.modelId = _data["modelId"];
            this.startNodeId = _data["startNodeId"];
            this.endNodeId = _data["endNodeId"];
            this.materialId = _data["materialId"];
            this.sectionProfileId = _data["sectionProfileId"];
            this.sectionProfileRotation = _data["sectionProfileRotation"] ? AngleContract.fromJS(_data["sectionProfileRotation"]) : new AngleContract();
            if (_data["customData"]) {
                this.customData = {} as any;
                for (let key in _data["customData"]) {
                    if (_data["customData"].hasOwnProperty(key))
                        (<any>this.customData)![key] = _data["customData"][key];
                }
            }
        }
    }

    static fromJS(data: any): CreateElement1dRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CreateElement1dRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["modelId"] = this.modelId;
        data["startNodeId"] = this.startNodeId;
        data["endNodeId"] = this.endNodeId;
        data["materialId"] = this.materialId;
        data["sectionProfileId"] = this.sectionProfileId;
        data["sectionProfileRotation"] = this.sectionProfileRotation ? this.sectionProfileRotation.toJSON() : <any>undefined;
        if (this.customData) {
            data["customData"] = {};
            for (let key in this.customData) {
                if (this.customData.hasOwnProperty(key))
                    (<any>data["customData"])[key] = (<any>this.customData)[key];
            }
        }
        return data;
    }
}

export interface ICreateElement1dRequest {
    modelId: string;
    startNodeId: string;
    endNodeId: string;
    materialId: string;
    sectionProfileId: string;
    sectionProfileRotation: AngleContract;
    customData?: { [key: string]: any; } | undefined;
}

export class CreateMaterialRequest implements ICreateMaterialRequest {
    modelId!: string;
    modulusOfElasticity!: PressureContract;
    modulusOfRigidity!: PressureContract;

    constructor(data?: ICreateMaterialRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.modulusOfElasticity = new PressureContract();
            this.modulusOfRigidity = new PressureContract();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.modelId = _data["modelId"];
            this.modulusOfElasticity = _data["modulusOfElasticity"] ? PressureContract.fromJS(_data["modulusOfElasticity"]) : new PressureContract();
            this.modulusOfRigidity = _data["modulusOfRigidity"] ? PressureContract.fromJS(_data["modulusOfRigidity"]) : new PressureContract();
        }
    }

    static fromJS(data: any): CreateMaterialRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CreateMaterialRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["modelId"] = this.modelId;
        data["modulusOfElasticity"] = this.modulusOfElasticity ? this.modulusOfElasticity.toJSON() : <any>undefined;
        data["modulusOfRigidity"] = this.modulusOfRigidity ? this.modulusOfRigidity.toJSON() : <any>undefined;
        return data;
    }
}

export interface ICreateMaterialRequest {
    modelId: string;
    modulusOfElasticity: PressureContract;
    modulusOfRigidity: PressureContract;
}

export class CreateModelRequest implements ICreateModelRequest {
    name!: string;
    description!: string;
    settings!: PhysicalModelSettings;
    id?: string | undefined;

    constructor(data?: ICreateModelRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.settings = new PhysicalModelSettings();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.description = _data["description"];
            this.settings = _data["settings"] ? PhysicalModelSettings.fromJS(_data["settings"]) : new PhysicalModelSettings();
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): CreateModelRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CreateModelRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["description"] = this.description;
        data["settings"] = this.settings ? this.settings.toJSON() : <any>undefined;
        data["id"] = this.id;
        return data;
    }
}

export interface ICreateModelRequest {
    name: string;
    description: string;
    settings: PhysicalModelSettings;
    id?: string | undefined;
}

export class CreateMomentLoadRequest implements ICreateMomentLoadRequest {
    nodeId!: string;
    torque!: TorqueContract;
    axisDirection!: Vector3;

    constructor(data?: ICreateMomentLoadRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.torque = new TorqueContract();
            this.axisDirection = new Vector3();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.nodeId = _data["nodeId"];
            this.torque = _data["torque"] ? TorqueContract.fromJS(_data["torque"]) : new TorqueContract();
            this.axisDirection = _data["axisDirection"] ? Vector3.fromJS(_data["axisDirection"]) : new Vector3();
        }
    }

    static fromJS(data: any): CreateMomentLoadRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CreateMomentLoadRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["nodeId"] = this.nodeId;
        data["torque"] = this.torque ? this.torque.toJSON() : <any>undefined;
        data["axisDirection"] = this.axisDirection ? this.axisDirection.toJSON() : <any>undefined;
        return data;
    }
}

export interface ICreateMomentLoadRequest {
    nodeId: string;
    torque: TorqueContract;
    axisDirection: Vector3;
}

export class CreateNodeRequest implements ICreateNodeRequest {
    modelId!: string;
    locationPoint!: Point;
    restraint!: RestraintContract;
    customData?: { [key: string]: any; } | undefined;

    constructor(data?: ICreateNodeRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.locationPoint = new Point();
            this.restraint = new RestraintContract();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.modelId = _data["modelId"];
            this.locationPoint = _data["locationPoint"] ? Point.fromJS(_data["locationPoint"]) : new Point();
            this.restraint = _data["restraint"] ? RestraintContract.fromJS(_data["restraint"]) : new RestraintContract();
            if (_data["customData"]) {
                this.customData = {} as any;
                for (let key in _data["customData"]) {
                    if (_data["customData"].hasOwnProperty(key))
                        (<any>this.customData)![key] = _data["customData"][key];
                }
            }
        }
    }

    static fromJS(data: any): CreateNodeRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CreateNodeRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["modelId"] = this.modelId;
        data["locationPoint"] = this.locationPoint ? this.locationPoint.toJSON() : <any>undefined;
        data["restraint"] = this.restraint ? this.restraint.toJSON() : <any>undefined;
        if (this.customData) {
            data["customData"] = {};
            for (let key in this.customData) {
                if (this.customData.hasOwnProperty(key))
                    (<any>data["customData"])[key] = (<any>this.customData)[key];
            }
        }
        return data;
    }
}

export interface ICreateNodeRequest {
    modelId: string;
    locationPoint: Point;
    restraint: RestraintContract;
    customData?: { [key: string]: any; } | undefined;
}

export class CreatePointLoadRequest implements ICreatePointLoadRequest {
    nodeId!: string;
    force!: ForceContract;
    direction!: Vector3;

    constructor(data?: ICreatePointLoadRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.force = new ForceContract();
            this.direction = new Vector3();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.nodeId = _data["nodeId"];
            this.force = _data["force"] ? ForceContract.fromJS(_data["force"]) : new ForceContract();
            this.direction = _data["direction"] ? Vector3.fromJS(_data["direction"]) : new Vector3();
        }
    }

    static fromJS(data: any): CreatePointLoadRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CreatePointLoadRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["nodeId"] = this.nodeId;
        data["force"] = this.force ? this.force.toJSON() : <any>undefined;
        data["direction"] = this.direction ? this.direction.toJSON() : <any>undefined;
        return data;
    }
}

export interface ICreatePointLoadRequest {
    nodeId: string;
    force: ForceContract;
    direction: Vector3;
}

export class CreateSectionProfileRequest implements ICreateSectionProfileRequest {
    modelId!: string;
    area!: AreaContract;
    strongAxisMomentOfInertia!: AreaMomentOfInertiaContract;
    weakAxisMomentOfInertia!: AreaMomentOfInertiaContract;
    polarMomentOfInertia!: AreaMomentOfInertiaContract;
    strongAxisShearArea!: AreaContract;
    weakAxisShearArea!: AreaContract;

    constructor(data?: ICreateSectionProfileRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.area = new AreaContract();
            this.strongAxisMomentOfInertia = new AreaMomentOfInertiaContract();
            this.weakAxisMomentOfInertia = new AreaMomentOfInertiaContract();
            this.polarMomentOfInertia = new AreaMomentOfInertiaContract();
            this.strongAxisShearArea = new AreaContract();
            this.weakAxisShearArea = new AreaContract();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.modelId = _data["modelId"];
            this.area = _data["area"] ? AreaContract.fromJS(_data["area"]) : new AreaContract();
            this.strongAxisMomentOfInertia = _data["strongAxisMomentOfInertia"] ? AreaMomentOfInertiaContract.fromJS(_data["strongAxisMomentOfInertia"]) : new AreaMomentOfInertiaContract();
            this.weakAxisMomentOfInertia = _data["weakAxisMomentOfInertia"] ? AreaMomentOfInertiaContract.fromJS(_data["weakAxisMomentOfInertia"]) : new AreaMomentOfInertiaContract();
            this.polarMomentOfInertia = _data["polarMomentOfInertia"] ? AreaMomentOfInertiaContract.fromJS(_data["polarMomentOfInertia"]) : new AreaMomentOfInertiaContract();
            this.strongAxisShearArea = _data["strongAxisShearArea"] ? AreaContract.fromJS(_data["strongAxisShearArea"]) : new AreaContract();
            this.weakAxisShearArea = _data["weakAxisShearArea"] ? AreaContract.fromJS(_data["weakAxisShearArea"]) : new AreaContract();
        }
    }

    static fromJS(data: any): CreateSectionProfileRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CreateSectionProfileRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["modelId"] = this.modelId;
        data["area"] = this.area ? this.area.toJSON() : <any>undefined;
        data["strongAxisMomentOfInertia"] = this.strongAxisMomentOfInertia ? this.strongAxisMomentOfInertia.toJSON() : <any>undefined;
        data["weakAxisMomentOfInertia"] = this.weakAxisMomentOfInertia ? this.weakAxisMomentOfInertia.toJSON() : <any>undefined;
        data["polarMomentOfInertia"] = this.polarMomentOfInertia ? this.polarMomentOfInertia.toJSON() : <any>undefined;
        data["strongAxisShearArea"] = this.strongAxisShearArea ? this.strongAxisShearArea.toJSON() : <any>undefined;
        data["weakAxisShearArea"] = this.weakAxisShearArea ? this.weakAxisShearArea.toJSON() : <any>undefined;
        return data;
    }
}

export interface ICreateSectionProfileRequest {
    modelId: string;
    area: AreaContract;
    strongAxisMomentOfInertia: AreaMomentOfInertiaContract;
    weakAxisMomentOfInertia: AreaMomentOfInertiaContract;
    polarMomentOfInertia: AreaMomentOfInertiaContract;
    strongAxisShearArea: AreaContract;
    weakAxisShearArea: AreaContract;
}

export class DiagramConsistentIntervalResponse implements IDiagramConsistentIntervalResponse {
    startLocation!: LengthContract;
    endLocation!: LengthContract;
    polynomialCoefficients!: number[];

    constructor(data?: IDiagramConsistentIntervalResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.startLocation = new LengthContract();
            this.endLocation = new LengthContract();
            this.polynomialCoefficients = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.startLocation = _data["startLocation"] ? LengthContract.fromJS(_data["startLocation"]) : new LengthContract();
            this.endLocation = _data["endLocation"] ? LengthContract.fromJS(_data["endLocation"]) : new LengthContract();
            if (Array.isArray(_data["polynomialCoefficients"])) {
                this.polynomialCoefficients = [] as any;
                for (let item of _data["polynomialCoefficients"])
                    this.polynomialCoefficients!.push(item);
            }
        }
    }

    static fromJS(data: any): DiagramConsistentIntervalResponse {
        data = typeof data === 'object' ? data : {};
        let result = new DiagramConsistentIntervalResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["startLocation"] = this.startLocation ? this.startLocation.toJSON() : <any>undefined;
        data["endLocation"] = this.endLocation ? this.endLocation.toJSON() : <any>undefined;
        if (Array.isArray(this.polynomialCoefficients)) {
            data["polynomialCoefficients"] = [];
            for (let item of this.polynomialCoefficients)
                data["polynomialCoefficients"].push(item);
        }
        return data;
    }
}

export interface IDiagramConsistentIntervalResponse {
    startLocation: LengthContract;
    endLocation: LengthContract;
    polynomialCoefficients: number[];
}

export class DiagramResponse implements IDiagramResponse {
    id!: string;
    element1DId!: string;
    lengthUnit!: string;
    diagramValueUnit!: string;
    elementLength!: LengthContract;
    intervals!: DiagramConsistentIntervalResponse[];

    constructor(data?: IDiagramResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.elementLength = new LengthContract();
            this.intervals = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.element1DId = _data["element1DId"];
            this.lengthUnit = _data["lengthUnit"];
            this.diagramValueUnit = _data["diagramValueUnit"];
            this.elementLength = _data["elementLength"] ? LengthContract.fromJS(_data["elementLength"]) : new LengthContract();
            if (Array.isArray(_data["intervals"])) {
                this.intervals = [] as any;
                for (let item of _data["intervals"])
                    this.intervals!.push(DiagramConsistentIntervalResponse.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DiagramResponse {
        data = typeof data === 'object' ? data : {};
        let result = new DiagramResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["element1DId"] = this.element1DId;
        data["lengthUnit"] = this.lengthUnit;
        data["diagramValueUnit"] = this.diagramValueUnit;
        data["elementLength"] = this.elementLength ? this.elementLength.toJSON() : <any>undefined;
        if (Array.isArray(this.intervals)) {
            data["intervals"] = [];
            for (let item of this.intervals)
                data["intervals"].push(item.toJSON());
        }
        return data;
    }
}

export interface IDiagramResponse {
    id: string;
    element1DId: string;
    lengthUnit: string;
    diagramValueUnit: string;
    elementLength: LengthContract;
    intervals: DiagramConsistentIntervalResponse[];
}

export class DisplacementsResponse implements IDisplacementsResponse {
    displacementAlongX!: LengthContract;
    displacementAlongY!: LengthContract;
    displacementAlongZ!: LengthContract;
    rotationAboutX!: AngleContract;
    rotationAboutY!: AngleContract;
    rotationAboutZ!: AngleContract;

    constructor(data?: IDisplacementsResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.displacementAlongX = new LengthContract();
            this.displacementAlongY = new LengthContract();
            this.displacementAlongZ = new LengthContract();
            this.rotationAboutX = new AngleContract();
            this.rotationAboutY = new AngleContract();
            this.rotationAboutZ = new AngleContract();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.displacementAlongX = _data["displacementAlongX"] ? LengthContract.fromJS(_data["displacementAlongX"]) : new LengthContract();
            this.displacementAlongY = _data["displacementAlongY"] ? LengthContract.fromJS(_data["displacementAlongY"]) : new LengthContract();
            this.displacementAlongZ = _data["displacementAlongZ"] ? LengthContract.fromJS(_data["displacementAlongZ"]) : new LengthContract();
            this.rotationAboutX = _data["rotationAboutX"] ? AngleContract.fromJS(_data["rotationAboutX"]) : new AngleContract();
            this.rotationAboutY = _data["rotationAboutY"] ? AngleContract.fromJS(_data["rotationAboutY"]) : new AngleContract();
            this.rotationAboutZ = _data["rotationAboutZ"] ? AngleContract.fromJS(_data["rotationAboutZ"]) : new AngleContract();
        }
    }

    static fromJS(data: any): DisplacementsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new DisplacementsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["displacementAlongX"] = this.displacementAlongX ? this.displacementAlongX.toJSON() : <any>undefined;
        data["displacementAlongY"] = this.displacementAlongY ? this.displacementAlongY.toJSON() : <any>undefined;
        data["displacementAlongZ"] = this.displacementAlongZ ? this.displacementAlongZ.toJSON() : <any>undefined;
        data["rotationAboutX"] = this.rotationAboutX ? this.rotationAboutX.toJSON() : <any>undefined;
        data["rotationAboutY"] = this.rotationAboutY ? this.rotationAboutY.toJSON() : <any>undefined;
        data["rotationAboutZ"] = this.rotationAboutZ ? this.rotationAboutZ.toJSON() : <any>undefined;
        return data;
    }
}

export interface IDisplacementsResponse {
    displacementAlongX: LengthContract;
    displacementAlongY: LengthContract;
    displacementAlongZ: LengthContract;
    rotationAboutX: AngleContract;
    rotationAboutY: AngleContract;
    rotationAboutZ: AngleContract;
}

export class Element1DResponse implements IElement1DResponse {
    id!: string;
    modelId!: string;
    startNodeId!: string;
    endNodeId!: string;
    materialId!: string;
    sectionProfileId!: string;
    sectionProfileRotation!: AngleContract;
    customData?: { [key: string]: any; } | undefined;

    constructor(data?: IElement1DResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.sectionProfileRotation = new AngleContract();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.modelId = _data["modelId"];
            this.startNodeId = _data["startNodeId"];
            this.endNodeId = _data["endNodeId"];
            this.materialId = _data["materialId"];
            this.sectionProfileId = _data["sectionProfileId"];
            this.sectionProfileRotation = _data["sectionProfileRotation"] ? AngleContract.fromJS(_data["sectionProfileRotation"]) : new AngleContract();
            if (_data["customData"]) {
                this.customData = {} as any;
                for (let key in _data["customData"]) {
                    if (_data["customData"].hasOwnProperty(key))
                        (<any>this.customData)![key] = _data["customData"][key];
                }
            }
        }
    }

    static fromJS(data: any): Element1DResponse {
        data = typeof data === 'object' ? data : {};
        let result = new Element1DResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["modelId"] = this.modelId;
        data["startNodeId"] = this.startNodeId;
        data["endNodeId"] = this.endNodeId;
        data["materialId"] = this.materialId;
        data["sectionProfileId"] = this.sectionProfileId;
        data["sectionProfileRotation"] = this.sectionProfileRotation ? this.sectionProfileRotation.toJSON() : <any>undefined;
        if (this.customData) {
            data["customData"] = {};
            for (let key in this.customData) {
                if (this.customData.hasOwnProperty(key))
                    (<any>data["customData"])[key] = (<any>this.customData)[key];
            }
        }
        return data;
    }
}

export interface IElement1DResponse {
    id: string;
    modelId: string;
    startNodeId: string;
    endNodeId: string;
    materialId: string;
    sectionProfileId: string;
    sectionProfileRotation: AngleContract;
    customData?: { [key: string]: any; } | undefined;
}

export enum Element1dAnalysisType {
    _0 = 0,
    _1 = 1,
    _2 = 2,
}

export class EmptyRequest implements IEmptyRequest {

    constructor(data?: IEmptyRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): EmptyRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EmptyRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IEmptyRequest {
}

export class ForceContract implements IForceContract {
    value!: number;
    unit!: ForceUnitContract;

    constructor(data?: IForceContract) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.value = _data["value"];
            this.unit = _data["unit"];
        }
    }

    static fromJS(data: any): ForceContract {
        data = typeof data === 'object' ? data : {};
        let result = new ForceContract();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        data["unit"] = this.unit;
        return data;
    }
}

export interface IForceContract {
    value: number;
    unit: ForceUnitContract;
}

export class ForcePerLengthContract implements IForcePerLengthContract {
    value!: number;
    unit!: ForcePerLengthUnitContract;

    constructor(data?: IForcePerLengthContract) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.value = _data["value"];
            this.unit = _data["unit"];
        }
    }

    static fromJS(data: any): ForcePerLengthContract {
        data = typeof data === 'object' ? data : {};
        let result = new ForcePerLengthContract();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        data["unit"] = this.unit;
        return data;
    }
}

export interface IForcePerLengthContract {
    value: number;
    unit: ForcePerLengthUnitContract;
}

export enum ForcePerLengthUnitContract {
    _0 = 0,
    _7 = 7,
    _8 = 8,
    _9 = 9,
    _10 = 10,
    _11 = 11,
    _17 = 17,
    _18 = 18,
    _19 = 19,
    _21 = 21,
    _22 = 22,
}

export enum ForceUnitContract {
    _0 = 0,
    _1 = 1,
    _2 = 2,
    _3 = 3,
    _4 = 4,
}

export class ForcesResponse implements IForcesResponse {
    forceAlongX!: ForceContract;
    forceAlongY!: ForceContract;
    forceAlongZ!: ForceContract;
    momentAboutX!: TorqueContract;
    momentAboutY!: TorqueContract;
    momentAboutZ!: TorqueContract;

    constructor(data?: IForcesResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.forceAlongX = new ForceContract();
            this.forceAlongY = new ForceContract();
            this.forceAlongZ = new ForceContract();
            this.momentAboutX = new TorqueContract();
            this.momentAboutY = new TorqueContract();
            this.momentAboutZ = new TorqueContract();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.forceAlongX = _data["forceAlongX"] ? ForceContract.fromJS(_data["forceAlongX"]) : new ForceContract();
            this.forceAlongY = _data["forceAlongY"] ? ForceContract.fromJS(_data["forceAlongY"]) : new ForceContract();
            this.forceAlongZ = _data["forceAlongZ"] ? ForceContract.fromJS(_data["forceAlongZ"]) : new ForceContract();
            this.momentAboutX = _data["momentAboutX"] ? TorqueContract.fromJS(_data["momentAboutX"]) : new TorqueContract();
            this.momentAboutY = _data["momentAboutY"] ? TorqueContract.fromJS(_data["momentAboutY"]) : new TorqueContract();
            this.momentAboutZ = _data["momentAboutZ"] ? TorqueContract.fromJS(_data["momentAboutZ"]) : new TorqueContract();
        }
    }

    static fromJS(data: any): ForcesResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ForcesResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["forceAlongX"] = this.forceAlongX ? this.forceAlongX.toJSON() : <any>undefined;
        data["forceAlongY"] = this.forceAlongY ? this.forceAlongY.toJSON() : <any>undefined;
        data["forceAlongZ"] = this.forceAlongZ ? this.forceAlongZ.toJSON() : <any>undefined;
        data["momentAboutX"] = this.momentAboutX ? this.momentAboutX.toJSON() : <any>undefined;
        data["momentAboutY"] = this.momentAboutY ? this.momentAboutY.toJSON() : <any>undefined;
        data["momentAboutZ"] = this.momentAboutZ ? this.momentAboutZ.toJSON() : <any>undefined;
        return data;
    }
}

export interface IForcesResponse {
    forceAlongX: ForceContract;
    forceAlongY: ForceContract;
    forceAlongZ: ForceContract;
    momentAboutX: TorqueContract;
    momentAboutY: TorqueContract;
    momentAboutZ: TorqueContract;
}

export class GetElement1dsRequest implements IGetElement1dsRequest {
    modelId!: string;
    element1dIds?: string[] | undefined;

    constructor(data?: IGetElement1dsRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.modelId = _data["modelId"];
            if (Array.isArray(_data["element1dIds"])) {
                this.element1dIds = [] as any;
                for (let item of _data["element1dIds"])
                    this.element1dIds!.push(item);
            }
        }
    }

    static fromJS(data: any): GetElement1dsRequest {
        data = typeof data === 'object' ? data : {};
        let result = new GetElement1dsRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["modelId"] = this.modelId;
        if (Array.isArray(this.element1dIds)) {
            data["element1dIds"] = [];
            for (let item of this.element1dIds)
                data["element1dIds"].push(item);
        }
        return data;
    }
}

export interface IGetElement1dsRequest {
    modelId: string;
    element1dIds?: string[] | undefined;
}

export class GetElementsInModelRequest implements IGetElementsInModelRequest {
    modelId!: string;
    childIds?: string[] | undefined;

    constructor(data?: IGetElementsInModelRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.modelId = _data["modelId"];
            if (Array.isArray(_data["childIds"])) {
                this.childIds = [] as any;
                for (let item of _data["childIds"])
                    this.childIds!.push(item);
            }
        }
    }

    static fromJS(data: any): GetElementsInModelRequest {
        data = typeof data === 'object' ? data : {};
        let result = new GetElementsInModelRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["modelId"] = this.modelId;
        if (Array.isArray(this.childIds)) {
            data["childIds"] = [];
            for (let item of this.childIds)
                data["childIds"].push(item);
        }
        return data;
    }
}

export interface IGetElementsInModelRequest {
    modelId: string;
    childIds?: string[] | undefined;
}

export class GetMomentLoadRequest implements IGetMomentLoadRequest {
    modelId!: string;
    momentLoadIds?: string[] | undefined;

    constructor(data?: IGetMomentLoadRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.modelId = _data["modelId"];
            if (Array.isArray(_data["momentLoadIds"])) {
                this.momentLoadIds = [] as any;
                for (let item of _data["momentLoadIds"])
                    this.momentLoadIds!.push(item);
            }
        }
    }

    static fromJS(data: any): GetMomentLoadRequest {
        data = typeof data === 'object' ? data : {};
        let result = new GetMomentLoadRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["modelId"] = this.modelId;
        if (Array.isArray(this.momentLoadIds)) {
            data["momentLoadIds"] = [];
            for (let item of this.momentLoadIds)
                data["momentLoadIds"].push(item);
        }
        return data;
    }
}

export interface IGetMomentLoadRequest {
    modelId: string;
    momentLoadIds?: string[] | undefined;
}

export class GetNodeResultsRequest implements IGetNodeResultsRequest {
    modelId!: string;
    nodeIds?: string[] | undefined;

    constructor(data?: IGetNodeResultsRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.modelId = _data["modelId"];
            if (Array.isArray(_data["nodeIds"])) {
                this.nodeIds = [] as any;
                for (let item of _data["nodeIds"])
                    this.nodeIds!.push(item);
            }
        }
    }

    static fromJS(data: any): GetNodeResultsRequest {
        data = typeof data === 'object' ? data : {};
        let result = new GetNodeResultsRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["modelId"] = this.modelId;
        if (Array.isArray(this.nodeIds)) {
            data["nodeIds"] = [];
            for (let item of this.nodeIds)
                data["nodeIds"].push(item);
        }
        return data;
    }
}

export interface IGetNodeResultsRequest {
    modelId: string;
    nodeIds?: string[] | undefined;
}

export class IdRequest implements IIdRequest {
    id!: string;

    constructor(data?: IIdRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): IdRequest {
        data = typeof data === 'object' ? data : {};
        let result = new IdRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data;
    }
}

export interface IIdRequest {
    id: string;
}

export class IdRequestWithProperties implements IIdRequestWithProperties {
    id!: string;
    properties?: string[] | undefined;

    constructor(data?: IIdRequestWithProperties) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            if (Array.isArray(_data["properties"])) {
                this.properties = [] as any;
                for (let item of _data["properties"])
                    this.properties!.push(item);
            }
        }
    }

    static fromJS(data: any): IdRequestWithProperties {
        data = typeof data === 'object' ? data : {};
        let result = new IdRequestWithProperties();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        if (Array.isArray(this.properties)) {
            data["properties"] = [];
            for (let item of this.properties)
                data["properties"].push(item);
        }
        return data;
    }
}

export interface IIdRequestWithProperties {
    id: string;
    properties?: string[] | undefined;
}

export class LengthContract implements ILengthContract {
    value!: number;
    unit!: LengthUnitContract;

    constructor(data?: ILengthContract) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.value = _data["value"];
            this.unit = _data["unit"];
        }
    }

    static fromJS(data: any): LengthContract {
        data = typeof data === 'object' ? data : {};
        let result = new LengthContract();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        data["unit"] = this.unit;
        return data;
    }
}

export interface ILengthContract {
    value: number;
    unit: LengthUnitContract;
}

export enum LengthUnitContract {
    _0 = 0,
    _1 = 1,
    _2 = 2,
    _3 = 3,
    _4 = 4,
    _5 = 5,
}

export class MaterialResponse implements IMaterialResponse {
    id!: string;
    modelId!: string;
    modulusOfElasticity!: PressureContract;
    modulusOfRigidity!: PressureContract;

    constructor(data?: IMaterialResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.modulusOfElasticity = new PressureContract();
            this.modulusOfRigidity = new PressureContract();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.modelId = _data["modelId"];
            this.modulusOfElasticity = _data["modulusOfElasticity"] ? PressureContract.fromJS(_data["modulusOfElasticity"]) : new PressureContract();
            this.modulusOfRigidity = _data["modulusOfRigidity"] ? PressureContract.fromJS(_data["modulusOfRigidity"]) : new PressureContract();
        }
    }

    static fromJS(data: any): MaterialResponse {
        data = typeof data === 'object' ? data : {};
        let result = new MaterialResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["modelId"] = this.modelId;
        data["modulusOfElasticity"] = this.modulusOfElasticity ? this.modulusOfElasticity.toJSON() : <any>undefined;
        data["modulusOfRigidity"] = this.modulusOfRigidity ? this.modulusOfRigidity.toJSON() : <any>undefined;
        return data;
    }
}

export interface IMaterialResponse {
    id: string;
    modelId: string;
    modulusOfElasticity: PressureContract;
    modulusOfRigidity: PressureContract;
}

export class ModelIdRequest implements IModelIdRequest {
    modelId!: string;

    constructor(data?: IModelIdRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.modelId = _data["modelId"];
        }
    }

    static fromJS(data: any): ModelIdRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ModelIdRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["modelId"] = this.modelId;
        return data;
    }
}

export interface IModelIdRequest {
    modelId: string;
}

export class ModelIdRequestWithProperties implements IModelIdRequestWithProperties {
    modelId!: string;
    properties?: string[] | undefined;

    constructor(data?: IModelIdRequestWithProperties) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.modelId = _data["modelId"];
            if (Array.isArray(_data["properties"])) {
                this.properties = [] as any;
                for (let item of _data["properties"])
                    this.properties!.push(item);
            }
        }
    }

    static fromJS(data: any): ModelIdRequestWithProperties {
        data = typeof data === 'object' ? data : {};
        let result = new ModelIdRequestWithProperties();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["modelId"] = this.modelId;
        if (Array.isArray(this.properties)) {
            data["properties"] = [];
            for (let item of this.properties)
                data["properties"].push(item);
        }
        return data;
    }
}

export interface IModelIdRequestWithProperties {
    modelId: string;
    properties?: string[] | undefined;
}

export class ModelResponse implements IModelResponse {
    id!: string;
    name!: string;
    description!: string;
    settings!: PhysicalModelSettings;
    nodes?: NodeResponse[] | undefined;
    element1ds?: Element1DResponse[] | undefined;
    materials?: MaterialResponse[] | undefined;
    sectionProfiles?: SectionProfileResponse[] | undefined;
    pointLoads?: PointLoadResponse[] | undefined;
    momentLoads?: MomentLoadResponse[] | undefined;
    analyticalResults!: AnalyticalResultsResponse;

    constructor(data?: IModelResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.settings = new PhysicalModelSettings();
            this.analyticalResults = new AnalyticalResultsResponse();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.description = _data["description"];
            this.settings = _data["settings"] ? PhysicalModelSettings.fromJS(_data["settings"]) : new PhysicalModelSettings();
            if (Array.isArray(_data["nodes"])) {
                this.nodes = [] as any;
                for (let item of _data["nodes"])
                    this.nodes!.push(NodeResponse.fromJS(item));
            }
            if (Array.isArray(_data["element1ds"])) {
                this.element1ds = [] as any;
                for (let item of _data["element1ds"])
                    this.element1ds!.push(Element1DResponse.fromJS(item));
            }
            if (Array.isArray(_data["materials"])) {
                this.materials = [] as any;
                for (let item of _data["materials"])
                    this.materials!.push(MaterialResponse.fromJS(item));
            }
            if (Array.isArray(_data["sectionProfiles"])) {
                this.sectionProfiles = [] as any;
                for (let item of _data["sectionProfiles"])
                    this.sectionProfiles!.push(SectionProfileResponse.fromJS(item));
            }
            if (Array.isArray(_data["pointLoads"])) {
                this.pointLoads = [] as any;
                for (let item of _data["pointLoads"])
                    this.pointLoads!.push(PointLoadResponse.fromJS(item));
            }
            if (Array.isArray(_data["momentLoads"])) {
                this.momentLoads = [] as any;
                for (let item of _data["momentLoads"])
                    this.momentLoads!.push(MomentLoadResponse.fromJS(item));
            }
            this.analyticalResults = _data["analyticalResults"] ? AnalyticalResultsResponse.fromJS(_data["analyticalResults"]) : new AnalyticalResultsResponse();
        }
    }

    static fromJS(data: any): ModelResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ModelResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["description"] = this.description;
        data["settings"] = this.settings ? this.settings.toJSON() : <any>undefined;
        if (Array.isArray(this.nodes)) {
            data["nodes"] = [];
            for (let item of this.nodes)
                data["nodes"].push(item.toJSON());
        }
        if (Array.isArray(this.element1ds)) {
            data["element1ds"] = [];
            for (let item of this.element1ds)
                data["element1ds"].push(item.toJSON());
        }
        if (Array.isArray(this.materials)) {
            data["materials"] = [];
            for (let item of this.materials)
                data["materials"].push(item.toJSON());
        }
        if (Array.isArray(this.sectionProfiles)) {
            data["sectionProfiles"] = [];
            for (let item of this.sectionProfiles)
                data["sectionProfiles"].push(item.toJSON());
        }
        if (Array.isArray(this.pointLoads)) {
            data["pointLoads"] = [];
            for (let item of this.pointLoads)
                data["pointLoads"].push(item.toJSON());
        }
        if (Array.isArray(this.momentLoads)) {
            data["momentLoads"] = [];
            for (let item of this.momentLoads)
                data["momentLoads"].push(item.toJSON());
        }
        data["analyticalResults"] = this.analyticalResults ? this.analyticalResults.toJSON() : <any>undefined;
        return data;
    }
}

export interface IModelResponse {
    id: string;
    name: string;
    description: string;
    settings: PhysicalModelSettings;
    nodes?: NodeResponse[] | undefined;
    element1ds?: Element1DResponse[] | undefined;
    materials?: MaterialResponse[] | undefined;
    sectionProfiles?: SectionProfileResponse[] | undefined;
    pointLoads?: PointLoadResponse[] | undefined;
    momentLoads?: MomentLoadResponse[] | undefined;
    analyticalResults: AnalyticalResultsResponse;
}

export class ModelResponseHydrated implements IModelResponseHydrated {
    id!: string;
    name!: string;
    description!: string;
    settings!: ModelSettingsResponse;
    nodes!: NodeResponse[];
    element1Ds!: Element1DResponse[];
    materials!: MaterialResponse[];
    sectionProfiles!: SectionProfileResponse[];
    pointLoads!: PointLoadResponse[];
    momentLoads!: MomentLoadResponse[];

    constructor(data?: IModelResponseHydrated) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.settings = new ModelSettingsResponse();
            this.nodes = [];
            this.element1Ds = [];
            this.materials = [];
            this.sectionProfiles = [];
            this.pointLoads = [];
            this.momentLoads = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.description = _data["description"];
            this.settings = _data["settings"] ? ModelSettingsResponse.fromJS(_data["settings"]) : new ModelSettingsResponse();
            if (Array.isArray(_data["nodes"])) {
                this.nodes = [] as any;
                for (let item of _data["nodes"])
                    this.nodes!.push(NodeResponse.fromJS(item));
            }
            if (Array.isArray(_data["element1Ds"])) {
                this.element1Ds = [] as any;
                for (let item of _data["element1Ds"])
                    this.element1Ds!.push(Element1DResponse.fromJS(item));
            }
            if (Array.isArray(_data["materials"])) {
                this.materials = [] as any;
                for (let item of _data["materials"])
                    this.materials!.push(MaterialResponse.fromJS(item));
            }
            if (Array.isArray(_data["sectionProfiles"])) {
                this.sectionProfiles = [] as any;
                for (let item of _data["sectionProfiles"])
                    this.sectionProfiles!.push(SectionProfileResponse.fromJS(item));
            }
            if (Array.isArray(_data["pointLoads"])) {
                this.pointLoads = [] as any;
                for (let item of _data["pointLoads"])
                    this.pointLoads!.push(PointLoadResponse.fromJS(item));
            }
            if (Array.isArray(_data["momentLoads"])) {
                this.momentLoads = [] as any;
                for (let item of _data["momentLoads"])
                    this.momentLoads!.push(MomentLoadResponse.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ModelResponseHydrated {
        data = typeof data === 'object' ? data : {};
        let result = new ModelResponseHydrated();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["description"] = this.description;
        data["settings"] = this.settings ? this.settings.toJSON() : <any>undefined;
        if (Array.isArray(this.nodes)) {
            data["nodes"] = [];
            for (let item of this.nodes)
                data["nodes"].push(item.toJSON());
        }
        if (Array.isArray(this.element1Ds)) {
            data["element1Ds"] = [];
            for (let item of this.element1Ds)
                data["element1Ds"].push(item.toJSON());
        }
        if (Array.isArray(this.materials)) {
            data["materials"] = [];
            for (let item of this.materials)
                data["materials"].push(item.toJSON());
        }
        if (Array.isArray(this.sectionProfiles)) {
            data["sectionProfiles"] = [];
            for (let item of this.sectionProfiles)
                data["sectionProfiles"].push(item.toJSON());
        }
        if (Array.isArray(this.pointLoads)) {
            data["pointLoads"] = [];
            for (let item of this.pointLoads)
                data["pointLoads"].push(item.toJSON());
        }
        if (Array.isArray(this.momentLoads)) {
            data["momentLoads"] = [];
            for (let item of this.momentLoads)
                data["momentLoads"].push(item.toJSON());
        }
        return data;
    }
}

export interface IModelResponseHydrated {
    id: string;
    name: string;
    description: string;
    settings: ModelSettingsResponse;
    nodes: NodeResponse[];
    element1Ds: Element1DResponse[];
    materials: MaterialResponse[];
    sectionProfiles: SectionProfileResponse[];
    pointLoads: PointLoadResponse[];
    momentLoads: MomentLoadResponse[];
}

export class ModelSettingsRequest implements IModelSettingsRequest {
    unitSettings!: UnitSettingsRequest;

    constructor(data?: IModelSettingsRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.unitSettings = new UnitSettingsRequest();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.unitSettings = _data["unitSettings"] ? UnitSettingsRequest.fromJS(_data["unitSettings"]) : new UnitSettingsRequest();
        }
    }

    static fromJS(data: any): ModelSettingsRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ModelSettingsRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["unitSettings"] = this.unitSettings ? this.unitSettings.toJSON() : <any>undefined;
        return data;
    }
}

export interface IModelSettingsRequest {
    unitSettings: UnitSettingsRequest;
}

export class ModelSettingsResponse implements IModelSettingsResponse {
    unitSettings!: UnitSettingsResponse;

    constructor(data?: IModelSettingsResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.unitSettings = new UnitSettingsResponse();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.unitSettings = _data["unitSettings"] ? UnitSettingsResponse.fromJS(_data["unitSettings"]) : new UnitSettingsResponse();
        }
    }

    static fromJS(data: any): ModelSettingsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ModelSettingsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["unitSettings"] = this.unitSettings ? this.unitSettings.toJSON() : <any>undefined;
        return data;
    }
}

export interface IModelSettingsResponse {
    unitSettings: UnitSettingsResponse;
}

export class MomentDiagramResponse implements IMomentDiagramResponse {
    id!: string;
    element1DId!: string;
    lengthUnit!: string;
    forceUnit!: string;
    elementLength!: LengthContract;
    intervals!: DiagramConsistentIntervalResponse[];

    constructor(data?: IMomentDiagramResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.elementLength = new LengthContract();
            this.intervals = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.element1DId = _data["element1DId"];
            this.lengthUnit = _data["lengthUnit"];
            this.forceUnit = _data["forceUnit"];
            this.elementLength = _data["elementLength"] ? LengthContract.fromJS(_data["elementLength"]) : new LengthContract();
            if (Array.isArray(_data["intervals"])) {
                this.intervals = [] as any;
                for (let item of _data["intervals"])
                    this.intervals!.push(DiagramConsistentIntervalResponse.fromJS(item));
            }
        }
    }

    static fromJS(data: any): MomentDiagramResponse {
        data = typeof data === 'object' ? data : {};
        let result = new MomentDiagramResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["element1DId"] = this.element1DId;
        data["lengthUnit"] = this.lengthUnit;
        data["forceUnit"] = this.forceUnit;
        data["elementLength"] = this.elementLength ? this.elementLength.toJSON() : <any>undefined;
        if (Array.isArray(this.intervals)) {
            data["intervals"] = [];
            for (let item of this.intervals)
                data["intervals"].push(item.toJSON());
        }
        return data;
    }
}

export interface IMomentDiagramResponse {
    id: string;
    element1DId: string;
    lengthUnit: string;
    forceUnit: string;
    elementLength: LengthContract;
    intervals: DiagramConsistentIntervalResponse[];
}

export class MomentLoadResponse implements IMomentLoadResponse {
    id!: string;
    modelId!: string;
    nodeId!: string;
    torque!: TorqueContract;
    axisDirection!: Vector3;

    constructor(data?: IMomentLoadResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.torque = new TorqueContract();
            this.axisDirection = new Vector3();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.modelId = _data["modelId"];
            this.nodeId = _data["nodeId"];
            this.torque = _data["torque"] ? TorqueContract.fromJS(_data["torque"]) : new TorqueContract();
            this.axisDirection = _data["axisDirection"] ? Vector3.fromJS(_data["axisDirection"]) : new Vector3();
        }
    }

    static fromJS(data: any): MomentLoadResponse {
        data = typeof data === 'object' ? data : {};
        let result = new MomentLoadResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["modelId"] = this.modelId;
        data["nodeId"] = this.nodeId;
        data["torque"] = this.torque ? this.torque.toJSON() : <any>undefined;
        data["axisDirection"] = this.axisDirection ? this.axisDirection.toJSON() : <any>undefined;
        return data;
    }
}

export interface IMomentLoadResponse {
    id: string;
    modelId: string;
    nodeId: string;
    torque: TorqueContract;
    axisDirection: Vector3;
}

export class NodeResponse implements INodeResponse {
    id!: string;
    modelId!: string;
    locationPoint!: Point;
    restraint!: RestraintContract;
    customData?: { [key: string]: any; } | undefined;

    constructor(data?: INodeResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.locationPoint = new Point();
            this.restraint = new RestraintContract();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.modelId = _data["modelId"];
            this.locationPoint = _data["locationPoint"] ? Point.fromJS(_data["locationPoint"]) : new Point();
            this.restraint = _data["restraint"] ? RestraintContract.fromJS(_data["restraint"]) : new RestraintContract();
            if (_data["customData"]) {
                this.customData = {} as any;
                for (let key in _data["customData"]) {
                    if (_data["customData"].hasOwnProperty(key))
                        (<any>this.customData)![key] = _data["customData"][key];
                }
            }
        }
    }

    static fromJS(data: any): NodeResponse {
        data = typeof data === 'object' ? data : {};
        let result = new NodeResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["modelId"] = this.modelId;
        data["locationPoint"] = this.locationPoint ? this.locationPoint.toJSON() : <any>undefined;
        data["restraint"] = this.restraint ? this.restraint.toJSON() : <any>undefined;
        if (this.customData) {
            data["customData"] = {};
            for (let key in this.customData) {
                if (this.customData.hasOwnProperty(key))
                    (<any>data["customData"])[key] = (<any>this.customData)[key];
            }
        }
        return data;
    }
}

export interface INodeResponse {
    id: string;
    modelId: string;
    locationPoint: Point;
    restraint: RestraintContract;
    customData?: { [key: string]: any; } | undefined;
}

export class NodeResultResponse implements INodeResultResponse {
    nodeId!: string;
    forces!: ForcesResponse;
    displacements!: DisplacementsResponse;

    constructor(data?: INodeResultResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.forces = new ForcesResponse();
            this.displacements = new DisplacementsResponse();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.nodeId = _data["nodeId"];
            this.forces = _data["forces"] ? ForcesResponse.fromJS(_data["forces"]) : new ForcesResponse();
            this.displacements = _data["displacements"] ? DisplacementsResponse.fromJS(_data["displacements"]) : new DisplacementsResponse();
        }
    }

    static fromJS(data: any): NodeResultResponse {
        data = typeof data === 'object' ? data : {};
        let result = new NodeResultResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["nodeId"] = this.nodeId;
        data["forces"] = this.forces ? this.forces.toJSON() : <any>undefined;
        data["displacements"] = this.displacements ? this.displacements.toJSON() : <any>undefined;
        return data;
    }
}

export interface INodeResultResponse {
    nodeId: string;
    forces: ForcesResponse;
    displacements: DisplacementsResponse;
}

export class PatchNodeRequest implements IPatchNodeRequest {
    nodeId!: string;
    locationPoint!: PatchPointRequest;
    restraint!: PatchRestraintRequest;

    constructor(data?: IPatchNodeRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.locationPoint = new PatchPointRequest();
            this.restraint = new PatchRestraintRequest();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.nodeId = _data["nodeId"];
            this.locationPoint = _data["locationPoint"] ? PatchPointRequest.fromJS(_data["locationPoint"]) : new PatchPointRequest();
            this.restraint = _data["restraint"] ? PatchRestraintRequest.fromJS(_data["restraint"]) : new PatchRestraintRequest();
        }
    }

    static fromJS(data: any): PatchNodeRequest {
        data = typeof data === 'object' ? data : {};
        let result = new PatchNodeRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["nodeId"] = this.nodeId;
        data["locationPoint"] = this.locationPoint ? this.locationPoint.toJSON() : <any>undefined;
        data["restraint"] = this.restraint ? this.restraint.toJSON() : <any>undefined;
        return data;
    }
}

export interface IPatchNodeRequest {
    nodeId: string;
    locationPoint: PatchPointRequest;
    restraint: PatchRestraintRequest;
}

export class PatchPointRequest implements IPatchPointRequest {
    lengthUnit!: LengthUnitContract;
    xCoordinate?: number | undefined;
    yCoordinate?: number | undefined;
    zCoordinate?: number | undefined;

    constructor(data?: IPatchPointRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.lengthUnit = _data["lengthUnit"];
            this.xCoordinate = _data["xCoordinate"];
            this.yCoordinate = _data["yCoordinate"];
            this.zCoordinate = _data["zCoordinate"];
        }
    }

    static fromJS(data: any): PatchPointRequest {
        data = typeof data === 'object' ? data : {};
        let result = new PatchPointRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["lengthUnit"] = this.lengthUnit;
        data["xCoordinate"] = this.xCoordinate;
        data["yCoordinate"] = this.yCoordinate;
        data["zCoordinate"] = this.zCoordinate;
        return data;
    }
}

export interface IPatchPointRequest {
    lengthUnit: LengthUnitContract;
    xCoordinate?: number | undefined;
    yCoordinate?: number | undefined;
    zCoordinate?: number | undefined;
}

export class PatchRestraintRequest implements IPatchRestraintRequest {
    canTranslateAlongX?: boolean | undefined;
    canTranslateAlongY?: boolean | undefined;
    canTranslateAlongZ?: boolean | undefined;
    canRotateAboutX?: boolean | undefined;
    canRotateAboutY?: boolean | undefined;
    canRotateAboutZ?: boolean | undefined;

    constructor(data?: IPatchRestraintRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.canTranslateAlongX = _data["canTranslateAlongX"];
            this.canTranslateAlongY = _data["canTranslateAlongY"];
            this.canTranslateAlongZ = _data["canTranslateAlongZ"];
            this.canRotateAboutX = _data["canRotateAboutX"];
            this.canRotateAboutY = _data["canRotateAboutY"];
            this.canRotateAboutZ = _data["canRotateAboutZ"];
        }
    }

    static fromJS(data: any): PatchRestraintRequest {
        data = typeof data === 'object' ? data : {};
        let result = new PatchRestraintRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["canTranslateAlongX"] = this.canTranslateAlongX;
        data["canTranslateAlongY"] = this.canTranslateAlongY;
        data["canTranslateAlongZ"] = this.canTranslateAlongZ;
        data["canRotateAboutX"] = this.canRotateAboutX;
        data["canRotateAboutY"] = this.canRotateAboutY;
        data["canRotateAboutZ"] = this.canRotateAboutZ;
        return data;
    }
}

export interface IPatchRestraintRequest {
    canTranslateAlongX?: boolean | undefined;
    canTranslateAlongY?: boolean | undefined;
    canTranslateAlongZ?: boolean | undefined;
    canRotateAboutX?: boolean | undefined;
    canRotateAboutY?: boolean | undefined;
    canRotateAboutZ?: boolean | undefined;
}

export class PhysicalModelSettings implements IPhysicalModelSettings {
    unitSettings!: UnitSettingsContract;
    analysisSettings!: AnalysisSettingsContract;
    yAxisUp!: boolean;

    constructor(data?: IPhysicalModelSettings) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.unitSettings = new UnitSettingsContract();
            this.analysisSettings = new AnalysisSettingsContract();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.unitSettings = _data["unitSettings"] ? UnitSettingsContract.fromJS(_data["unitSettings"]) : new UnitSettingsContract();
            this.analysisSettings = _data["analysisSettings"] ? AnalysisSettingsContract.fromJS(_data["analysisSettings"]) : new AnalysisSettingsContract();
            this.yAxisUp = _data["yAxisUp"];
        }
    }

    static fromJS(data: any): PhysicalModelSettings {
        data = typeof data === 'object' ? data : {};
        let result = new PhysicalModelSettings();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["unitSettings"] = this.unitSettings ? this.unitSettings.toJSON() : <any>undefined;
        data["analysisSettings"] = this.analysisSettings ? this.analysisSettings.toJSON() : <any>undefined;
        data["yAxisUp"] = this.yAxisUp;
        return data;
    }
}

export interface IPhysicalModelSettings {
    unitSettings: UnitSettingsContract;
    analysisSettings: AnalysisSettingsContract;
    yAxisUp: boolean;
}

export class Point implements IPoint {
    xCoordinate!: number;
    yCoordinate!: number;
    zCoordinate!: number;
    lengthUnit!: LengthUnitContract;

    constructor(data?: IPoint) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.xCoordinate = _data["xCoordinate"];
            this.yCoordinate = _data["yCoordinate"];
            this.zCoordinate = _data["zCoordinate"];
            this.lengthUnit = _data["lengthUnit"];
        }
    }

    static fromJS(data: any): Point {
        data = typeof data === 'object' ? data : {};
        let result = new Point();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["xCoordinate"] = this.xCoordinate;
        data["yCoordinate"] = this.yCoordinate;
        data["zCoordinate"] = this.zCoordinate;
        data["lengthUnit"] = this.lengthUnit;
        return data;
    }
}

export interface IPoint {
    xCoordinate: number;
    yCoordinate: number;
    zCoordinate: number;
    lengthUnit: LengthUnitContract;
}

export class PointLoadResponse implements IPointLoadResponse {
    id!: string;
    modelId!: string;
    nodeId!: string;
    force!: ForceContract;
    direction!: Vector3;

    constructor(data?: IPointLoadResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.force = new ForceContract();
            this.direction = new Vector3();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.modelId = _data["modelId"];
            this.nodeId = _data["nodeId"];
            this.force = _data["force"] ? ForceContract.fromJS(_data["force"]) : new ForceContract();
            this.direction = _data["direction"] ? Vector3.fromJS(_data["direction"]) : new Vector3();
        }
    }

    static fromJS(data: any): PointLoadResponse {
        data = typeof data === 'object' ? data : {};
        let result = new PointLoadResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["modelId"] = this.modelId;
        data["nodeId"] = this.nodeId;
        data["force"] = this.force ? this.force.toJSON() : <any>undefined;
        data["direction"] = this.direction ? this.direction.toJSON() : <any>undefined;
        return data;
    }
}

export interface IPointLoadResponse {
    id: string;
    modelId: string;
    nodeId: string;
    force: ForceContract;
    direction: Vector3;
}

export enum PreconfiguredUnits {
    _0 = 0,
    _1 = 1,
    _2 = 2,
}

export class PressureContract implements IPressureContract {
    value!: number;
    unit!: PressureUnitContract;

    constructor(data?: IPressureContract) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.value = _data["value"];
            this.unit = _data["unit"];
        }
    }

    static fromJS(data: any): PressureContract {
        data = typeof data === 'object' ? data : {};
        let result = new PressureContract();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        data["unit"] = this.unit;
        return data;
    }
}

export interface IPressureContract {
    value: number;
    unit: PressureUnitContract;
}

export enum PressureUnitContract {
    _0 = 0,
    _7 = 7,
    _8 = 8,
    _9 = 9,
    _10 = 10,
    _11 = 11,
    _17 = 17,
    _18 = 18,
    _19 = 19,
    _21 = 21,
    _22 = 22,
}

export class RestraintContract implements IRestraintContract {
    canTranslateAlongX!: boolean;
    canTranslateAlongY!: boolean;
    canTranslateAlongZ!: boolean;
    canRotateAboutX!: boolean;
    canRotateAboutY!: boolean;
    canRotateAboutZ!: boolean;

    constructor(data?: IRestraintContract) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.canTranslateAlongX = _data["canTranslateAlongX"];
            this.canTranslateAlongY = _data["canTranslateAlongY"];
            this.canTranslateAlongZ = _data["canTranslateAlongZ"];
            this.canRotateAboutX = _data["canRotateAboutX"];
            this.canRotateAboutY = _data["canRotateAboutY"];
            this.canRotateAboutZ = _data["canRotateAboutZ"];
        }
    }

    static fromJS(data: any): RestraintContract {
        data = typeof data === 'object' ? data : {};
        let result = new RestraintContract();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["canTranslateAlongX"] = this.canTranslateAlongX;
        data["canTranslateAlongY"] = this.canTranslateAlongY;
        data["canTranslateAlongZ"] = this.canTranslateAlongZ;
        data["canRotateAboutX"] = this.canRotateAboutX;
        data["canRotateAboutY"] = this.canRotateAboutY;
        data["canRotateAboutZ"] = this.canRotateAboutZ;
        return data;
    }
}

export interface IRestraintContract {
    canTranslateAlongX: boolean;
    canTranslateAlongY: boolean;
    canTranslateAlongZ: boolean;
    canRotateAboutX: boolean;
    canRotateAboutY: boolean;
    canRotateAboutZ: boolean;
}

export class RunAnalysisRequest implements IRunAnalysisRequest {
    modelId!: string;

    constructor(data?: IRunAnalysisRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.modelId = _data["modelId"];
        }
    }

    static fromJS(data: any): RunAnalysisRequest {
        data = typeof data === 'object' ? data : {};
        let result = new RunAnalysisRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["modelId"] = this.modelId;
        return data;
    }
}

export interface IRunAnalysisRequest {
    modelId: string;
}

export class SectionProfileResponse implements ISectionProfileResponse {
    id!: string;
    modelId!: string;
    area!: AreaContract;
    strongAxisMomentOfInertia!: AreaMomentOfInertiaContract;
    weakAxisMomentOfInertia!: AreaMomentOfInertiaContract;
    polarMomentOfInertia!: AreaMomentOfInertiaContract;
    strongAxisShearArea!: AreaContract;
    weakAxisShearArea!: AreaContract;

    constructor(data?: ISectionProfileResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.area = new AreaContract();
            this.strongAxisMomentOfInertia = new AreaMomentOfInertiaContract();
            this.weakAxisMomentOfInertia = new AreaMomentOfInertiaContract();
            this.polarMomentOfInertia = new AreaMomentOfInertiaContract();
            this.strongAxisShearArea = new AreaContract();
            this.weakAxisShearArea = new AreaContract();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.modelId = _data["modelId"];
            this.area = _data["area"] ? AreaContract.fromJS(_data["area"]) : new AreaContract();
            this.strongAxisMomentOfInertia = _data["strongAxisMomentOfInertia"] ? AreaMomentOfInertiaContract.fromJS(_data["strongAxisMomentOfInertia"]) : new AreaMomentOfInertiaContract();
            this.weakAxisMomentOfInertia = _data["weakAxisMomentOfInertia"] ? AreaMomentOfInertiaContract.fromJS(_data["weakAxisMomentOfInertia"]) : new AreaMomentOfInertiaContract();
            this.polarMomentOfInertia = _data["polarMomentOfInertia"] ? AreaMomentOfInertiaContract.fromJS(_data["polarMomentOfInertia"]) : new AreaMomentOfInertiaContract();
            this.strongAxisShearArea = _data["strongAxisShearArea"] ? AreaContract.fromJS(_data["strongAxisShearArea"]) : new AreaContract();
            this.weakAxisShearArea = _data["weakAxisShearArea"] ? AreaContract.fromJS(_data["weakAxisShearArea"]) : new AreaContract();
        }
    }

    static fromJS(data: any): SectionProfileResponse {
        data = typeof data === 'object' ? data : {};
        let result = new SectionProfileResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["modelId"] = this.modelId;
        data["area"] = this.area ? this.area.toJSON() : <any>undefined;
        data["strongAxisMomentOfInertia"] = this.strongAxisMomentOfInertia ? this.strongAxisMomentOfInertia.toJSON() : <any>undefined;
        data["weakAxisMomentOfInertia"] = this.weakAxisMomentOfInertia ? this.weakAxisMomentOfInertia.toJSON() : <any>undefined;
        data["polarMomentOfInertia"] = this.polarMomentOfInertia ? this.polarMomentOfInertia.toJSON() : <any>undefined;
        data["strongAxisShearArea"] = this.strongAxisShearArea ? this.strongAxisShearArea.toJSON() : <any>undefined;
        data["weakAxisShearArea"] = this.weakAxisShearArea ? this.weakAxisShearArea.toJSON() : <any>undefined;
        return data;
    }
}

export interface ISectionProfileResponse {
    id: string;
    modelId: string;
    area: AreaContract;
    strongAxisMomentOfInertia: AreaMomentOfInertiaContract;
    weakAxisMomentOfInertia: AreaMomentOfInertiaContract;
    polarMomentOfInertia: AreaMomentOfInertiaContract;
    strongAxisShearArea: AreaContract;
    weakAxisShearArea: AreaContract;
}

export class SetColorFilter implements ISetColorFilter {
    beamOsIds!: string[];
    colorAllOthers!: boolean;
    colorHex!: string;
    ghost!: boolean;

    constructor(data?: ISetColorFilter) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.beamOsIds = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["beamOsIds"])) {
                this.beamOsIds = [] as any;
                for (let item of _data["beamOsIds"])
                    this.beamOsIds!.push(item);
            }
            this.colorAllOthers = _data["colorAllOthers"];
            this.colorHex = _data["colorHex"];
            this.ghost = _data["ghost"];
        }
    }

    static fromJS(data: any): SetColorFilter {
        data = typeof data === 'object' ? data : {};
        let result = new SetColorFilter();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.beamOsIds)) {
            data["beamOsIds"] = [];
            for (let item of this.beamOsIds)
                data["beamOsIds"].push(item);
        }
        data["colorAllOthers"] = this.colorAllOthers;
        data["colorHex"] = this.colorHex;
        data["ghost"] = this.ghost;
        return data;
    }
}

export interface ISetColorFilter {
    beamOsIds: string[];
    colorAllOthers: boolean;
    colorHex: string;
    ghost: boolean;
}

export class ShearDiagramResponse implements IShearDiagramResponse {
    id!: string;
    element1DId!: string;
    globalShearDirection!: Vector3;
    lengthUnit!: string;
    forceUnit!: string;
    elementLength!: LengthContract;
    intervals!: DiagramConsistentIntervalResponse[];

    constructor(data?: IShearDiagramResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.globalShearDirection = new Vector3();
            this.elementLength = new LengthContract();
            this.intervals = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.element1DId = _data["element1DId"];
            this.globalShearDirection = _data["globalShearDirection"] ? Vector3.fromJS(_data["globalShearDirection"]) : new Vector3();
            this.lengthUnit = _data["lengthUnit"];
            this.forceUnit = _data["forceUnit"];
            this.elementLength = _data["elementLength"] ? LengthContract.fromJS(_data["elementLength"]) : new LengthContract();
            if (Array.isArray(_data["intervals"])) {
                this.intervals = [] as any;
                for (let item of _data["intervals"])
                    this.intervals!.push(DiagramConsistentIntervalResponse.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ShearDiagramResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ShearDiagramResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["element1DId"] = this.element1DId;
        data["globalShearDirection"] = this.globalShearDirection ? this.globalShearDirection.toJSON() : <any>undefined;
        data["lengthUnit"] = this.lengthUnit;
        data["forceUnit"] = this.forceUnit;
        data["elementLength"] = this.elementLength ? this.elementLength.toJSON() : <any>undefined;
        if (Array.isArray(this.intervals)) {
            data["intervals"] = [];
            for (let item of this.intervals)
                data["intervals"].push(item.toJSON());
        }
        return data;
    }
}

export interface IShearDiagramResponse {
    id: string;
    element1DId: string;
    globalShearDirection: Vector3;
    lengthUnit: string;
    forceUnit: string;
    elementLength: LengthContract;
    intervals: DiagramConsistentIntervalResponse[];
}

export class TorqueContract implements ITorqueContract {
    value!: number;
    unit!: TorqueUnitContract;

    constructor(data?: ITorqueContract) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.value = _data["value"];
            this.unit = _data["unit"];
        }
    }

    static fromJS(data: any): TorqueContract {
        data = typeof data === 'object' ? data : {};
        let result = new TorqueContract();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        data["unit"] = this.unit;
        return data;
    }
}

export interface ITorqueContract {
    value: number;
    unit: TorqueUnitContract;
}

export enum TorqueUnitContract {
    _0 = 0,
    _7 = 7,
    _8 = 8,
    _9 = 9,
    _10 = 10,
    _11 = 11,
    _17 = 17,
    _18 = 18,
    _19 = 19,
    _21 = 21,
    _22 = 22,
}

export class UnitSettingsContract implements IUnitSettingsContract {
    lengthUnit!: LengthUnitContract;
    forceUnit!: ForceUnitContract;
    angleUnit!: AngleUnitContract;

    constructor(data?: IUnitSettingsContract) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.lengthUnit = _data["lengthUnit"];
            this.forceUnit = _data["forceUnit"];
            this.angleUnit = _data["angleUnit"];
        }
    }

    static fromJS(data: any): UnitSettingsContract {
        data = typeof data === 'object' ? data : {};
        let result = new UnitSettingsContract();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["lengthUnit"] = this.lengthUnit;
        data["forceUnit"] = this.forceUnit;
        data["angleUnit"] = this.angleUnit;
        return data;
    }
}

export interface IUnitSettingsContract {
    lengthUnit: LengthUnitContract;
    forceUnit: ForceUnitContract;
    angleUnit: AngleUnitContract;
}

export class UnitSettingsDto implements IUnitSettingsDto {
    lengthUnit!: string;
    forceUnit!: string;

    constructor(data?: IUnitSettingsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.lengthUnit = _data["lengthUnit"];
            this.forceUnit = _data["forceUnit"];
        }
    }

    static fromJS(data: any): UnitSettingsDto {
        data = typeof data === 'object' ? data : {};
        let result = new UnitSettingsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["lengthUnit"] = this.lengthUnit;
        data["forceUnit"] = this.forceUnit;
        return data;
    }
}

export interface IUnitSettingsDto {
    lengthUnit: string;
    forceUnit: string;
}

export class UnitSettingsDtoVerbose implements IUnitSettingsDtoVerbose {
    lengthUnit!: string;
    areaUnit!: string;
    volumeUnit!: string;
    areaMomentOfInertiaUnit!: string;
    forceUnit!: string;
    torqueUnit!: string;
    forcePerLengthUnit!: string;
    pressureUnit!: string;
    angleUnit!: string;

    constructor(data?: IUnitSettingsDtoVerbose) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.lengthUnit = _data["lengthUnit"];
            this.areaUnit = _data["areaUnit"];
            this.volumeUnit = _data["volumeUnit"];
            this.areaMomentOfInertiaUnit = _data["areaMomentOfInertiaUnit"];
            this.forceUnit = _data["forceUnit"];
            this.torqueUnit = _data["torqueUnit"];
            this.forcePerLengthUnit = _data["forcePerLengthUnit"];
            this.pressureUnit = _data["pressureUnit"];
            this.angleUnit = _data["angleUnit"];
        }
    }

    static fromJS(data: any): UnitSettingsDtoVerbose {
        data = typeof data === 'object' ? data : {};
        let result = new UnitSettingsDtoVerbose();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["lengthUnit"] = this.lengthUnit;
        data["areaUnit"] = this.areaUnit;
        data["volumeUnit"] = this.volumeUnit;
        data["areaMomentOfInertiaUnit"] = this.areaMomentOfInertiaUnit;
        data["forceUnit"] = this.forceUnit;
        data["torqueUnit"] = this.torqueUnit;
        data["forcePerLengthUnit"] = this.forcePerLengthUnit;
        data["pressureUnit"] = this.pressureUnit;
        data["angleUnit"] = this.angleUnit;
        return data;
    }
}

export interface IUnitSettingsDtoVerbose {
    lengthUnit: string;
    areaUnit: string;
    volumeUnit: string;
    areaMomentOfInertiaUnit: string;
    forceUnit: string;
    torqueUnit: string;
    forcePerLengthUnit: string;
    pressureUnit: string;
    angleUnit: string;
}

export class UnitSettingsRequest implements IUnitSettingsRequest {
    lengthUnit!: string;
    areaUnit!: string;
    volumeUnit!: string;
    forceUnit!: string;
    forcePerLengthUnit!: string;
    torqueUnit!: string;

    constructor(data?: IUnitSettingsRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.lengthUnit = _data["lengthUnit"];
            this.areaUnit = _data["areaUnit"];
            this.volumeUnit = _data["volumeUnit"];
            this.forceUnit = _data["forceUnit"];
            this.forcePerLengthUnit = _data["forcePerLengthUnit"];
            this.torqueUnit = _data["torqueUnit"];
        }
    }

    static fromJS(data: any): UnitSettingsRequest {
        data = typeof data === 'object' ? data : {};
        let result = new UnitSettingsRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["lengthUnit"] = this.lengthUnit;
        data["areaUnit"] = this.areaUnit;
        data["volumeUnit"] = this.volumeUnit;
        data["forceUnit"] = this.forceUnit;
        data["forcePerLengthUnit"] = this.forcePerLengthUnit;
        data["torqueUnit"] = this.torqueUnit;
        return data;
    }
}

export interface IUnitSettingsRequest {
    lengthUnit: string;
    areaUnit: string;
    volumeUnit: string;
    forceUnit: string;
    forcePerLengthUnit: string;
    torqueUnit: string;
}

export class UnitSettingsResponse implements IUnitSettingsResponse {
    lengthUnit!: string;
    areaUnit!: string;
    volumeUnit!: string;
    forceUnit!: string;
    forcePerLengthUnit!: string;
    torqueUnit!: string;
    pressureUnit!: string;
    areaMomentOfInertiaUnit!: string;

    constructor(data?: IUnitSettingsResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.lengthUnit = _data["lengthUnit"];
            this.areaUnit = _data["areaUnit"];
            this.volumeUnit = _data["volumeUnit"];
            this.forceUnit = _data["forceUnit"];
            this.forcePerLengthUnit = _data["forcePerLengthUnit"];
            this.torqueUnit = _data["torqueUnit"];
            this.pressureUnit = _data["pressureUnit"];
            this.areaMomentOfInertiaUnit = _data["areaMomentOfInertiaUnit"];
        }
    }

    static fromJS(data: any): UnitSettingsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new UnitSettingsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["lengthUnit"] = this.lengthUnit;
        data["areaUnit"] = this.areaUnit;
        data["volumeUnit"] = this.volumeUnit;
        data["forceUnit"] = this.forceUnit;
        data["forcePerLengthUnit"] = this.forcePerLengthUnit;
        data["torqueUnit"] = this.torqueUnit;
        data["pressureUnit"] = this.pressureUnit;
        data["areaMomentOfInertiaUnit"] = this.areaMomentOfInertiaUnit;
        return data;
    }
}

export interface IUnitSettingsResponse {
    lengthUnit: string;
    areaUnit: string;
    volumeUnit: string;
    forceUnit: string;
    forcePerLengthUnit: string;
    torqueUnit: string;
    pressureUnit: string;
    areaMomentOfInertiaUnit: string;
}

export class UnitValueDto implements IUnitValueDto {
    value!: number;
    unit!: string;

    constructor(data?: IUnitValueDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.value = _data["value"];
            this.unit = _data["unit"];
        }
    }

    static fromJS(data: any): UnitValueDto {
        data = typeof data === 'object' ? data : {};
        let result = new UnitValueDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        data["unit"] = this.unit;
        return data;
    }
}

export interface IUnitValueDto {
    value: number;
    unit: string;
}

export class UnsupportedStructureDisplacementIdResponse implements IUnsupportedStructureDisplacementIdResponse {
    analyticalNodeId!: string;
    direction!: string;

    constructor(data?: IUnsupportedStructureDisplacementIdResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.analyticalNodeId = _data["analyticalNodeId"];
            this.direction = _data["direction"];
        }
    }

    static fromJS(data: any): UnsupportedStructureDisplacementIdResponse {
        data = typeof data === 'object' ? data : {};
        let result = new UnsupportedStructureDisplacementIdResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["analyticalNodeId"] = this.analyticalNodeId;
        data["direction"] = this.direction;
        return data;
    }
}

export interface IUnsupportedStructureDisplacementIdResponse {
    analyticalNodeId: string;
    direction: string;
}

export class Vector3 implements IVector3 {
    x!: number;
    y!: number;
    z!: number;

    constructor(data?: IVector3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.x = _data["x"];
            this.y = _data["y"];
            this.z = _data["z"];
        }
    }

    static fromJS(data: any): Vector3 {
        data = typeof data === 'object' ? data : {};
        let result = new Vector3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["x"] = this.x;
        data["y"] = this.y;
        data["z"] = this.z;
        return data;
    }
}

export interface IVector3 {
    x: number;
    y: number;
    z: number;
}

export class VolumeContract implements IVolumeContract {
    value!: number;
    unit!: VolumeUnitContract;

    constructor(data?: IVolumeContract) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.value = _data["value"];
            this.unit = _data["unit"];
        }
    }

    static fromJS(data: any): VolumeContract {
        data = typeof data === 'object' ? data : {};
        let result = new VolumeContract();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        data["unit"] = this.unit;
        return data;
    }
}

export interface IVolumeContract {
    value: number;
    unit: VolumeUnitContract;
}

export enum VolumeUnitContract {
    _0 = 0,
    _1 = 1,
    _2 = 2,
    _3 = 3,
    _4 = 4,
    _5 = 5,
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}