// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using BeamOs.Common.Domain.Models;
using BeamOs.StructuralAnalysis.Domain.AnalyticalResults.EnvelopeResultSets;
using BeamOs.StructuralAnalysis.Domain.AnalyticalResults.ResultSetAggregate;
using BeamOs.StructuralAnalysis.Domain.Common;
using BeamOs.StructuralAnalysis.Domain.PhysicalModel.Element1dAggregate;
using BeamOs.StructuralAnalysis.Domain.PhysicalModel.ModelAggregate;
using BeamOs.StructuralAnalysis.Infrastructure.Common;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using UnitsNet;

#pragma warning disable 219, 612, 618
#nullable disable

namespace BeamOs.StructuralAnalysis.Api
{
    [EntityFrameworkInternal]
    public partial class EnvelopeElement1dResultEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "BeamOs.StructuralAnalysis.Domain.AnalyticalResults.EnvelopeResultSets.EnvelopeElement1dResult",
                typeof(EnvelopeElement1dResult),
                baseEntityType,
                propertyCount: 4,
                complexPropertyCount: 6,
                navigationCount: 2,
                foreignKeyCount: 2,
                unnamedIndexCount: 2,
                keyCount: 1);

            var id = runtimeEntityType.AddProperty(
                "Id",
                typeof(EnvelopeElement1dResultId),
                propertyInfo: typeof(BeamOsEntity<EnvelopeElement1dResultId>).GetProperty("Id", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(BeamOsEntity<EnvelopeElement1dResultId>).GetField("<Id>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                valueConverter: new EnvelopeElement1dResultIdConverter());
            id.SetSentinelFromProviderValue(0);

            var modelId = runtimeEntityType.AddProperty(
                "ModelId",
                typeof(ModelId),
                propertyInfo: typeof(BeamOsModelEntity<EnvelopeElement1dResultId>).GetProperty("ModelId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(BeamOsModelEntity<EnvelopeElement1dResultId>).GetField("<ModelId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                afterSaveBehavior: PropertySaveBehavior.Throw,
                valueConverter: new ModelIdConverter());
            modelId.SetSentinelFromProviderValue(new Guid("01995299-f5ac-7a63-bec7-6ad6e50c52af"));

            var element1dId = runtimeEntityType.AddProperty(
                "Element1dId",
                typeof(Element1dId),
                propertyInfo: typeof(EnvelopeElement1dResult).GetProperty("Element1dId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EnvelopeElement1dResult).GetField("<Element1dId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueConverter: new Element1dIdConverter());
            element1dId.SetSentinelFromProviderValue(0);

            var envelopeResultSetId = runtimeEntityType.AddProperty(
                "EnvelopeResultSetId",
                typeof(EnvelopeResultSetId),
                propertyInfo: typeof(EnvelopeElement1dResult).GetProperty("EnvelopeResultSetId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EnvelopeElement1dResult).GetField("<EnvelopeResultSetId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueConverter: new EnvelopeResultSetIdConverter());
            envelopeResultSetId.SetSentinelFromProviderValue(0);

            MaxDisplacementComplexProperty.Create(runtimeEntityType);
            MaxMomentComplexProperty.Create(runtimeEntityType);
            MaxShearComplexProperty.Create(runtimeEntityType);
            MinDisplacementComplexProperty.Create(runtimeEntityType);
            MinMomentComplexProperty.Create(runtimeEntityType);
            MinShearComplexProperty.Create(runtimeEntityType);
            var key = runtimeEntityType.AddKey(
                new[] { id, modelId });
            runtimeEntityType.SetPrimaryKey(key);

            var index = runtimeEntityType.AddIndex(
                new[] { modelId });

            var index0 = runtimeEntityType.AddIndex(
                new[] { envelopeResultSetId, modelId });

            return runtimeEntityType;
        }

        public static class MaxDisplacementComplexProperty
        {
            public static RuntimeComplexProperty Create(RuntimeEntityType declaringType)
            {
                var complexProperty = declaringType.AddComplexProperty("MaxDisplacement",
                    typeof(ResultSetAndQuantity<Length>),
                    "BeamOs.StructuralAnalysis.Domain.AnalyticalResults.EnvelopeResultSets.EnvelopeElement1dResult.MaxDisplacement#ResultSetAndQuantity<Length>",
                    typeof(ResultSetAndQuantity<Length>),
                    propertyInfo: typeof(EnvelopeElement1dResult).GetProperty("MaxDisplacement", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    fieldInfo: typeof(EnvelopeElement1dResult).GetField("<MaxDisplacement>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    propertyCount: 2);

                var complexType = complexProperty.ComplexType;
                var resultSetId = complexType.AddProperty(
                    "ResultSetId",
                    typeof(ResultSetId),
                    propertyInfo: typeof(ResultSetAndQuantity<Length>).GetProperty("ResultSetId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    fieldInfo: typeof(ResultSetAndQuantity<Length>).GetField("<ResultSetId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    valueConverter: new ResultSetIdConverter());
                resultSetId.SetSentinelFromProviderValue(0);

                var value = complexType.AddProperty(
                    "Value",
                    typeof(Length),
                    propertyInfo: typeof(ResultSetAndQuantity<Length>).GetProperty("Value", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    fieldInfo: typeof(ResultSetAndQuantity<Length>).GetField("<Value>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    valueConverter: new LengthValueConverter());
                value.SetSentinelFromProviderValue(0.0);

                complexType.AddAnnotation("Relational:FunctionName", null);
                complexType.AddAnnotation("Relational:Schema", null);
                complexType.AddAnnotation("Relational:SqlQuery", null);
                complexType.AddAnnotation("Relational:TableName", "EnvelopeElement1dResults");
                complexType.AddAnnotation("Relational:ViewName", null);
                complexType.AddAnnotation("Relational:ViewSchema", null);
                return complexProperty;
            }
        }

        public static class MaxMomentComplexProperty
        {
            public static RuntimeComplexProperty Create(RuntimeEntityType declaringType)
            {
                var complexProperty = declaringType.AddComplexProperty("MaxMoment",
                    typeof(ResultSetAndQuantity<Torque>),
                    "BeamOs.StructuralAnalysis.Domain.AnalyticalResults.EnvelopeResultSets.EnvelopeElement1dResult.MaxMoment#ResultSetAndQuantity<Torque>",
                    typeof(ResultSetAndQuantity<Torque>),
                    propertyInfo: typeof(EnvelopeElement1dResult).GetProperty("MaxMoment", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    fieldInfo: typeof(EnvelopeElement1dResult).GetField("<MaxMoment>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    propertyCount: 2);

                var complexType = complexProperty.ComplexType;
                var resultSetId = complexType.AddProperty(
                    "ResultSetId",
                    typeof(ResultSetId),
                    propertyInfo: typeof(ResultSetAndQuantity<Torque>).GetProperty("ResultSetId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    fieldInfo: typeof(ResultSetAndQuantity<Torque>).GetField("<ResultSetId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    valueConverter: new ResultSetIdConverter());
                resultSetId.SetSentinelFromProviderValue(0);

                var value = complexType.AddProperty(
                    "Value",
                    typeof(Torque),
                    propertyInfo: typeof(ResultSetAndQuantity<Torque>).GetProperty("Value", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    fieldInfo: typeof(ResultSetAndQuantity<Torque>).GetField("<Value>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    valueConverter: new TorqueValueConverter());
                value.SetSentinelFromProviderValue(0.0);

                complexType.AddAnnotation("Relational:FunctionName", null);
                complexType.AddAnnotation("Relational:Schema", null);
                complexType.AddAnnotation("Relational:SqlQuery", null);
                complexType.AddAnnotation("Relational:TableName", "EnvelopeElement1dResults");
                complexType.AddAnnotation("Relational:ViewName", null);
                complexType.AddAnnotation("Relational:ViewSchema", null);
                return complexProperty;
            }
        }

        public static class MaxShearComplexProperty
        {
            public static RuntimeComplexProperty Create(RuntimeEntityType declaringType)
            {
                var complexProperty = declaringType.AddComplexProperty("MaxShear",
                    typeof(ResultSetAndQuantity<Force>),
                    "BeamOs.StructuralAnalysis.Domain.AnalyticalResults.EnvelopeResultSets.EnvelopeElement1dResult.MaxShear#ResultSetAndQuantity<Force>",
                    typeof(ResultSetAndQuantity<Force>),
                    propertyInfo: typeof(EnvelopeElement1dResult).GetProperty("MaxShear", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    fieldInfo: typeof(EnvelopeElement1dResult).GetField("<MaxShear>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    propertyCount: 2);

                var complexType = complexProperty.ComplexType;
                var resultSetId = complexType.AddProperty(
                    "ResultSetId",
                    typeof(ResultSetId),
                    propertyInfo: typeof(ResultSetAndQuantity<Force>).GetProperty("ResultSetId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    fieldInfo: typeof(ResultSetAndQuantity<Force>).GetField("<ResultSetId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    valueConverter: new ResultSetIdConverter());
                resultSetId.SetSentinelFromProviderValue(0);

                var value = complexType.AddProperty(
                    "Value",
                    typeof(Force),
                    propertyInfo: typeof(ResultSetAndQuantity<Force>).GetProperty("Value", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    fieldInfo: typeof(ResultSetAndQuantity<Force>).GetField("<Value>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    valueConverter: new ForceValueConverter());
                value.SetSentinelFromProviderValue(0.0);

                complexType.AddAnnotation("Relational:FunctionName", null);
                complexType.AddAnnotation("Relational:Schema", null);
                complexType.AddAnnotation("Relational:SqlQuery", null);
                complexType.AddAnnotation("Relational:TableName", "EnvelopeElement1dResults");
                complexType.AddAnnotation("Relational:ViewName", null);
                complexType.AddAnnotation("Relational:ViewSchema", null);
                return complexProperty;
            }
        }

        public static class MinDisplacementComplexProperty
        {
            public static RuntimeComplexProperty Create(RuntimeEntityType declaringType)
            {
                var complexProperty = declaringType.AddComplexProperty("MinDisplacement",
                    typeof(ResultSetAndQuantity<Length>),
                    "BeamOs.StructuralAnalysis.Domain.AnalyticalResults.EnvelopeResultSets.EnvelopeElement1dResult.MinDisplacement#ResultSetAndQuantity<Length>",
                    typeof(ResultSetAndQuantity<Length>),
                    propertyInfo: typeof(EnvelopeElement1dResult).GetProperty("MinDisplacement", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    fieldInfo: typeof(EnvelopeElement1dResult).GetField("<MinDisplacement>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    propertyCount: 2);

                var complexType = complexProperty.ComplexType;
                var resultSetId = complexType.AddProperty(
                    "ResultSetId",
                    typeof(ResultSetId),
                    propertyInfo: typeof(ResultSetAndQuantity<Length>).GetProperty("ResultSetId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    fieldInfo: typeof(ResultSetAndQuantity<Length>).GetField("<ResultSetId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    valueConverter: new ResultSetIdConverter());
                resultSetId.SetSentinelFromProviderValue(0);

                var value = complexType.AddProperty(
                    "Value",
                    typeof(Length),
                    propertyInfo: typeof(ResultSetAndQuantity<Length>).GetProperty("Value", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    fieldInfo: typeof(ResultSetAndQuantity<Length>).GetField("<Value>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    valueConverter: new LengthValueConverter());
                value.SetSentinelFromProviderValue(0.0);

                complexType.AddAnnotation("Relational:FunctionName", null);
                complexType.AddAnnotation("Relational:Schema", null);
                complexType.AddAnnotation("Relational:SqlQuery", null);
                complexType.AddAnnotation("Relational:TableName", "EnvelopeElement1dResults");
                complexType.AddAnnotation("Relational:ViewName", null);
                complexType.AddAnnotation("Relational:ViewSchema", null);
                return complexProperty;
            }
        }

        public static class MinMomentComplexProperty
        {
            public static RuntimeComplexProperty Create(RuntimeEntityType declaringType)
            {
                var complexProperty = declaringType.AddComplexProperty("MinMoment",
                    typeof(ResultSetAndQuantity<Torque>),
                    "BeamOs.StructuralAnalysis.Domain.AnalyticalResults.EnvelopeResultSets.EnvelopeElement1dResult.MinMoment#ResultSetAndQuantity<Torque>",
                    typeof(ResultSetAndQuantity<Torque>),
                    propertyInfo: typeof(EnvelopeElement1dResult).GetProperty("MinMoment", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    fieldInfo: typeof(EnvelopeElement1dResult).GetField("<MinMoment>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    propertyCount: 2);

                var complexType = complexProperty.ComplexType;
                var resultSetId = complexType.AddProperty(
                    "ResultSetId",
                    typeof(ResultSetId),
                    propertyInfo: typeof(ResultSetAndQuantity<Torque>).GetProperty("ResultSetId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    fieldInfo: typeof(ResultSetAndQuantity<Torque>).GetField("<ResultSetId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    valueConverter: new ResultSetIdConverter());
                resultSetId.SetSentinelFromProviderValue(0);

                var value = complexType.AddProperty(
                    "Value",
                    typeof(Torque),
                    propertyInfo: typeof(ResultSetAndQuantity<Torque>).GetProperty("Value", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    fieldInfo: typeof(ResultSetAndQuantity<Torque>).GetField("<Value>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    valueConverter: new TorqueValueConverter());
                value.SetSentinelFromProviderValue(0.0);

                complexType.AddAnnotation("Relational:FunctionName", null);
                complexType.AddAnnotation("Relational:Schema", null);
                complexType.AddAnnotation("Relational:SqlQuery", null);
                complexType.AddAnnotation("Relational:TableName", "EnvelopeElement1dResults");
                complexType.AddAnnotation("Relational:ViewName", null);
                complexType.AddAnnotation("Relational:ViewSchema", null);
                return complexProperty;
            }
        }

        public static class MinShearComplexProperty
        {
            public static RuntimeComplexProperty Create(RuntimeEntityType declaringType)
            {
                var complexProperty = declaringType.AddComplexProperty("MinShear",
                    typeof(ResultSetAndQuantity<Force>),
                    "BeamOs.StructuralAnalysis.Domain.AnalyticalResults.EnvelopeResultSets.EnvelopeElement1dResult.MinShear#ResultSetAndQuantity<Force>",
                    typeof(ResultSetAndQuantity<Force>),
                    propertyInfo: typeof(EnvelopeElement1dResult).GetProperty("MinShear", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    fieldInfo: typeof(EnvelopeElement1dResult).GetField("<MinShear>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    propertyCount: 2);

                var complexType = complexProperty.ComplexType;
                var resultSetId = complexType.AddProperty(
                    "ResultSetId",
                    typeof(ResultSetId),
                    propertyInfo: typeof(ResultSetAndQuantity<Force>).GetProperty("ResultSetId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    fieldInfo: typeof(ResultSetAndQuantity<Force>).GetField("<ResultSetId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    valueConverter: new ResultSetIdConverter());
                resultSetId.SetSentinelFromProviderValue(0);

                var value = complexType.AddProperty(
                    "Value",
                    typeof(Force),
                    propertyInfo: typeof(ResultSetAndQuantity<Force>).GetProperty("Value", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    fieldInfo: typeof(ResultSetAndQuantity<Force>).GetField("<Value>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    valueConverter: new ForceValueConverter());
                value.SetSentinelFromProviderValue(0.0);

                complexType.AddAnnotation("Relational:FunctionName", null);
                complexType.AddAnnotation("Relational:Schema", null);
                complexType.AddAnnotation("Relational:SqlQuery", null);
                complexType.AddAnnotation("Relational:TableName", "EnvelopeElement1dResults");
                complexType.AddAnnotation("Relational:ViewName", null);
                complexType.AddAnnotation("Relational:ViewSchema", null);
                return complexProperty;
            }
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ModelId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id") }),
                principalEntityType,
                deleteBehavior: DeleteBehavior.Cascade,
                required: true);

            var model = declaringEntityType.AddNavigation("Model",
                runtimeForeignKey,
                onDependent: true,
                typeof(Model),
                propertyInfo: typeof(BeamOsModelEntity<EnvelopeElement1dResultId>).GetProperty("Model", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(BeamOsModelEntity<EnvelopeElement1dResultId>).GetField("<Model>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey2(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("EnvelopeResultSetId"), declaringEntityType.FindProperty("ModelId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id"), principalEntityType.FindProperty("ModelId") }),
                principalEntityType,
                deleteBehavior: DeleteBehavior.Cascade,
                required: true);

            var envelopeResultSet = declaringEntityType.AddNavigation("EnvelopeResultSet",
                runtimeForeignKey,
                onDependent: true,
                typeof(EnvelopeResultSet),
                propertyInfo: typeof(EnvelopeElement1dResult).GetProperty("EnvelopeResultSet", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EnvelopeElement1dResult).GetField("<EnvelopeResultSet>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var element1dResults = principalEntityType.AddNavigation("Element1dResults",
                runtimeForeignKey,
                onDependent: false,
                typeof(IList<EnvelopeElement1dResult>),
                propertyInfo: typeof(EnvelopeResultSet).GetProperty("Element1dResults", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "EnvelopeElement1dResults");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
