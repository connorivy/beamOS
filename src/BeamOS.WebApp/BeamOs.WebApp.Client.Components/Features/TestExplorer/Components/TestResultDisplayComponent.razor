@using BeamOs.Tests.TestRunner
@inherits FluxorComponent

<div class="min-h-0 max-h-fit grow overflow-scroll point-events-auto">
    @if (@AssertionResultArray is not null)
    {
        <AssertionResultVectorView AssertionResultArray="@AssertionResultArray" ComparedValueName="@ComparedValueName" />
    }
    else if (@AssertionResultMatrix is not null)
    {
        <AssertionResultMatrixView AssertionResultMatrix="@AssertionResultMatrix" ComparedValueName="@ComparedValueName" />
    }
</div>

@code {
    [Inject]
    private IState<TestExplorerState> TestExplorerState { get; init; }

    private bool isLoadingAssertionResults;
    private string? ComparedValueName { get; set; }
    private AssertionResult<double[]>? AssertionResultArray { get; set; }
    private AssertionResult<double[,]>? AssertionResultMatrix { get; set; }

    private void ResetAssertionResults()
    {
        this.AssertionResultArray = null;
        this.AssertionResultMatrix = null;
        this.ComparedValueName = null;
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        this.SubscribeToAction<ExecutionTestAction>(_ => this.isLoadingAssertionResults = true);
        this.SubscribeToAction<ExecutionTestActionResult>(arg =>
        {
            // if (arg.TestId != this.TestExplorerState.Value.SelectedTestInfo?.Id)
            // {
            //     return;
            // }

            switch (arg.Result)
            {
                case TestResult2 testResult2:
                    this.ResetAssertionResults();
                    this.ComparedValueName = testResult2.ComparedValueName;
                    if (
                        testResult2.CalculatedValue is double[] calDoubArrVal
                        && testResult2.ExpectedValue is double[] expDoubArrVal)
                    {
                        this.AssertionResultArray = new(
                            expDoubArrVal,
                            calDoubArrVal
                        );
                    }
                    else if (
                        testResult2.CalculatedValue is double[,] calDoubMatVal
                        && testResult2.ExpectedValue is double[,] expDoubMatVal)
                    {
                        this.AssertionResultMatrix = new(
                            expDoubMatVal,
                            calDoubMatVal
                        );
                    }
                    break;
                case TestResult<double[]> testResultDoubleArray:
                    this.ResetAssertionResults();
                    this.AssertionResultArray = new(
                        testResultDoubleArray.ExpectedValue,
                        testResultDoubleArray.CalculatedValue
                    );
                    this.ComparedValueName = testResultDoubleArray.ComparedValueName;
                    break;
                case TestResult<double[,]> testResultDoubleMatrix:
                    this.ResetAssertionResults();
                    this.AssertionResultMatrix = new(
                        testResultDoubleMatrix.ExpectedValue,
                        testResultDoubleMatrix.CalculatedValue
                    );
                    this.ComparedValueName = testResultDoubleMatrix.ComparedValueName;
                    break;
                default:
                    this.ResetAssertionResults();
                    break;
            }
            this.isLoadingAssertionResults = false;
            this.StateHasChanged();
        });
    }
}
