@using BeamOs.CodeGen.StructuralAnalysisApiClient
@using BeamOs.StructuralAnalysis.Contracts.Common
@using BeamOs.Tests.Common
@using BeamOs.Tests.Runtime.TestRunner
@using BeamOs.WebApp.Components.Features.Editor
@using BeamOs.WebApp.EditorCommands
<MudDrawerHeader>
    <MudText Typo="Typo.h6">Select an Example Problem</MudText>
</MudDrawerHeader>

<MudList T="List<TestInfo>" SelectedValueChanged="OnSelectedExampleProblemChanged">
    @foreach (var testInfoGroup in TestInfoCollector.GetAllTestInfo().GroupBy(t => t.SourceInfo?.SourceType ?? FixtureSourceType.Standalone))
    {
        <MudListItem Icon="@Icons.Material.Filled.Book" Text="@testInfoGroup.Key.ToString()">
            <NestedList>
                @foreach (var testInfoGroupBySourceName in testInfoGroup.GroupBy(t => t.SourceInfo?.SourceName))
                {
                    <MudListItem Icon="@Icons.Material.Outlined.Build" Text="@testInfoGroupBySourceName.Key">
                        <NestedList>
                            @foreach (var testInfoByModelName in testInfoGroup.GroupBy(t => t.SourceInfo?.ModelName))
                        {
                            <MudListItem Icon="@Icons.Material.Outlined.Abc" Text="@testInfoByModelName.Key" Value="@testInfoByModelName.ToList()"></MudListItem>
                        }
                    </NestedList>
                </MudListItem>
                }
            </NestedList>
        </MudListItem>
    }
</MudList>

@code {
    [Parameter]
    public required string CanvasId { get; init; }

    [Inject]
    public IStructuralAnalysisApiClientV1 StructuralAnalysisApiClient { get; init; }

    [Inject]
    public IDispatcher Dispatcher { get; init; }

    [Inject]
    public LoadBeamOsEntityCommandHandler LoadBeamOsEntityCommandHandler { get; init; }

    [Inject]
    public IServiceProvider ServiceProvider { get; init; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        BeamOs.Tests.StructuralAnalysis.Integration.AssemblySetup.StructuralAnalysisApiClient ??= StructuralAnalysisApiClient;
    }

    private async Task OnSelectedExampleProblemChanged(List<TestInfo>? testInfos)
    {
        this.Dispatcher.Dispatch(new ChangeSelectedSourceInfo(testInfos?.FirstOrDefault()?.SourceInfo));

        this.Dispatcher.Dispatch(new ChangeSelectedProblemTests(testInfos));

        void OnAssertedEqual2(object? _, TestResult args)
        {
            this.Dispatcher.Dispatch(new TestResultComputed(args));
        }
        foreach (var test in testInfos ?? [])
        {
            test.OnTestResult += OnAssertedEqual2;
            try
            {
                await test.RunTest(this.ServiceProvider);
            }
            finally
            {
                test.OnTestResult -= OnAssertedEqual2;
            }
        }
    }
}
