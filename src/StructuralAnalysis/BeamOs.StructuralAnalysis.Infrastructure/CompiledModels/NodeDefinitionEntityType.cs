// <auto-generated />
using System;
using System.Reflection;
using BeamOs.Common.Domain.Models;
using BeamOs.StructuralAnalysis.Contracts.Common;
using BeamOs.StructuralAnalysis.Domain.Common;
using BeamOs.StructuralAnalysis.Domain.PhysicalModel.ModelAggregate;
using BeamOs.StructuralAnalysis.Domain.PhysicalModel.NodeAggregate;
using BeamOs.StructuralAnalysis.Infrastructure.Common;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.ValueGeneration;

#pragma warning disable 219, 612, 618
#nullable disable

namespace BeamOs.StructuralAnalysis.Api
{
    [EntityFrameworkInternal]
    public partial class NodeDefinitionEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "BeamOs.StructuralAnalysis.Domain.PhysicalModel.NodeAggregate.NodeDefinition",
                typeof(NodeDefinition),
                baseEntityType,
                discriminatorProperty: "NodeType",
                derivedTypesCount: 2,
                propertyCount: 3,
                navigationCount: 4,
                keyCount: 1);

            var id = runtimeEntityType.AddProperty(
                "Id",
                typeof(NodeId),
                propertyInfo: typeof(BeamOsEntity<NodeId>).GetProperty("Id", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(BeamOsEntity<NodeId>).GetField("<Id>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                valueConverter: new NodeIdConverter());
            id.SetSentinelFromProviderValue(0);

            var modelId = runtimeEntityType.AddProperty(
                "ModelId",
                typeof(ModelId),
                propertyInfo: typeof(BeamOsModelEntity<NodeId>).GetProperty("ModelId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(BeamOsModelEntity<NodeId>).GetField("<ModelId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                afterSaveBehavior: PropertySaveBehavior.Throw,
                valueConverter: new ModelIdConverter());
            modelId.SetSentinelFromProviderValue(new Guid("01995299-f609-70a1-93be-38b20976322e"));

            var nodeType = runtimeEntityType.AddProperty(
                "NodeType",
                typeof(BeamOsObjectType),
                propertyInfo: typeof(NodeDefinition).GetProperty("NodeType", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGeneratorFactory: new DiscriminatorValueGeneratorFactory().Create);
            nodeType.SetSentinelFromProviderValue((byte)0);

            var key = runtimeEntityType.AddKey(
                new[] { id, modelId });
            runtimeEntityType.SetPrimaryKey(key);

            return runtimeEntityType;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:MappingStrategy", "TPH");
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "NodeDefinitions");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
