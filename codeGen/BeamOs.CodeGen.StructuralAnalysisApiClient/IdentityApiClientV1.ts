//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export interface IIdentityApiClientV1 {

    /**
     * @param body (optional) 
     * @return OK
     */
    createApiToken(body: CreateApiTokenRequest | undefined): Promise<ApiTokenResponse>;

    /**
     * @param body (optional) 
     * @return OK
     */
    deleteApiToken(body: string | undefined): Promise<number>;

    /**
     * @return OK
     */
    getUserApiTokens(): Promise<ApiTokenResponse[]>;

    /**
     * @return OK
     */
    getApiUsage(): Promise<ApiUsageResponse>;

    /**
     * @param body (optional) 
     * @return OK
     */
    createUser(body: CreateUserRequest | undefined): Promise<UserResponse>;

    /**
     * @param body (optional) 
     * @return OK
     */
    loginUser(body: LoginRequest | undefined): Promise<AuthResponse>;

    /**
     * @return OK
     */
    loginWithGoogleCode(code: string): Promise<string>;
}


export class ApiTokenResponse implements IApiTokenResponse {
    name!: string;
    createdOn?: Date;
    scopes!: string[];
    value!: string;

    [key: string]: any;

    constructor(data?: IApiTokenResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.scopes = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.name = _data["name"];
            this.createdOn = _data["createdOn"] ? new Date(_data["createdOn"].toString()) : <any>undefined;
            if (Array.isArray(_data["scopes"])) {
                this.scopes = [] as any;
                for (let item of _data["scopes"])
                    this.scopes!.push(item);
            }
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): ApiTokenResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ApiTokenResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["name"] = this.name;
        data["createdOn"] = this.createdOn ? this.createdOn.toISOString() : <any>undefined;
        if (Array.isArray(this.scopes)) {
            data["scopes"] = [];
            for (let item of this.scopes)
                data["scopes"].push(item);
        }
        data["value"] = this.value;
        return data;
    }
}

export interface IApiTokenResponse {
    name: string;
    createdOn?: Date;
    scopes: string[];
    value: string;

    [key: string]: any;
}

export class ApiUsageResponse implements IApiUsageResponse {
    totalCalls!: number;
    totalDurationMs!: number;
    breakdown!: UsageBreakdownResponse[] | undefined;

    [key: string]: any;

    constructor(data?: IApiUsageResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.totalCalls = _data["totalCalls"];
            this.totalDurationMs = _data["totalDurationMs"];
            if (Array.isArray(_data["breakdown"])) {
                this.breakdown = [] as any;
                for (let item of _data["breakdown"])
                    this.breakdown!.push(UsageBreakdownResponse.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ApiUsageResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ApiUsageResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["totalCalls"] = this.totalCalls;
        data["totalDurationMs"] = this.totalDurationMs;
        if (Array.isArray(this.breakdown)) {
            data["breakdown"] = [];
            for (let item of this.breakdown)
                data["breakdown"].push(item ? item.toJSON() : <any>undefined);
        }
        return data;
    }
}

export interface IApiUsageResponse {
    totalCalls: number;
    totalDurationMs: number;
    breakdown: UsageBreakdownResponse[] | undefined;

    [key: string]: any;
}

export class AuthResponse implements IAuthResponse {
    accessToken!: string;
    refreshToken!: string;

    [key: string]: any;

    constructor(data?: IAuthResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.accessToken = _data["accessToken"];
            this.refreshToken = _data["refreshToken"];
        }
    }

    static fromJS(data: any): AuthResponse {
        data = typeof data === 'object' ? data : {};
        let result = new AuthResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["accessToken"] = this.accessToken;
        data["refreshToken"] = this.refreshToken;
        return data;
    }
}

export interface IAuthResponse {
    accessToken: string;
    refreshToken: string;

    [key: string]: any;
}

export class CreateApiTokenRequest implements ICreateApiTokenRequest {
    name!: string;
    scopes!: string[];

    [key: string]: any;

    constructor(data?: ICreateApiTokenRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.scopes = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.name = _data["name"];
            if (Array.isArray(_data["scopes"])) {
                this.scopes = [] as any;
                for (let item of _data["scopes"])
                    this.scopes!.push(item);
            }
        }
    }

    static fromJS(data: any): CreateApiTokenRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CreateApiTokenRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["name"] = this.name;
        if (Array.isArray(this.scopes)) {
            data["scopes"] = [];
            for (let item of this.scopes)
                data["scopes"].push(item);
        }
        return data;
    }
}

export interface ICreateApiTokenRequest {
    name: string;
    scopes: string[];

    [key: string]: any;
}

export class CreateUserRequest implements ICreateUserRequest {
    email!: string;
    password!: string;

    [key: string]: any;

    constructor(data?: ICreateUserRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.email = _data["email"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): CreateUserRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CreateUserRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["email"] = this.email;
        data["password"] = this.password;
        return data;
    }
}

export interface ICreateUserRequest {
    email: string;
    password: string;

    [key: string]: any;
}

export class LoginRequest implements ILoginRequest {
    email!: string;
    password!: string;

    [key: string]: any;

    constructor(data?: ILoginRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.email = _data["email"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): LoginRequest {
        data = typeof data === 'object' ? data : {};
        let result = new LoginRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["email"] = this.email;
        data["password"] = this.password;
        return data;
    }
}

export interface ILoginRequest {
    email: string;
    password: string;

    [key: string]: any;
}

export class UsageBreakdownResponse implements IUsageBreakdownResponse {
    actorName!: string;
    numCalls!: number;
    totalDurationMs!: number;
    isToken?: boolean;

    [key: string]: any;

    constructor(data?: IUsageBreakdownResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.actorName = _data["actorName"];
            this.numCalls = _data["numCalls"];
            this.totalDurationMs = _data["totalDurationMs"];
            this.isToken = _data["isToken"];
        }
    }

    static fromJS(data: any): UsageBreakdownResponse {
        data = typeof data === 'object' ? data : {};
        let result = new UsageBreakdownResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["actorName"] = this.actorName;
        data["numCalls"] = this.numCalls;
        data["totalDurationMs"] = this.totalDurationMs;
        data["isToken"] = this.isToken;
        return data;
    }
}

export interface IUsageBreakdownResponse {
    actorName: string;
    numCalls: number;
    totalDurationMs: number;
    isToken?: boolean;

    [key: string]: any;
}

export class UserResponse implements IUserResponse {
    email!: string;

    [key: string]: any;

    constructor(data?: IUserResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.email = _data["email"];
        }
    }

    static fromJS(data: any): UserResponse {
        data = typeof data === 'object' ? data : {};
        let result = new UserResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["email"] = this.email;
        return data;
    }
}

export interface IUserResponse {
    email: string;

    [key: string]: any;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}