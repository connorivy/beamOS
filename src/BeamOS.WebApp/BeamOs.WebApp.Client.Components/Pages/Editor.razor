@page "/editor"
@using BeamOs.WebApp.Client.Components.Caches
@using BeamOs.WebApp.Client.Components.Components.Editor
@using BeamOs.WebApp.Client.Components.Components.Editor.Commands
@using BeamOs.WebApp.Client.Components.Features.Common.Flux
@using BeamOs.WebApp.Client.Components.Repositories
@using BeamOs.CodeGen.Apis.EditorApi
@using BeamOs.ApiClient
@using BeamOs.Contracts.AnalyticalResults.Model
@using BeamOs.Contracts.Common
@using BeamOs.Contracts.PhysicalModel.Element1d
@using BeamOs.Contracts.PhysicalModel.Model
@using BeamOs.Contracts.PhysicalModel.Node
@using BeamOs.Contracts.PhysicalModel.PointLoad
@using Fluxor.Blazor.Web.Components
@using static BeamOs.WebApp.Client.Components.Components.Editor.EditorComponent
@using BeamOs.WebApp.Client.Components.Components.Editor.CommandHandlers;

<PageTitle>Editor</PageTitle>

<MudDrawerContainer Class="h-full w-full">
    <MudTextField @bind-Value="modelIdInput" Label="ModelId" Variant="Variant.Filled"></MudTextField>
    <MudButton OnClick="LoadModel">Load Model</MudButton>
    <MudButton OnClick="RunAnalysis">Run DSM</MudButton>
    <MudButton OnClick="LoadShearDiagrams">Show Shear Diagrams</MudButton>
    <MudButton OnClick="LoadMomentDiagrams">Show Moment Diagrams</MudButton>
    <MudButton OnClick="ShowReactions">Show Reactions</MudButton>
    @if (editorComponent is not null)
    {
        <MudPopover Open="@(editorComponent.EditorComponentState.SelectedObjects.Length > 0)" Fixed="true" Class="w-80 m-2">
            <SelectionInfoComponent SelectedObjects="@editorComponent.EditorComponentState.SelectedObjects" ModelId="@editorComponent.EditorComponentState.LoadedModelId"></SelectionInfoComponent>
        </MudPopover>
    }
    <EditorComponent Class="h-full" @ref="editorComponent"></EditorComponent>
</MudDrawerContainer>

@code {
    [Inject]
    private IApiAlphaClient ApiAlphaClient { get; init; }

    [Inject]
    private AddEntityContractToEditorCommandHandler AddEntityContractToEditorCommandHandler { get; init; }

    [Inject]
    private AllStructuralAnalysisModelCaches allStructuralAnalysisModelCaches { get; init; }

    public string modelIdInput { get; set; }
    private EditorComponent editorComponent;

    protected override void OnInitialized()
    {
        EventEmitter.VisibleStateChanged += this.EventEmitter_VisibleStateChanged;
        base.OnInitialized();
    }

    private void EventEmitter_VisibleStateChanged(object? sender, EventArgs _) =>
        InvokeAsync(StateHasChanged);

    private async Task LoadShearDiagrams()
    {
        var modelResults = await this.ApiAlphaClient.GetModelResultsAsync(editorComponent.EditorComponentState.LoadedModelId);
        await this.editorComponent.EditorApiAlpha.SetModelResultsAsync(modelResults);

        var loadedElement1dIds = this.allStructuralAnalysisModelCaches.GetByModelId(editorComponent.EditorComponentState.LoadedModelId)
        .GetEntityIdsOfType<Element1DResponse>();

        foreach (var element1dId in loadedElement1dIds)
        {
            var shearDiagram = await ApiAlphaClient.GetShearDiagramAsync(element1dId);
            await AddEntityContractToEditorCommandHandler.ExecuteAsync(new AddEntityToEditorCommand(this.editorComponent.ElementId, shearDiagram));
        }
    }

    private async Task LoadMomentDiagrams()
    {
        var modelResults = await this.ApiAlphaClient.GetModelResultsAsync(editorComponent.EditorComponentState.LoadedModelId);
        await this.editorComponent.EditorApiAlpha.SetModelResultsAsync(modelResults);

        var loadedElement1dIds = this.allStructuralAnalysisModelCaches.GetByModelId(editorComponent.EditorComponentState.LoadedModelId)
        .GetEntityIdsOfType<Element1DResponse>();

        foreach (var element1dId in loadedElement1dIds)
        {
            var shearDiagram = await ApiAlphaClient.GetMomentDiagramAsync(element1dId);
            await AddEntityContractToEditorCommandHandler.ExecuteAsync(new AddEntityToEditorCommand(this.editorComponent.ElementId, shearDiagram));
        }
    }

    private async Task LoadModel()
    {
        await this.editorComponent.LoadModel(modelIdInput);
    }

    private async Task RunAnalysis()
    {
        await ApiAlphaClient.RunDirectStiffnessMethodAsync(editorComponent.EditorComponentState.LoadedModelId);
    }

    private async Task ShowReactions()
    {
        var loadedNodeIds = this.allStructuralAnalysisModelCaches.GetByModelId(editorComponent.EditorComponentState.LoadedModelId)
        .GetEntityIdsOfType<NodeResponse>();

        double forcesTotal = 0;
        foreach (var nodeId in loadedNodeIds)
        {
            var forces = await this.ApiAlphaClient.GetSingleNodeResultAsync(nodeId);
            foreach (var force in forces)
            {
                forcesTotal += force.Forces.ForceAlongY.Value;
                if (Math.Abs(force.Forces.ForceAlongY.Value) < .0001)
                {
                    continue;
                }

                await this.AddEntityContractToEditorCommandHandler.ExecuteAsync(new AddEntityToEditorCommand(this.editorComponent.ElementId,
                    new PointLoadResponse(Guid.NewGuid().ToString(),
                    this.editorComponent.EditorComponentState.LoadedModelId,
                    nodeId,
                    force.Forces.ForceAlongY,
                    new(0, 1, 0))));
            }
        }
    }
}
