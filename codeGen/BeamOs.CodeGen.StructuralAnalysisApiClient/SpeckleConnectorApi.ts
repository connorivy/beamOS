//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export interface ISpeckleConnectorApi {

    /**
     * @param body (optional) 
     * @return OK
     */
    speckleRecieveOperation(modelId: string, body: SpeckleReceiveParameters | null | undefined): Promise<ResultOfModelProposalResponse>;
}

export class SpeckleConnectorApi implements ISpeckleConnectorApi {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "https://localhost:7060";
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    speckleRecieveOperation(modelId: string, body: SpeckleReceiveParameters | null | undefined): Promise<ResultOfModelProposalResponse> {
        let url_ = this.baseUrl + "/api/speckle-receive?";
        if (modelId === undefined || modelId === null)
            throw new Error("The parameter 'modelId' must be defined and cannot be null.");
        else
            url_ += "ModelId=" + encodeURIComponent("" + modelId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSpeckleRecieveOperation(_response);
        });
    }

    protected processSpeckleRecieveOperation(response: Response): Promise<ResultOfModelProposalResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultOfModelProposalResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultOfModelProposalResponse>(null as any);
    }
}

export class Angle implements IAngle {
    value!: number;
    unit!: number;

    [key: string]: any;

    constructor(data?: IAngle) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.value = _data["value"];
            this.unit = _data["unit"];
        }
    }

    static fromJS(data: any): Angle {
        data = typeof data === 'object' ? data : {};
        let result = new Angle();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["value"] = this.value;
        data["unit"] = this.unit;
        return data;
    }
}

export interface IAngle {
    value: number;
    unit: number;

    [key: string]: any;
}

export class BeamOsError implements IBeamOsError {
    code!: string;
    description!: string;
    type!: number;
    numericType?: number;
    metadata!: { [key: string]: string; } | undefined;

    [key: string]: any;

    constructor(data?: IBeamOsError) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.code = _data["code"];
            this.description = _data["description"];
            this.type = _data["type"];
            this.numericType = _data["numericType"];
            if (_data["metadata"]) {
                this.metadata = {} as any;
                for (let key in _data["metadata"]) {
                    if (_data["metadata"].hasOwnProperty(key))
                        (<any>this.metadata)![key] = _data["metadata"][key];
                }
            }
        }
    }

    static fromJS(data: any): BeamOsError {
        data = typeof data === 'object' ? data : {};
        let result = new BeamOsError();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["code"] = this.code;
        data["description"] = this.description;
        data["type"] = this.type;
        data["numericType"] = this.numericType;
        if (this.metadata) {
            data["metadata"] = {};
            for (let key in this.metadata) {
                if (this.metadata.hasOwnProperty(key))
                    (<any>data["metadata"])[key] = (<any>this.metadata)[key];
            }
        }
        return data;
    }
}

export interface IBeamOsError {
    code: string;
    description: string;
    type: number;
    numericType?: number;
    metadata: { [key: string]: string; } | undefined;

    [key: string]: any;
}

export class CreateElement1dProposalResponse implements ICreateElement1dProposalResponse {
    id?: number;
    startNodeId!: ProposedID;
    endNodeId!: ProposedID;
    materialId!: ProposedID;
    sectionProfileId!: ProposedID;
    sectionProfileRotation?: NullableOfAngle | undefined;
    metadata?: { [key: string]: string; } | undefined;

    [key: string]: any;

    constructor(data?: ICreateElement1dProposalResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.startNodeId = new ProposedID();
            this.endNodeId = new ProposedID();
            this.materialId = new ProposedID();
            this.sectionProfileId = new ProposedID();
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.startNodeId = _data["startNodeId"] ? ProposedID.fromJS(_data["startNodeId"]) : new ProposedID();
            this.endNodeId = _data["endNodeId"] ? ProposedID.fromJS(_data["endNodeId"]) : new ProposedID();
            this.materialId = _data["materialId"] ? ProposedID.fromJS(_data["materialId"]) : new ProposedID();
            this.sectionProfileId = _data["sectionProfileId"] ? ProposedID.fromJS(_data["sectionProfileId"]) : new ProposedID();
            this.sectionProfileRotation = _data["sectionProfileRotation"] ? NullableOfAngle.fromJS(_data["sectionProfileRotation"]) : <any>undefined;
            if (_data["metadata"]) {
                this.metadata = {} as any;
                for (let key in _data["metadata"]) {
                    if (_data["metadata"].hasOwnProperty(key))
                        (<any>this.metadata)![key] = _data["metadata"][key];
                }
            }
        }
    }

    static fromJS(data: any): CreateElement1dProposalResponse {
        data = typeof data === 'object' ? data : {};
        let result = new CreateElement1dProposalResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["startNodeId"] = this.startNodeId ? this.startNodeId.toJSON() : <any>undefined;
        data["endNodeId"] = this.endNodeId ? this.endNodeId.toJSON() : <any>undefined;
        data["materialId"] = this.materialId ? this.materialId.toJSON() : <any>undefined;
        data["sectionProfileId"] = this.sectionProfileId ? this.sectionProfileId.toJSON() : <any>undefined;
        data["sectionProfileRotation"] = this.sectionProfileRotation ? this.sectionProfileRotation.toJSON() : <any>undefined;
        if (this.metadata) {
            data["metadata"] = {};
            for (let key in this.metadata) {
                if (this.metadata.hasOwnProperty(key))
                    (<any>data["metadata"])[key] = (<any>this.metadata)[key];
            }
        }
        return data;
    }
}

export interface ICreateElement1dProposalResponse {
    id?: number;
    startNodeId: ProposedID;
    endNodeId: ProposedID;
    materialId: ProposedID;
    sectionProfileId: ProposedID;
    sectionProfileRotation?: NullableOfAngle | undefined;
    metadata?: { [key: string]: string; } | undefined;

    [key: string]: any;
}

export class CreateNodeProposalResponse implements ICreateNodeProposalResponse {
    id!: number;
    locationPoint!: Point;
    restraint!: Restraint;
    metadata?: { [key: string]: string; } | undefined;

    [key: string]: any;

    constructor(data?: ICreateNodeProposalResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.locationPoint = new Point();
            this.restraint = new Restraint();
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.locationPoint = _data["locationPoint"] ? Point.fromJS(_data["locationPoint"]) : new Point();
            this.restraint = _data["restraint"] ? Restraint.fromJS(_data["restraint"]) : new Restraint();
            if (_data["metadata"]) {
                this.metadata = {} as any;
                for (let key in _data["metadata"]) {
                    if (_data["metadata"].hasOwnProperty(key))
                        (<any>this.metadata)![key] = _data["metadata"][key];
                }
            }
        }
    }

    static fromJS(data: any): CreateNodeProposalResponse {
        data = typeof data === 'object' ? data : {};
        let result = new CreateNodeProposalResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["locationPoint"] = this.locationPoint ? this.locationPoint.toJSON() : <any>undefined;
        data["restraint"] = this.restraint ? this.restraint.toJSON() : <any>undefined;
        if (this.metadata) {
            data["metadata"] = {};
            for (let key in this.metadata) {
                if (this.metadata.hasOwnProperty(key))
                    (<any>data["metadata"])[key] = (<any>this.metadata)[key];
            }
        }
        return data;
    }
}

export interface ICreateNodeProposalResponse {
    id: number;
    locationPoint: Point;
    restraint: Restraint;
    metadata?: { [key: string]: string; } | undefined;

    [key: string]: any;
}

export class DeleteModelEntityProposal implements IDeleteModelEntityProposal {
    id!: number;
    modelEntityId!: number;
    objectType!: number;

    [key: string]: any;

    constructor(data?: IDeleteModelEntityProposal) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.modelEntityId = _data["modelEntityId"];
            this.objectType = _data["objectType"];
        }
    }

    static fromJS(data: any): DeleteModelEntityProposal {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteModelEntityProposal();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["modelEntityId"] = this.modelEntityId;
        data["objectType"] = this.objectType;
        return data;
    }
}

export interface IDeleteModelEntityProposal {
    id: number;
    modelEntityId: number;
    objectType: number;

    [key: string]: any;
}

export class DisplacementsResponse implements IDisplacementsResponse {
    displacementAlongX!: Length;
    displacementAlongY!: Length;
    displacementAlongZ!: Length;
    rotationAboutX!: Angle;
    rotationAboutY!: Angle;
    rotationAboutZ!: Angle;

    [key: string]: any;

    constructor(data?: IDisplacementsResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.displacementAlongX = new Length();
            this.displacementAlongY = new Length();
            this.displacementAlongZ = new Length();
            this.rotationAboutX = new Angle();
            this.rotationAboutY = new Angle();
            this.rotationAboutZ = new Angle();
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.displacementAlongX = _data["displacementAlongX"] ? Length.fromJS(_data["displacementAlongX"]) : new Length();
            this.displacementAlongY = _data["displacementAlongY"] ? Length.fromJS(_data["displacementAlongY"]) : new Length();
            this.displacementAlongZ = _data["displacementAlongZ"] ? Length.fromJS(_data["displacementAlongZ"]) : new Length();
            this.rotationAboutX = _data["rotationAboutX"] ? Angle.fromJS(_data["rotationAboutX"]) : new Angle();
            this.rotationAboutY = _data["rotationAboutY"] ? Angle.fromJS(_data["rotationAboutY"]) : new Angle();
            this.rotationAboutZ = _data["rotationAboutZ"] ? Angle.fromJS(_data["rotationAboutZ"]) : new Angle();
        }
    }

    static fromJS(data: any): DisplacementsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new DisplacementsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["displacementAlongX"] = this.displacementAlongX ? this.displacementAlongX.toJSON() : <any>undefined;
        data["displacementAlongY"] = this.displacementAlongY ? this.displacementAlongY.toJSON() : <any>undefined;
        data["displacementAlongZ"] = this.displacementAlongZ ? this.displacementAlongZ.toJSON() : <any>undefined;
        data["rotationAboutX"] = this.rotationAboutX ? this.rotationAboutX.toJSON() : <any>undefined;
        data["rotationAboutY"] = this.rotationAboutY ? this.rotationAboutY.toJSON() : <any>undefined;
        data["rotationAboutZ"] = this.rotationAboutZ ? this.rotationAboutZ.toJSON() : <any>undefined;
        return data;
    }
}

export interface IDisplacementsResponse {
    displacementAlongX: Length;
    displacementAlongY: Length;
    displacementAlongZ: Length;
    rotationAboutX: Angle;
    rotationAboutY: Angle;
    rotationAboutZ: Angle;

    [key: string]: any;
}

export class Element1dResultResponse implements IElement1dResultResponse {
    modelId!: string;
    resultSetId!: number;
    element1dId!: number;
    minShear!: Length;
    maxShear!: Length;
    minMoment!: Torque;
    maxMoment!: Torque;
    minDisplacement!: Length;
    maxDisplacement!: Length;

    [key: string]: any;

    constructor(data?: IElement1dResultResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.minShear = new Length();
            this.maxShear = new Length();
            this.minMoment = new Torque();
            this.maxMoment = new Torque();
            this.minDisplacement = new Length();
            this.maxDisplacement = new Length();
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.modelId = _data["modelId"];
            this.resultSetId = _data["resultSetId"];
            this.element1dId = _data["element1dId"];
            this.minShear = _data["minShear"] ? Length.fromJS(_data["minShear"]) : new Length();
            this.maxShear = _data["maxShear"] ? Length.fromJS(_data["maxShear"]) : new Length();
            this.minMoment = _data["minMoment"] ? Torque.fromJS(_data["minMoment"]) : new Torque();
            this.maxMoment = _data["maxMoment"] ? Torque.fromJS(_data["maxMoment"]) : new Torque();
            this.minDisplacement = _data["minDisplacement"] ? Length.fromJS(_data["minDisplacement"]) : new Length();
            this.maxDisplacement = _data["maxDisplacement"] ? Length.fromJS(_data["maxDisplacement"]) : new Length();
        }
    }

    static fromJS(data: any): Element1dResultResponse {
        data = typeof data === 'object' ? data : {};
        let result = new Element1dResultResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["modelId"] = this.modelId;
        data["resultSetId"] = this.resultSetId;
        data["element1dId"] = this.element1dId;
        data["minShear"] = this.minShear ? this.minShear.toJSON() : <any>undefined;
        data["maxShear"] = this.maxShear ? this.maxShear.toJSON() : <any>undefined;
        data["minMoment"] = this.minMoment ? this.minMoment.toJSON() : <any>undefined;
        data["maxMoment"] = this.maxMoment ? this.maxMoment.toJSON() : <any>undefined;
        data["minDisplacement"] = this.minDisplacement ? this.minDisplacement.toJSON() : <any>undefined;
        data["maxDisplacement"] = this.maxDisplacement ? this.maxDisplacement.toJSON() : <any>undefined;
        return data;
    }
}

export interface IElement1dResultResponse {
    modelId: string;
    resultSetId: number;
    element1dId: number;
    minShear: Length;
    maxShear: Length;
    minMoment: Torque;
    maxMoment: Torque;
    minDisplacement: Length;
    maxDisplacement: Length;

    [key: string]: any;
}

export class Force implements IForce {
    value!: number;
    unit!: number;

    [key: string]: any;

    constructor(data?: IForce) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.value = _data["value"];
            this.unit = _data["unit"];
        }
    }

    static fromJS(data: any): Force {
        data = typeof data === 'object' ? data : {};
        let result = new Force();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["value"] = this.value;
        data["unit"] = this.unit;
        return data;
    }
}

export interface IForce {
    value: number;
    unit: number;

    [key: string]: any;
}

export class ForcesResponse implements IForcesResponse {
    forceAlongX!: Force;
    forceAlongY!: Force;
    forceAlongZ!: Force;
    momentAboutX!: Torque;
    momentAboutY!: Torque;
    momentAboutZ!: Torque;

    [key: string]: any;

    constructor(data?: IForcesResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.forceAlongX = new Force();
            this.forceAlongY = new Force();
            this.forceAlongZ = new Force();
            this.momentAboutX = new Torque();
            this.momentAboutY = new Torque();
            this.momentAboutZ = new Torque();
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.forceAlongX = _data["forceAlongX"] ? Force.fromJS(_data["forceAlongX"]) : new Force();
            this.forceAlongY = _data["forceAlongY"] ? Force.fromJS(_data["forceAlongY"]) : new Force();
            this.forceAlongZ = _data["forceAlongZ"] ? Force.fromJS(_data["forceAlongZ"]) : new Force();
            this.momentAboutX = _data["momentAboutX"] ? Torque.fromJS(_data["momentAboutX"]) : new Torque();
            this.momentAboutY = _data["momentAboutY"] ? Torque.fromJS(_data["momentAboutY"]) : new Torque();
            this.momentAboutZ = _data["momentAboutZ"] ? Torque.fromJS(_data["momentAboutZ"]) : new Torque();
        }
    }

    static fromJS(data: any): ForcesResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ForcesResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["forceAlongX"] = this.forceAlongX ? this.forceAlongX.toJSON() : <any>undefined;
        data["forceAlongY"] = this.forceAlongY ? this.forceAlongY.toJSON() : <any>undefined;
        data["forceAlongZ"] = this.forceAlongZ ? this.forceAlongZ.toJSON() : <any>undefined;
        data["momentAboutX"] = this.momentAboutX ? this.momentAboutX.toJSON() : <any>undefined;
        data["momentAboutY"] = this.momentAboutY ? this.momentAboutY.toJSON() : <any>undefined;
        data["momentAboutZ"] = this.momentAboutZ ? this.momentAboutZ.toJSON() : <any>undefined;
        return data;
    }
}

export interface IForcesResponse {
    forceAlongX: Force;
    forceAlongY: Force;
    forceAlongZ: Force;
    momentAboutX: Torque;
    momentAboutY: Torque;
    momentAboutZ: Torque;

    [key: string]: any;
}

export class Length implements ILength {
    value!: number;
    unit!: number;

    [key: string]: any;

    constructor(data?: ILength) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.value = _data["value"];
            this.unit = _data["unit"];
        }
    }

    static fromJS(data: any): Length {
        data = typeof data === 'object' ? data : {};
        let result = new Length();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["value"] = this.value;
        data["unit"] = this.unit;
        return data;
    }
}

export interface ILength {
    value: number;
    unit: number;

    [key: string]: any;
}

export class LoadCase implements ILoadCase {
    id!: number;
    name!: string;

    [key: string]: any;

    constructor(data?: ILoadCase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): LoadCase {
        data = typeof data === 'object' ? data : {};
        let result = new LoadCase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["name"] = this.name;
        return data;
    }
}

export interface ILoadCase {
    id: number;
    name: string;

    [key: string]: any;
}

export class LoadCombination implements ILoadCombination {
    id!: number;
    loadCaseFactors!: { [key: string]: number; };

    [key: string]: any;

    constructor(data?: ILoadCombination) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.loadCaseFactors = {};
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            if (_data["loadCaseFactors"]) {
                this.loadCaseFactors = {} as any;
                for (let key in _data["loadCaseFactors"]) {
                    if (_data["loadCaseFactors"].hasOwnProperty(key))
                        (<any>this.loadCaseFactors)![key] = _data["loadCaseFactors"][key];
                }
            }
        }
    }

    static fromJS(data: any): LoadCombination {
        data = typeof data === 'object' ? data : {};
        let result = new LoadCombination();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        if (this.loadCaseFactors) {
            data["loadCaseFactors"] = {};
            for (let key in this.loadCaseFactors) {
                if (this.loadCaseFactors.hasOwnProperty(key))
                    (<any>data["loadCaseFactors"])[key] = (<any>this.loadCaseFactors)[key];
            }
        }
        return data;
    }
}

export interface ILoadCombination {
    id: number;
    loadCaseFactors: { [key: string]: number; };

    [key: string]: any;
}

export class ModelProposalInfo implements IModelProposalInfo {
    id!: number;
    lastModified!: Date;
    description?: string | undefined;

    [key: string]: any;

    constructor(data?: IModelProposalInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.lastModified = _data["lastModified"] ? new Date(_data["lastModified"].toString()) : <any>undefined;
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): ModelProposalInfo {
        data = typeof data === 'object' ? data : {};
        let result = new ModelProposalInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["lastModified"] = this.lastModified ? this.lastModified.toISOString() : <any>undefined;
        data["description"] = this.description;
        return data;
    }
}

export interface IModelProposalInfo {
    id: number;
    lastModified: Date;
    description?: string | undefined;

    [key: string]: any;
}

export class ModelProposalResponse implements IModelProposalResponse {
    id!: number;
    lastModified!: Date;
    modelProposal?: ModelProposalInfo | undefined;
    createNodeProposals?: CreateNodeProposalResponse[] | undefined;
    modifyNodeProposals?: ModifyNodeProposalResponse[] | undefined;
    createElement1dProposals?: CreateElement1dProposalResponse[] | undefined;
    modifyElement1dProposals?: ModifyElement1dProposalResponse[] | undefined;
    materialProposals?: PutMaterialRequest[] | undefined;
    sectionProfileProposals?: PutSectionProfileRequest[] | undefined;
    sectionProfileFromLibraryProposals?: SectionProfileFromLibrary[] | undefined;
    pointLoadProposals?: PointLoad[] | undefined;
    momentLoadProposals?: MomentLoad[] | undefined;
    resultSetProposals?: ResultSet[] | undefined;
    loadCaseProposals?: LoadCase[] | undefined;
    loadCombinationProposals?: LoadCombination[] | undefined;
    proposalIssues?: ProposalIssue[] | undefined;
    deleteModelEntityProposals?: DeleteModelEntityProposal[] | undefined;

    [key: string]: any;

    constructor(data?: IModelProposalResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.lastModified = _data["lastModified"] ? new Date(_data["lastModified"].toString()) : <any>undefined;
            this.modelProposal = _data["modelProposal"] ? ModelProposalInfo.fromJS(_data["modelProposal"]) : <any>undefined;
            if (Array.isArray(_data["createNodeProposals"])) {
                this.createNodeProposals = [] as any;
                for (let item of _data["createNodeProposals"])
                    this.createNodeProposals!.push(CreateNodeProposalResponse.fromJS(item));
            }
            if (Array.isArray(_data["modifyNodeProposals"])) {
                this.modifyNodeProposals = [] as any;
                for (let item of _data["modifyNodeProposals"])
                    this.modifyNodeProposals!.push(ModifyNodeProposalResponse.fromJS(item));
            }
            if (Array.isArray(_data["createElement1dProposals"])) {
                this.createElement1dProposals = [] as any;
                for (let item of _data["createElement1dProposals"])
                    this.createElement1dProposals!.push(CreateElement1dProposalResponse.fromJS(item));
            }
            if (Array.isArray(_data["modifyElement1dProposals"])) {
                this.modifyElement1dProposals = [] as any;
                for (let item of _data["modifyElement1dProposals"])
                    this.modifyElement1dProposals!.push(ModifyElement1dProposalResponse.fromJS(item));
            }
            if (Array.isArray(_data["materialProposals"])) {
                this.materialProposals = [] as any;
                for (let item of _data["materialProposals"])
                    this.materialProposals!.push(PutMaterialRequest.fromJS(item));
            }
            if (Array.isArray(_data["sectionProfileProposals"])) {
                this.sectionProfileProposals = [] as any;
                for (let item of _data["sectionProfileProposals"])
                    this.sectionProfileProposals!.push(PutSectionProfileRequest.fromJS(item));
            }
            if (Array.isArray(_data["sectionProfileFromLibraryProposals"])) {
                this.sectionProfileFromLibraryProposals = [] as any;
                for (let item of _data["sectionProfileFromLibraryProposals"])
                    this.sectionProfileFromLibraryProposals!.push(SectionProfileFromLibrary.fromJS(item));
            }
            if (Array.isArray(_data["pointLoadProposals"])) {
                this.pointLoadProposals = [] as any;
                for (let item of _data["pointLoadProposals"])
                    this.pointLoadProposals!.push(PointLoad.fromJS(item));
            }
            if (Array.isArray(_data["momentLoadProposals"])) {
                this.momentLoadProposals = [] as any;
                for (let item of _data["momentLoadProposals"])
                    this.momentLoadProposals!.push(MomentLoad.fromJS(item));
            }
            if (Array.isArray(_data["resultSetProposals"])) {
                this.resultSetProposals = [] as any;
                for (let item of _data["resultSetProposals"])
                    this.resultSetProposals!.push(ResultSet.fromJS(item));
            }
            if (Array.isArray(_data["loadCaseProposals"])) {
                this.loadCaseProposals = [] as any;
                for (let item of _data["loadCaseProposals"])
                    this.loadCaseProposals!.push(LoadCase.fromJS(item));
            }
            if (Array.isArray(_data["loadCombinationProposals"])) {
                this.loadCombinationProposals = [] as any;
                for (let item of _data["loadCombinationProposals"])
                    this.loadCombinationProposals!.push(LoadCombination.fromJS(item));
            }
            if (Array.isArray(_data["proposalIssues"])) {
                this.proposalIssues = [] as any;
                for (let item of _data["proposalIssues"])
                    this.proposalIssues!.push(ProposalIssue.fromJS(item));
            }
            if (Array.isArray(_data["deleteModelEntityProposals"])) {
                this.deleteModelEntityProposals = [] as any;
                for (let item of _data["deleteModelEntityProposals"])
                    this.deleteModelEntityProposals!.push(DeleteModelEntityProposal.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ModelProposalResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ModelProposalResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["lastModified"] = this.lastModified ? this.lastModified.toISOString() : <any>undefined;
        data["modelProposal"] = this.modelProposal ? this.modelProposal.toJSON() : <any>undefined;
        if (Array.isArray(this.createNodeProposals)) {
            data["createNodeProposals"] = [];
            for (let item of this.createNodeProposals)
                data["createNodeProposals"].push(item ? item.toJSON() : <any>undefined);
        }
        if (Array.isArray(this.modifyNodeProposals)) {
            data["modifyNodeProposals"] = [];
            for (let item of this.modifyNodeProposals)
                data["modifyNodeProposals"].push(item ? item.toJSON() : <any>undefined);
        }
        if (Array.isArray(this.createElement1dProposals)) {
            data["createElement1dProposals"] = [];
            for (let item of this.createElement1dProposals)
                data["createElement1dProposals"].push(item ? item.toJSON() : <any>undefined);
        }
        if (Array.isArray(this.modifyElement1dProposals)) {
            data["modifyElement1dProposals"] = [];
            for (let item of this.modifyElement1dProposals)
                data["modifyElement1dProposals"].push(item ? item.toJSON() : <any>undefined);
        }
        if (Array.isArray(this.materialProposals)) {
            data["materialProposals"] = [];
            for (let item of this.materialProposals)
                data["materialProposals"].push(item ? item.toJSON() : <any>undefined);
        }
        if (Array.isArray(this.sectionProfileProposals)) {
            data["sectionProfileProposals"] = [];
            for (let item of this.sectionProfileProposals)
                data["sectionProfileProposals"].push(item ? item.toJSON() : <any>undefined);
        }
        if (Array.isArray(this.sectionProfileFromLibraryProposals)) {
            data["sectionProfileFromLibraryProposals"] = [];
            for (let item of this.sectionProfileFromLibraryProposals)
                data["sectionProfileFromLibraryProposals"].push(item ? item.toJSON() : <any>undefined);
        }
        if (Array.isArray(this.pointLoadProposals)) {
            data["pointLoadProposals"] = [];
            for (let item of this.pointLoadProposals)
                data["pointLoadProposals"].push(item ? item.toJSON() : <any>undefined);
        }
        if (Array.isArray(this.momentLoadProposals)) {
            data["momentLoadProposals"] = [];
            for (let item of this.momentLoadProposals)
                data["momentLoadProposals"].push(item ? item.toJSON() : <any>undefined);
        }
        if (Array.isArray(this.resultSetProposals)) {
            data["resultSetProposals"] = [];
            for (let item of this.resultSetProposals)
                data["resultSetProposals"].push(item ? item.toJSON() : <any>undefined);
        }
        if (Array.isArray(this.loadCaseProposals)) {
            data["loadCaseProposals"] = [];
            for (let item of this.loadCaseProposals)
                data["loadCaseProposals"].push(item ? item.toJSON() : <any>undefined);
        }
        if (Array.isArray(this.loadCombinationProposals)) {
            data["loadCombinationProposals"] = [];
            for (let item of this.loadCombinationProposals)
                data["loadCombinationProposals"].push(item ? item.toJSON() : <any>undefined);
        }
        if (Array.isArray(this.proposalIssues)) {
            data["proposalIssues"] = [];
            for (let item of this.proposalIssues)
                data["proposalIssues"].push(item ? item.toJSON() : <any>undefined);
        }
        if (Array.isArray(this.deleteModelEntityProposals)) {
            data["deleteModelEntityProposals"] = [];
            for (let item of this.deleteModelEntityProposals)
                data["deleteModelEntityProposals"].push(item ? item.toJSON() : <any>undefined);
        }
        return data;
    }
}

export interface IModelProposalResponse {
    id: number;
    lastModified: Date;
    modelProposal?: ModelProposalInfo | undefined;
    createNodeProposals?: CreateNodeProposalResponse[] | undefined;
    modifyNodeProposals?: ModifyNodeProposalResponse[] | undefined;
    createElement1dProposals?: CreateElement1dProposalResponse[] | undefined;
    modifyElement1dProposals?: ModifyElement1dProposalResponse[] | undefined;
    materialProposals?: PutMaterialRequest[] | undefined;
    sectionProfileProposals?: PutSectionProfileRequest[] | undefined;
    sectionProfileFromLibraryProposals?: SectionProfileFromLibrary[] | undefined;
    pointLoadProposals?: PointLoad[] | undefined;
    momentLoadProposals?: MomentLoad[] | undefined;
    resultSetProposals?: ResultSet[] | undefined;
    loadCaseProposals?: LoadCase[] | undefined;
    loadCombinationProposals?: LoadCombination[] | undefined;
    proposalIssues?: ProposalIssue[] | undefined;
    deleteModelEntityProposals?: DeleteModelEntityProposal[] | undefined;

    [key: string]: any;
}

export class ModifyElement1dProposalResponse implements IModifyElement1dProposalResponse {
    id?: number;
    existingElement1dId!: number;
    startNodeId!: ProposedID;
    endNodeId!: ProposedID;
    materialId!: ProposedID;
    sectionProfileId!: ProposedID;
    sectionProfileRotation?: NullableOfAngle | undefined;
    metadata?: { [key: string]: string; } | undefined;

    [key: string]: any;

    constructor(data?: IModifyElement1dProposalResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.startNodeId = new ProposedID();
            this.endNodeId = new ProposedID();
            this.materialId = new ProposedID();
            this.sectionProfileId = new ProposedID();
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.existingElement1dId = _data["existingElement1dId"];
            this.startNodeId = _data["startNodeId"] ? ProposedID.fromJS(_data["startNodeId"]) : new ProposedID();
            this.endNodeId = _data["endNodeId"] ? ProposedID.fromJS(_data["endNodeId"]) : new ProposedID();
            this.materialId = _data["materialId"] ? ProposedID.fromJS(_data["materialId"]) : new ProposedID();
            this.sectionProfileId = _data["sectionProfileId"] ? ProposedID.fromJS(_data["sectionProfileId"]) : new ProposedID();
            this.sectionProfileRotation = _data["sectionProfileRotation"] ? NullableOfAngle.fromJS(_data["sectionProfileRotation"]) : <any>undefined;
            if (_data["metadata"]) {
                this.metadata = {} as any;
                for (let key in _data["metadata"]) {
                    if (_data["metadata"].hasOwnProperty(key))
                        (<any>this.metadata)![key] = _data["metadata"][key];
                }
            }
        }
    }

    static fromJS(data: any): ModifyElement1dProposalResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ModifyElement1dProposalResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["existingElement1dId"] = this.existingElement1dId;
        data["startNodeId"] = this.startNodeId ? this.startNodeId.toJSON() : <any>undefined;
        data["endNodeId"] = this.endNodeId ? this.endNodeId.toJSON() : <any>undefined;
        data["materialId"] = this.materialId ? this.materialId.toJSON() : <any>undefined;
        data["sectionProfileId"] = this.sectionProfileId ? this.sectionProfileId.toJSON() : <any>undefined;
        data["sectionProfileRotation"] = this.sectionProfileRotation ? this.sectionProfileRotation.toJSON() : <any>undefined;
        if (this.metadata) {
            data["metadata"] = {};
            for (let key in this.metadata) {
                if (this.metadata.hasOwnProperty(key))
                    (<any>data["metadata"])[key] = (<any>this.metadata)[key];
            }
        }
        return data;
    }
}

export interface IModifyElement1dProposalResponse {
    id?: number;
    existingElement1dId: number;
    startNodeId: ProposedID;
    endNodeId: ProposedID;
    materialId: ProposedID;
    sectionProfileId: ProposedID;
    sectionProfileRotation?: NullableOfAngle | undefined;
    metadata?: { [key: string]: string; } | undefined;

    [key: string]: any;
}

export class ModifyNodeProposalResponse implements IModifyNodeProposalResponse {
    existingNodeId!: number;
    id!: number;
    locationPoint!: Point;
    restraint!: Restraint;
    metadata?: { [key: string]: string; } | undefined;

    [key: string]: any;

    constructor(data?: IModifyNodeProposalResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.locationPoint = new Point();
            this.restraint = new Restraint();
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.existingNodeId = _data["existingNodeId"];
            this.id = _data["id"];
            this.locationPoint = _data["locationPoint"] ? Point.fromJS(_data["locationPoint"]) : new Point();
            this.restraint = _data["restraint"] ? Restraint.fromJS(_data["restraint"]) : new Restraint();
            if (_data["metadata"]) {
                this.metadata = {} as any;
                for (let key in _data["metadata"]) {
                    if (_data["metadata"].hasOwnProperty(key))
                        (<any>this.metadata)![key] = _data["metadata"][key];
                }
            }
        }
    }

    static fromJS(data: any): ModifyNodeProposalResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ModifyNodeProposalResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["existingNodeId"] = this.existingNodeId;
        data["id"] = this.id;
        data["locationPoint"] = this.locationPoint ? this.locationPoint.toJSON() : <any>undefined;
        data["restraint"] = this.restraint ? this.restraint.toJSON() : <any>undefined;
        if (this.metadata) {
            data["metadata"] = {};
            for (let key in this.metadata) {
                if (this.metadata.hasOwnProperty(key))
                    (<any>data["metadata"])[key] = (<any>this.metadata)[key];
            }
        }
        return data;
    }
}

export interface IModifyNodeProposalResponse {
    existingNodeId: number;
    id: number;
    locationPoint: Point;
    restraint: Restraint;
    metadata?: { [key: string]: string; } | undefined;

    [key: string]: any;
}

export class MomentLoad implements IMomentLoad {
    id?: number;
    nodeId!: number;
    loadCaseId!: number;
    torque!: Torque;
    axisDirection!: Vector3;

    [key: string]: any;

    constructor(data?: IMomentLoad) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.torque = new Torque();
            this.axisDirection = new Vector3();
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.nodeId = _data["nodeId"];
            this.loadCaseId = _data["loadCaseId"];
            this.torque = _data["torque"] ? Torque.fromJS(_data["torque"]) : new Torque();
            this.axisDirection = _data["axisDirection"] ? Vector3.fromJS(_data["axisDirection"]) : new Vector3();
        }
    }

    static fromJS(data: any): MomentLoad {
        data = typeof data === 'object' ? data : {};
        let result = new MomentLoad();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["nodeId"] = this.nodeId;
        data["loadCaseId"] = this.loadCaseId;
        data["torque"] = this.torque ? this.torque.toJSON() : <any>undefined;
        data["axisDirection"] = this.axisDirection ? this.axisDirection.toJSON() : <any>undefined;
        return data;
    }
}

export interface IMomentLoad {
    id?: number;
    nodeId: number;
    loadCaseId: number;
    torque: Torque;
    axisDirection: Vector3;

    [key: string]: any;
}

export class NodeResultResponse implements INodeResultResponse {
    modelId!: string;
    resultSetId!: number;
    nodeId!: number;
    forces!: ForcesResponse;
    displacements!: DisplacementsResponse;

    [key: string]: any;

    constructor(data?: INodeResultResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.forces = new ForcesResponse();
            this.displacements = new DisplacementsResponse();
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.modelId = _data["modelId"];
            this.resultSetId = _data["resultSetId"];
            this.nodeId = _data["nodeId"];
            this.forces = _data["forces"] ? ForcesResponse.fromJS(_data["forces"]) : new ForcesResponse();
            this.displacements = _data["displacements"] ? DisplacementsResponse.fromJS(_data["displacements"]) : new DisplacementsResponse();
        }
    }

    static fromJS(data: any): NodeResultResponse {
        data = typeof data === 'object' ? data : {};
        let result = new NodeResultResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["modelId"] = this.modelId;
        data["resultSetId"] = this.resultSetId;
        data["nodeId"] = this.nodeId;
        data["forces"] = this.forces ? this.forces.toJSON() : <any>undefined;
        data["displacements"] = this.displacements ? this.displacements.toJSON() : <any>undefined;
        return data;
    }
}

export interface INodeResultResponse {
    modelId: string;
    resultSetId: number;
    nodeId: number;
    forces: ForcesResponse;
    displacements: DisplacementsResponse;

    [key: string]: any;
}

export class NullableOfAngle implements INullableOfAngle {
    value!: number;
    unit!: number;

    [key: string]: any;

    constructor(data?: INullableOfAngle) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.value = _data["value"];
            this.unit = _data["unit"];
        }
    }

    static fromJS(data: any): NullableOfAngle {
        data = typeof data === 'object' ? data : {};
        let result = new NullableOfAngle();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["value"] = this.value;
        data["unit"] = this.unit;
        return data;
    }
}

export interface INullableOfAngle {
    value: number;
    unit: number;

    [key: string]: any;
}

export class Point implements IPoint {
    x!: number;
    y!: number;
    z!: number;
    lengthUnit!: number;

    [key: string]: any;

    constructor(data?: IPoint) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.x = _data["x"];
            this.y = _data["y"];
            this.z = _data["z"];
            this.lengthUnit = _data["lengthUnit"];
        }
    }

    static fromJS(data: any): Point {
        data = typeof data === 'object' ? data : {};
        let result = new Point();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["x"] = this.x;
        data["y"] = this.y;
        data["z"] = this.z;
        data["lengthUnit"] = this.lengthUnit;
        return data;
    }
}

export interface IPoint {
    x: number;
    y: number;
    z: number;
    lengthUnit: number;

    [key: string]: any;
}

export class PointLoad implements IPointLoad {
    id!: number;
    nodeId!: number;
    loadCaseId!: number;
    force!: Force;
    direction!: Vector3;

    [key: string]: any;

    constructor(data?: IPointLoad) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.force = new Force();
            this.direction = new Vector3();
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.nodeId = _data["nodeId"];
            this.loadCaseId = _data["loadCaseId"];
            this.force = _data["force"] ? Force.fromJS(_data["force"]) : new Force();
            this.direction = _data["direction"] ? Vector3.fromJS(_data["direction"]) : new Vector3();
        }
    }

    static fromJS(data: any): PointLoad {
        data = typeof data === 'object' ? data : {};
        let result = new PointLoad();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["nodeId"] = this.nodeId;
        data["loadCaseId"] = this.loadCaseId;
        data["force"] = this.force ? this.force.toJSON() : <any>undefined;
        data["direction"] = this.direction ? this.direction.toJSON() : <any>undefined;
        return data;
    }
}

export interface IPointLoad {
    id: number;
    nodeId: number;
    loadCaseId: number;
    force: Force;
    direction: Vector3;

    [key: string]: any;
}

export class ProposalIssue implements IProposalIssue {
    id!: number;
    proposedId!: ProposedID;
    objectType!: number;
    message!: string;
    severity!: number;
    code!: number;

    [key: string]: any;

    constructor(data?: IProposalIssue) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.proposedId = new ProposedID();
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.proposedId = _data["proposedId"] ? ProposedID.fromJS(_data["proposedId"]) : new ProposedID();
            this.objectType = _data["objectType"];
            this.message = _data["message"];
            this.severity = _data["severity"];
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): ProposalIssue {
        data = typeof data === 'object' ? data : {};
        let result = new ProposalIssue();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["proposedId"] = this.proposedId ? this.proposedId.toJSON() : <any>undefined;
        data["objectType"] = this.objectType;
        data["message"] = this.message;
        data["severity"] = this.severity;
        data["code"] = this.code;
        return data;
    }
}

export interface IProposalIssue {
    id: number;
    proposedId: ProposedID;
    objectType: number;
    message: string;
    severity: number;
    code: number;

    [key: string]: any;
}

export class ProposedID implements IProposedID {
    existingId!: number | undefined;
    proposedId!: number | undefined;

    [key: string]: any;

    constructor(data?: IProposedID) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.existingId = _data["existingId"];
            this.proposedId = _data["proposedId"];
        }
    }

    static fromJS(data: any): ProposedID {
        data = typeof data === 'object' ? data : {};
        let result = new ProposedID();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["existingId"] = this.existingId;
        data["proposedId"] = this.proposedId;
        return data;
    }
}

export interface IProposedID {
    existingId: number | undefined;
    proposedId: number | undefined;

    [key: string]: any;
}

export class PutMaterialRequest implements IPutMaterialRequest {
    id?: number;
    modulusOfElasticity!: number;
    modulusOfRigidity!: number;
    pressureUnit!: number;

    [key: string]: any;

    constructor(data?: IPutMaterialRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.modulusOfElasticity = _data["modulusOfElasticity"];
            this.modulusOfRigidity = _data["modulusOfRigidity"];
            this.pressureUnit = _data["pressureUnit"];
        }
    }

    static fromJS(data: any): PutMaterialRequest {
        data = typeof data === 'object' ? data : {};
        let result = new PutMaterialRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["modulusOfElasticity"] = this.modulusOfElasticity;
        data["modulusOfRigidity"] = this.modulusOfRigidity;
        data["pressureUnit"] = this.pressureUnit;
        return data;
    }
}

export interface IPutMaterialRequest {
    id?: number;
    modulusOfElasticity: number;
    modulusOfRigidity: number;
    pressureUnit: number;

    [key: string]: any;
}

export class PutSectionProfileRequest implements IPutSectionProfileRequest {
    id!: number;
    area!: number;
    strongAxisMomentOfInertia!: number;
    weakAxisMomentOfInertia!: number;
    polarMomentOfInertia!: number;
    strongAxisPlasticSectionModulus!: number;
    weakAxisPlasticSectionModulus!: number;
    strongAxisShearArea?: number | undefined;
    weakAxisShearArea?: number | undefined;
    lengthUnit!: number;
    name!: string;

    [key: string]: any;

    constructor(data?: IPutSectionProfileRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.area = _data["area"];
            this.strongAxisMomentOfInertia = _data["strongAxisMomentOfInertia"];
            this.weakAxisMomentOfInertia = _data["weakAxisMomentOfInertia"];
            this.polarMomentOfInertia = _data["polarMomentOfInertia"];
            this.strongAxisPlasticSectionModulus = _data["strongAxisPlasticSectionModulus"];
            this.weakAxisPlasticSectionModulus = _data["weakAxisPlasticSectionModulus"];
            this.strongAxisShearArea = _data["strongAxisShearArea"];
            this.weakAxisShearArea = _data["weakAxisShearArea"];
            this.lengthUnit = _data["lengthUnit"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): PutSectionProfileRequest {
        data = typeof data === 'object' ? data : {};
        let result = new PutSectionProfileRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["area"] = this.area;
        data["strongAxisMomentOfInertia"] = this.strongAxisMomentOfInertia;
        data["weakAxisMomentOfInertia"] = this.weakAxisMomentOfInertia;
        data["polarMomentOfInertia"] = this.polarMomentOfInertia;
        data["strongAxisPlasticSectionModulus"] = this.strongAxisPlasticSectionModulus;
        data["weakAxisPlasticSectionModulus"] = this.weakAxisPlasticSectionModulus;
        data["strongAxisShearArea"] = this.strongAxisShearArea;
        data["weakAxisShearArea"] = this.weakAxisShearArea;
        data["lengthUnit"] = this.lengthUnit;
        data["name"] = this.name;
        return data;
    }
}

export interface IPutSectionProfileRequest {
    id: number;
    area: number;
    strongAxisMomentOfInertia: number;
    weakAxisMomentOfInertia: number;
    polarMomentOfInertia: number;
    strongAxisPlasticSectionModulus: number;
    weakAxisPlasticSectionModulus: number;
    strongAxisShearArea?: number | undefined;
    weakAxisShearArea?: number | undefined;
    lengthUnit: number;
    name: string;

    [key: string]: any;
}

export class Restraint implements IRestraint {
    canTranslateAlongX!: boolean;
    canTranslateAlongY!: boolean;
    canTranslateAlongZ!: boolean;
    canRotateAboutX!: boolean;
    canRotateAboutY!: boolean;
    canRotateAboutZ!: boolean;

    [key: string]: any;

    constructor(data?: IRestraint) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.canTranslateAlongX = _data["canTranslateAlongX"];
            this.canTranslateAlongY = _data["canTranslateAlongY"];
            this.canTranslateAlongZ = _data["canTranslateAlongZ"];
            this.canRotateAboutX = _data["canRotateAboutX"];
            this.canRotateAboutY = _data["canRotateAboutY"];
            this.canRotateAboutZ = _data["canRotateAboutZ"];
        }
    }

    static fromJS(data: any): Restraint {
        data = typeof data === 'object' ? data : {};
        let result = new Restraint();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["canTranslateAlongX"] = this.canTranslateAlongX;
        data["canTranslateAlongY"] = this.canTranslateAlongY;
        data["canTranslateAlongZ"] = this.canTranslateAlongZ;
        data["canRotateAboutX"] = this.canRotateAboutX;
        data["canRotateAboutY"] = this.canRotateAboutY;
        data["canRotateAboutZ"] = this.canRotateAboutZ;
        return data;
    }
}

export interface IRestraint {
    canTranslateAlongX: boolean;
    canTranslateAlongY: boolean;
    canTranslateAlongZ: boolean;
    canRotateAboutX: boolean;
    canRotateAboutY: boolean;
    canRotateAboutZ: boolean;

    [key: string]: any;
}

export class ResultOfModelProposalResponse implements IResultOfModelProposalResponse {
    value!: ModelProposalResponse | undefined;
    error!: BeamOsError | undefined;
    isError!: boolean;

    [key: string]: any;

    constructor(data?: IResultOfModelProposalResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.value = _data["value"] ? ModelProposalResponse.fromJS(_data["value"]) : <any>undefined;
            this.error = _data["error"] ? BeamOsError.fromJS(_data["error"]) : <any>undefined;
            this.isError = _data["isError"];
        }
    }

    static fromJS(data: any): ResultOfModelProposalResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ResultOfModelProposalResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["value"] = this.value ? this.value.toJSON() : <any>undefined;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["isError"] = this.isError;
        return data;
    }
}

export interface IResultOfModelProposalResponse {
    value: ModelProposalResponse | undefined;
    error: BeamOsError | undefined;
    isError: boolean;

    [key: string]: any;
}

export class ResultSet implements IResultSet {
    id!: number;
    modelId!: string;
    nodeResults?: NodeResultResponse[] | undefined;
    element1dResults?: Element1dResultResponse[] | undefined;

    [key: string]: any;

    constructor(data?: IResultSet) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.modelId = _data["modelId"];
            if (Array.isArray(_data["nodeResults"])) {
                this.nodeResults = [] as any;
                for (let item of _data["nodeResults"])
                    this.nodeResults!.push(NodeResultResponse.fromJS(item));
            }
            if (Array.isArray(_data["element1dResults"])) {
                this.element1dResults = [] as any;
                for (let item of _data["element1dResults"])
                    this.element1dResults!.push(Element1dResultResponse.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ResultSet {
        data = typeof data === 'object' ? data : {};
        let result = new ResultSet();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["modelId"] = this.modelId;
        if (Array.isArray(this.nodeResults)) {
            data["nodeResults"] = [];
            for (let item of this.nodeResults)
                data["nodeResults"].push(item ? item.toJSON() : <any>undefined);
        }
        if (Array.isArray(this.element1dResults)) {
            data["element1dResults"] = [];
            for (let item of this.element1dResults)
                data["element1dResults"].push(item ? item.toJSON() : <any>undefined);
        }
        return data;
    }
}

export interface IResultSet {
    id: number;
    modelId: string;
    nodeResults?: NodeResultResponse[] | undefined;
    element1dResults?: Element1dResultResponse[] | undefined;

    [key: string]: any;
}

export class SectionProfileFromLibrary implements ISectionProfileFromLibrary {
    id!: number;
    library!: number;
    name!: string;

    [key: string]: any;

    constructor(data?: ISectionProfileFromLibrary) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.library = _data["library"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): SectionProfileFromLibrary {
        data = typeof data === 'object' ? data : {};
        let result = new SectionProfileFromLibrary();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["library"] = this.library;
        data["name"] = this.name;
        return data;
    }
}

export interface ISectionProfileFromLibrary {
    id: number;
    library: number;
    name: string;

    [key: string]: any;
}

export class SpeckleReceiveParameters implements ISpeckleReceiveParameters {
    apiToken!: string;
    projectId!: string;
    objectId!: string;
    serverUrl!: string;

    [key: string]: any;

    constructor(data?: ISpeckleReceiveParameters) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.apiToken = _data["apiToken"];
            this.projectId = _data["projectId"];
            this.objectId = _data["objectId"];
            this.serverUrl = _data["serverUrl"];
        }
    }

    static fromJS(data: any): SpeckleReceiveParameters {
        data = typeof data === 'object' ? data : {};
        let result = new SpeckleReceiveParameters();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["apiToken"] = this.apiToken;
        data["projectId"] = this.projectId;
        data["objectId"] = this.objectId;
        data["serverUrl"] = this.serverUrl;
        return data;
    }
}

export interface ISpeckleReceiveParameters {
    apiToken: string;
    projectId: string;
    objectId: string;
    serverUrl: string;

    [key: string]: any;
}

export class Torque implements ITorque {
    value!: number;
    unit!: number;

    [key: string]: any;

    constructor(data?: ITorque) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.value = _data["value"];
            this.unit = _data["unit"];
        }
    }

    static fromJS(data: any): Torque {
        data = typeof data === 'object' ? data : {};
        let result = new Torque();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["value"] = this.value;
        data["unit"] = this.unit;
        return data;
    }
}

export interface ITorque {
    value: number;
    unit: number;

    [key: string]: any;
}

export class Vector3 implements IVector3 {
    x!: number;
    y!: number;
    z!: number;

    [key: string]: any;

    constructor(data?: IVector3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.x = _data["x"];
            this.y = _data["y"];
            this.z = _data["z"];
        }
    }

    static fromJS(data: any): Vector3 {
        data = typeof data === 'object' ? data : {};
        let result = new Vector3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["x"] = this.x;
        data["y"] = this.y;
        data["z"] = this.z;
        return data;
    }
}

export interface IVector3 {
    x: number;
    y: number;
    z: number;

    [key: string]: any;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}