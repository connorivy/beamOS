@using System.Reflection
        <MudGrid Spacing="1">
@foreach (var propInfo in propertyInfos)
{
    var value = propInfo.GetValue(this.ObjectToDisplay);
    if (IsSimpleType(propInfo.PropertyType))
    {
            <MudItem xs="4">
                <MudTooltip Text="@propInfo.Name" RootClass="w-full">
                    <MudText Typo="Typo.body2" Class="truncate">@propInfo.Name</MudText>
                </MudTooltip>
            </MudItem>
            <MudItem xs="8">
                <MudTooltip Text="@value?.ToString()" RootClass="w-full">
                    <MudText Typo="Typo.body2" Class="truncate">@value</MudText>
                </MudTooltip>
            </MudItem>
    }
    else
    {
        <MudItem xs="12">

        <MudExpansionPanel Text="@propInfo.Name">
                    <SelectionInfoSingleItemComponent ObjectToDisplay="@value" @key="@value"></SelectionInfoSingleItemComponent>
        </MudExpansionPanel>
        </MudItem>
    }
}
        </MudGrid>

@code {
    [Parameter]
    public required object ObjectToDisplay { get; init; }

    public PropertyInfo[] propertyInfos { get; set; }

    protected override void OnParametersSet()
    {
        this.propertyInfos = this.ObjectToDisplay.GetType().GetProperties(System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance);

        base.OnParametersSet();
    }

    public PropertyInfo[] GetPublicInstanceProps(object obj) => obj.GetType().GetProperties(System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance);

    private static readonly HashSet<Type> simpleTypes =
    [
        typeof(bool),
        typeof(double),
        typeof(float),
        typeof(string),
        typeof(decimal),
        typeof(DateTime),
        typeof(DateTimeOffset),
        typeof(TimeSpan),
        typeof(Guid)
    ];

    public bool IsSimpleType(Type t) => simpleTypes.Contains(t);
}
