//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export interface IApiAlphaClient {

    /**
     * @return Success
     */
    runOpenSeesAnalysis(modelId: string): Promise<boolean>;

    /**
     * @return Success
     */
    runDirectStiffnessMethod(modelId: string): Promise<boolean>;

    /**
     * @param nodeIds (optional) 
     * @return Success
     */
    getNodeResults(modelId: string, nodeIds: string[] | null | undefined): Promise<NodeResultResponse[]>;

    /**
     * @return Success
     */
    getSingleNodeResult(id: string): Promise<NodeResultResponse[]>;

    /**
     * @return Success
     */
    deleteModelResults(modelId: string): Promise<boolean>;

    /**
     * @return Success
     */
    getModelResults(modelId: string): Promise<ModelResultResponse>;

    /**
     * @return Success
     */
    createSectionProfile(createSectionProfileRequest: CreateSectionProfileRequest): Promise<SectionProfileResponse>;

    /**
     * @return Success
     */
    createPointLoad(createPointLoadRequest: CreatePointLoadRequest): Promise<PointLoadResponse>;

    /**
     * @return Success
     */
    createNode(createNodeRequest: CreateNodeRequest): Promise<NodeResponse>;

    /**
     * @return Success
     */
    getSingleNode(id: string): Promise<NodeResponse>;

    /**
     * @return Success
     */
    patchNode(patchNodeRequest: PatchNodeRequest, nodeId: string): Promise<NodeResponse>;

    /**
     * @return Success
     */
    createMomentLoad(createMomentLoadRequest: CreateMomentLoadRequest): Promise<MomentLoadResponse>;

    /**
     * @param momentLoadIds (optional) 
     * @return Success
     */
    getMomentLoads(modelId: string, momentLoadIds: string[] | null | undefined): Promise<MomentLoadResponse[]>;

    /**
     * @return Success
     */
    createModel(createModelRequest: CreateModelRequest): Promise<ModelResponse>;

    /**
     * @return Success
     */
    getModels(): Promise<ModelResponse[]>;

    /**
     * @return Success
     */
    deleteModel(modelId: string): Promise<boolean>;

    /**
     * @param properties (optional) 
     * @return Success
     */
    getModel(modelId: string, properties: string[] | null | undefined): Promise<ModelResponse>;

    /**
     * @return Success
     */
    createMaterial(createMaterialRequest: CreateMaterialRequest): Promise<MaterialResponse>;

    /**
     * @return Success
     */
    getMomentDiagram(id: string): Promise<MomentDiagramResponse>;

    /**
     * @return Success
     */
    getMomentDiagrams(modelId: string): Promise<MomentDiagramResponse[]>;

    /**
     * @return Success
     */
    getShearDiagram(id: string): Promise<ShearDiagramResponse>;

    /**
     * @return Success
     */
    getShearDiagrams(modelId: string): Promise<ShearDiagramResponse[]>;

    /**
     * @return Success
     */
    createElement1d(createElement1dRequest: CreateElement1dRequest): Promise<Element1DResponse>;

    /**
     * @param element1dIds (optional) 
     * @return Success
     */
    getElement1ds(modelId: string, element1dIds: string[] | null | undefined): Promise<Element1DResponse[]>;

    /**
     * @return Success
     */
    getSingleElement1d(id: string): Promise<Element1DResponse>;
}

export class ApiAlphaClient implements IApiAlphaClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @return Success
     */
    runOpenSeesAnalysis(modelId: string): Promise<boolean> {
        let url_ = this.baseUrl + "/api/models/{modelId}/analyze/opensees";
        if (modelId === undefined || modelId === null)
            throw new Error("The parameter 'modelId' must be defined.");
        url_ = url_.replace("{modelId}", encodeURIComponent("" + modelId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRunOpenSeesAnalysis(_response);
        });
    }

    protected processRunOpenSeesAnalysis(response: Response): Promise<boolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<boolean>(null as any);
    }

    /**
     * @return Success
     */
    runDirectStiffnessMethod(modelId: string): Promise<boolean> {
        let url_ = this.baseUrl + "/api/models/{modelId}/analyze/direct-stiffness-method";
        if (modelId === undefined || modelId === null)
            throw new Error("The parameter 'modelId' must be defined.");
        url_ = url_.replace("{modelId}", encodeURIComponent("" + modelId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRunDirectStiffnessMethod(_response);
        });
    }

    protected processRunDirectStiffnessMethod(response: Response): Promise<boolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<boolean>(null as any);
    }

    /**
     * @param nodeIds (optional) 
     * @return Success
     */
    getNodeResults(modelId: string, nodeIds: string[] | null | undefined): Promise<NodeResultResponse[]> {
        let url_ = this.baseUrl + "/api/models/{modelId}/node-results?";
        if (modelId === undefined || modelId === null)
            throw new Error("The parameter 'modelId' must be defined.");
        url_ = url_.replace("{modelId}", encodeURIComponent("" + modelId));
        if (nodeIds !== undefined && nodeIds !== null)
            nodeIds && nodeIds.forEach(item => { url_ += "nodeIds=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetNodeResults(_response);
        });
    }

    protected processGetNodeResults(response: Response): Promise<NodeResultResponse[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(NodeResultResponse.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status === 403) {
            return response.text().then((_responseText) => {
            return throwException("Forbidden", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<NodeResultResponse[]>(null as any);
    }

    /**
     * @return Success
     */
    getSingleNodeResult(id: string): Promise<NodeResultResponse[]> {
        let url_ = this.baseUrl + "/api/nodes/{id}/results";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetSingleNodeResult(_response);
        });
    }

    protected processGetSingleNodeResult(response: Response): Promise<NodeResultResponse[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(NodeResultResponse.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<NodeResultResponse[]>(null as any);
    }

    /**
     * @return Success
     */
    deleteModelResults(modelId: string): Promise<boolean> {
        let url_ = this.baseUrl + "/api/models/{modelId}/results";
        if (modelId === undefined || modelId === null)
            throw new Error("The parameter 'modelId' must be defined.");
        url_ = url_.replace("{modelId}", encodeURIComponent("" + modelId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteModelResults(_response);
        });
    }

    protected processDeleteModelResults(response: Response): Promise<boolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<boolean>(null as any);
    }

    /**
     * @return Success
     */
    getModelResults(modelId: string): Promise<ModelResultResponse> {
        let url_ = this.baseUrl + "/api/models/{modelId}/results";
        if (modelId === undefined || modelId === null)
            throw new Error("The parameter 'modelId' must be defined.");
        url_ = url_.replace("{modelId}", encodeURIComponent("" + modelId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetModelResults(_response);
        });
    }

    protected processGetModelResults(response: Response): Promise<ModelResultResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ModelResultResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ModelResultResponse>(null as any);
    }

    /**
     * @return Success
     */
    createSectionProfile(createSectionProfileRequest: CreateSectionProfileRequest): Promise<SectionProfileResponse> {
        let url_ = this.baseUrl + "/api/SectionProfiles";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(createSectionProfileRequest);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateSectionProfile(_response);
        });
    }

    protected processCreateSectionProfile(response: Response): Promise<SectionProfileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SectionProfileResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<SectionProfileResponse>(null as any);
    }

    /**
     * @return Success
     */
    createPointLoad(createPointLoadRequest: CreatePointLoadRequest): Promise<PointLoadResponse> {
        let url_ = this.baseUrl + "/api/point-load";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(createPointLoadRequest);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreatePointLoad(_response);
        });
    }

    protected processCreatePointLoad(response: Response): Promise<PointLoadResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PointLoadResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PointLoadResponse>(null as any);
    }

    /**
     * @return Success
     */
    createNode(createNodeRequest: CreateNodeRequest): Promise<NodeResponse> {
        let url_ = this.baseUrl + "/api/nodes";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(createNodeRequest);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateNode(_response);
        });
    }

    protected processCreateNode(response: Response): Promise<NodeResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = NodeResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<NodeResponse>(null as any);
    }

    /**
     * @return Success
     */
    getSingleNode(id: string): Promise<NodeResponse> {
        let url_ = this.baseUrl + "/api/nodes/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetSingleNode(_response);
        });
    }

    protected processGetSingleNode(response: Response): Promise<NodeResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = NodeResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<NodeResponse>(null as any);
    }

    /**
     * @return Success
     */
    patchNode(patchNodeRequest: PatchNodeRequest, nodeId: string): Promise<NodeResponse> {
        let url_ = this.baseUrl + "/api/nodes/{nodeId}";
        if (nodeId === undefined || nodeId === null)
            throw new Error("The parameter 'nodeId' must be defined.");
        url_ = url_.replace("{nodeId}", encodeURIComponent("" + nodeId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(patchNodeRequest);

        let options_: RequestInit = {
            body: content_,
            method: "PATCH",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPatchNode(_response);
        });
    }

    protected processPatchNode(response: Response): Promise<NodeResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = NodeResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            return throwException("Unauthorized", status, _responseText, _headers);
            });
        } else if (status === 403) {
            return response.text().then((_responseText) => {
            return throwException("Forbidden", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<NodeResponse>(null as any);
    }

    /**
     * @return Success
     */
    createMomentLoad(createMomentLoadRequest: CreateMomentLoadRequest): Promise<MomentLoadResponse> {
        let url_ = this.baseUrl + "/api/moment-loads";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(createMomentLoadRequest);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateMomentLoad(_response);
        });
    }

    protected processCreateMomentLoad(response: Response): Promise<MomentLoadResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = MomentLoadResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<MomentLoadResponse>(null as any);
    }

    /**
     * @param momentLoadIds (optional) 
     * @return Success
     */
    getMomentLoads(modelId: string, momentLoadIds: string[] | null | undefined): Promise<MomentLoadResponse[]> {
        let url_ = this.baseUrl + "/api/models/{modelId}/moment-loads?";
        if (modelId === undefined || modelId === null)
            throw new Error("The parameter 'modelId' must be defined.");
        url_ = url_.replace("{modelId}", encodeURIComponent("" + modelId));
        if (momentLoadIds !== undefined && momentLoadIds !== null)
            momentLoadIds && momentLoadIds.forEach(item => { url_ += "momentLoadIds=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetMomentLoads(_response);
        });
    }

    protected processGetMomentLoads(response: Response): Promise<MomentLoadResponse[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(MomentLoadResponse.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<MomentLoadResponse[]>(null as any);
    }

    /**
     * @return Success
     */
    createModel(createModelRequest: CreateModelRequest): Promise<ModelResponse> {
        let url_ = this.baseUrl + "/api/models";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(createModelRequest);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateModel(_response);
        });
    }

    protected processCreateModel(response: Response): Promise<ModelResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ModelResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            return throwException("Unauthorized", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ModelResponse>(null as any);
    }

    /**
     * @return Success
     */
    getModels(): Promise<ModelResponse[]> {
        let url_ = this.baseUrl + "/api/models";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetModels(_response);
        });
    }

    protected processGetModels(response: Response): Promise<ModelResponse[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ModelResponse.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            return throwException("Unauthorized", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ModelResponse[]>(null as any);
    }

    /**
     * @return Success
     */
    deleteModel(modelId: string): Promise<boolean> {
        let url_ = this.baseUrl + "/api/models/{modelId}";
        if (modelId === undefined || modelId === null)
            throw new Error("The parameter 'modelId' must be defined.");
        url_ = url_.replace("{modelId}", encodeURIComponent("" + modelId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteModel(_response);
        });
    }

    protected processDeleteModel(response: Response): Promise<boolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            return throwException("Unauthorized", status, _responseText, _headers);
            });
        } else if (status === 403) {
            return response.text().then((_responseText) => {
            return throwException("Forbidden", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<boolean>(null as any);
    }

    /**
     * @param properties (optional) 
     * @return Success
     */
    getModel(modelId: string, properties: string[] | null | undefined): Promise<ModelResponse> {
        let url_ = this.baseUrl + "/api/models/{modelId}?";
        if (modelId === undefined || modelId === null)
            throw new Error("The parameter 'modelId' must be defined.");
        url_ = url_.replace("{modelId}", encodeURIComponent("" + modelId));
        if (properties !== undefined && properties !== null)
            properties && properties.forEach(item => { url_ += "properties=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetModel(_response);
        });
    }

    protected processGetModel(response: Response): Promise<ModelResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ModelResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status === 403) {
            return response.text().then((_responseText) => {
            return throwException("Forbidden", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ModelResponse>(null as any);
    }

    /**
     * @return Success
     */
    createMaterial(createMaterialRequest: CreateMaterialRequest): Promise<MaterialResponse> {
        let url_ = this.baseUrl + "/api/materials";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(createMaterialRequest);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateMaterial(_response);
        });
    }

    protected processCreateMaterial(response: Response): Promise<MaterialResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = MaterialResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<MaterialResponse>(null as any);
    }

    /**
     * @return Success
     */
    getMomentDiagram(id: string): Promise<MomentDiagramResponse> {
        let url_ = this.baseUrl + "/api/element1Ds/{id}/diagrams/moment/";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetMomentDiagram(_response);
        });
    }

    protected processGetMomentDiagram(response: Response): Promise<MomentDiagramResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = MomentDiagramResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<MomentDiagramResponse>(null as any);
    }

    /**
     * @return Success
     */
    getMomentDiagrams(modelId: string): Promise<MomentDiagramResponse[]> {
        let url_ = this.baseUrl + "/api/model/{modelId}/diagrams/moment";
        if (modelId === undefined || modelId === null)
            throw new Error("The parameter 'modelId' must be defined.");
        url_ = url_.replace("{modelId}", encodeURIComponent("" + modelId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetMomentDiagrams(_response);
        });
    }

    protected processGetMomentDiagrams(response: Response): Promise<MomentDiagramResponse[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(MomentDiagramResponse.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status === 403) {
            return response.text().then((_responseText) => {
            return throwException("Forbidden", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<MomentDiagramResponse[]>(null as any);
    }

    /**
     * @return Success
     */
    getShearDiagram(id: string): Promise<ShearDiagramResponse> {
        let url_ = this.baseUrl + "/api/element1Ds/{id}/diagrams/shear/";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetShearDiagram(_response);
        });
    }

    protected processGetShearDiagram(response: Response): Promise<ShearDiagramResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ShearDiagramResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ShearDiagramResponse>(null as any);
    }

    /**
     * @return Success
     */
    getShearDiagrams(modelId: string): Promise<ShearDiagramResponse[]> {
        let url_ = this.baseUrl + "/api/model/{modelId}/diagrams/shear";
        if (modelId === undefined || modelId === null)
            throw new Error("The parameter 'modelId' must be defined.");
        url_ = url_.replace("{modelId}", encodeURIComponent("" + modelId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetShearDiagrams(_response);
        });
    }

    protected processGetShearDiagrams(response: Response): Promise<ShearDiagramResponse[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ShearDiagramResponse.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ShearDiagramResponse[]>(null as any);
    }

    /**
     * @return Success
     */
    createElement1d(createElement1dRequest: CreateElement1dRequest): Promise<Element1DResponse> {
        let url_ = this.baseUrl + "/api/element1Ds";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(createElement1dRequest);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateElement1d(_response);
        });
    }

    protected processCreateElement1d(response: Response): Promise<Element1DResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Element1DResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Element1DResponse>(null as any);
    }

    /**
     * @param element1dIds (optional) 
     * @return Success
     */
    getElement1ds(modelId: string, element1dIds: string[] | null | undefined): Promise<Element1DResponse[]> {
        let url_ = this.baseUrl + "/api/models/{modelId}/element1Ds?";
        if (modelId === undefined || modelId === null)
            throw new Error("The parameter 'modelId' must be defined.");
        url_ = url_.replace("{modelId}", encodeURIComponent("" + modelId));
        if (element1dIds !== undefined && element1dIds !== null)
            element1dIds && element1dIds.forEach(item => { url_ += "element1dIds=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetElement1ds(_response);
        });
    }

    protected processGetElement1ds(response: Response): Promise<Element1DResponse[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Element1DResponse.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Element1DResponse[]>(null as any);
    }

    /**
     * @return Success
     */
    getSingleElement1d(id: string): Promise<Element1DResponse> {
        let url_ = this.baseUrl + "/api/element1Ds/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetSingleElement1d(_response);
        });
    }

    protected processGetSingleElement1d(response: Response): Promise<Element1DResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Element1DResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Element1DResponse>(null as any);
    }
}

export class ModelIdRequest implements IModelIdRequest {

    constructor(data?: IModelIdRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): ModelIdRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ModelIdRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IModelIdRequest {
}

export abstract class BeamOsContractBase implements IBeamOsContractBase {

    constructor(data?: IBeamOsContractBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): BeamOsContractBase {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'BeamOsContractBase' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IBeamOsContractBase {
}

export class NodeResultResponse extends BeamOsContractBase implements INodeResultResponse {
    nodeId!: string;
    forces!: ForcesResponse;
    displacements!: DisplacementsResponse;

    constructor(data?: INodeResultResponse) {
        super(data);
        if (!data) {
            this.forces = new ForcesResponse();
            this.displacements = new DisplacementsResponse();
        }
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.nodeId = _data["nodeId"];
            this.forces = _data["forces"] ? ForcesResponse.fromJS(_data["forces"]) : new ForcesResponse();
            this.displacements = _data["displacements"] ? DisplacementsResponse.fromJS(_data["displacements"]) : new DisplacementsResponse();
        }
    }

    static fromJS(data: any): NodeResultResponse {
        data = typeof data === 'object' ? data : {};
        let result = new NodeResultResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["nodeId"] = this.nodeId;
        data["forces"] = this.forces ? this.forces.toJSON() : <any>undefined;
        data["displacements"] = this.displacements ? this.displacements.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface INodeResultResponse extends IBeamOsContractBase {
    nodeId: string;
    forces: ForcesResponse;
    displacements: DisplacementsResponse;
}

export class ForcesResponse implements IForcesResponse {
    forceAlongX!: ForceContract;
    forceAlongY!: ForceContract;
    forceAlongZ!: ForceContract;
    momentAboutX!: TorqueContract;
    momentAboutY!: TorqueContract;
    momentAboutZ!: TorqueContract;

    constructor(data?: IForcesResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.forceAlongX = new ForceContract();
            this.forceAlongY = new ForceContract();
            this.forceAlongZ = new ForceContract();
            this.momentAboutX = new TorqueContract();
            this.momentAboutY = new TorqueContract();
            this.momentAboutZ = new TorqueContract();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.forceAlongX = _data["forceAlongX"] ? ForceContract.fromJS(_data["forceAlongX"]) : new ForceContract();
            this.forceAlongY = _data["forceAlongY"] ? ForceContract.fromJS(_data["forceAlongY"]) : new ForceContract();
            this.forceAlongZ = _data["forceAlongZ"] ? ForceContract.fromJS(_data["forceAlongZ"]) : new ForceContract();
            this.momentAboutX = _data["momentAboutX"] ? TorqueContract.fromJS(_data["momentAboutX"]) : new TorqueContract();
            this.momentAboutY = _data["momentAboutY"] ? TorqueContract.fromJS(_data["momentAboutY"]) : new TorqueContract();
            this.momentAboutZ = _data["momentAboutZ"] ? TorqueContract.fromJS(_data["momentAboutZ"]) : new TorqueContract();
        }
    }

    static fromJS(data: any): ForcesResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ForcesResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["forceAlongX"] = this.forceAlongX ? this.forceAlongX.toJSON() : <any>undefined;
        data["forceAlongY"] = this.forceAlongY ? this.forceAlongY.toJSON() : <any>undefined;
        data["forceAlongZ"] = this.forceAlongZ ? this.forceAlongZ.toJSON() : <any>undefined;
        data["momentAboutX"] = this.momentAboutX ? this.momentAboutX.toJSON() : <any>undefined;
        data["momentAboutY"] = this.momentAboutY ? this.momentAboutY.toJSON() : <any>undefined;
        data["momentAboutZ"] = this.momentAboutZ ? this.momentAboutZ.toJSON() : <any>undefined;
        return data;
    }
}

export interface IForcesResponse {
    forceAlongX: ForceContract;
    forceAlongY: ForceContract;
    forceAlongZ: ForceContract;
    momentAboutX: TorqueContract;
    momentAboutY: TorqueContract;
    momentAboutZ: TorqueContract;
}

export class ForceContract implements IForceContract {
    value!: number;
    unit!: ForceUnitContract;

    constructor(data?: IForceContract) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.value = _data["value"];
            this.unit = _data["unit"];
        }
    }

    static fromJS(data: any): ForceContract {
        data = typeof data === 'object' ? data : {};
        let result = new ForceContract();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        data["unit"] = this.unit;
        return data;
    }
}

export interface IForceContract {
    value: number;
    unit: ForceUnitContract;
}

export enum ForceUnitContract {
    Undefined = "Undefined",
    Kilonewton = "Kilonewton",
    KilopoundForce = "KilopoundForce",
    Newton = "Newton",
    PoundForce = "PoundForce",
}

export class TorqueContract implements ITorqueContract {
    value!: number;
    unit!: TorqueUnitContract;

    constructor(data?: ITorqueContract) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.value = _data["value"];
            this.unit = _data["unit"];
        }
    }

    static fromJS(data: any): TorqueContract {
        data = typeof data === 'object' ? data : {};
        let result = new TorqueContract();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        data["unit"] = this.unit;
        return data;
    }
}

export interface ITorqueContract {
    value: number;
    unit: TorqueUnitContract;
}

export enum TorqueUnitContract {
    Undefined = "Undefined",
    KilonewtonCentimeter = "KilonewtonCentimeter",
    KilonewtonMeter = "KilonewtonMeter",
    KilonewtonMillimeter = "KilonewtonMillimeter",
    KilopoundForceFoot = "KilopoundForceFoot",
    KilopoundForceInch = "KilopoundForceInch",
    NewtonCentimeter = "NewtonCentimeter",
    NewtonMeter = "NewtonMeter",
    NewtonMillimeter = "NewtonMillimeter",
    PoundForceFoot = "PoundForceFoot",
    PoundForceInch = "PoundForceInch",
}

export class DisplacementsResponse implements IDisplacementsResponse {
    displacementAlongX!: LengthContract;
    displacementAlongY!: LengthContract;
    displacementAlongZ!: LengthContract;
    rotationAboutX!: AngleContract;
    rotationAboutY!: AngleContract;
    rotationAboutZ!: AngleContract;

    constructor(data?: IDisplacementsResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.displacementAlongX = new LengthContract();
            this.displacementAlongY = new LengthContract();
            this.displacementAlongZ = new LengthContract();
            this.rotationAboutX = new AngleContract();
            this.rotationAboutY = new AngleContract();
            this.rotationAboutZ = new AngleContract();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.displacementAlongX = _data["displacementAlongX"] ? LengthContract.fromJS(_data["displacementAlongX"]) : new LengthContract();
            this.displacementAlongY = _data["displacementAlongY"] ? LengthContract.fromJS(_data["displacementAlongY"]) : new LengthContract();
            this.displacementAlongZ = _data["displacementAlongZ"] ? LengthContract.fromJS(_data["displacementAlongZ"]) : new LengthContract();
            this.rotationAboutX = _data["rotationAboutX"] ? AngleContract.fromJS(_data["rotationAboutX"]) : new AngleContract();
            this.rotationAboutY = _data["rotationAboutY"] ? AngleContract.fromJS(_data["rotationAboutY"]) : new AngleContract();
            this.rotationAboutZ = _data["rotationAboutZ"] ? AngleContract.fromJS(_data["rotationAboutZ"]) : new AngleContract();
        }
    }

    static fromJS(data: any): DisplacementsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new DisplacementsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["displacementAlongX"] = this.displacementAlongX ? this.displacementAlongX.toJSON() : <any>undefined;
        data["displacementAlongY"] = this.displacementAlongY ? this.displacementAlongY.toJSON() : <any>undefined;
        data["displacementAlongZ"] = this.displacementAlongZ ? this.displacementAlongZ.toJSON() : <any>undefined;
        data["rotationAboutX"] = this.rotationAboutX ? this.rotationAboutX.toJSON() : <any>undefined;
        data["rotationAboutY"] = this.rotationAboutY ? this.rotationAboutY.toJSON() : <any>undefined;
        data["rotationAboutZ"] = this.rotationAboutZ ? this.rotationAboutZ.toJSON() : <any>undefined;
        return data;
    }
}

export interface IDisplacementsResponse {
    displacementAlongX: LengthContract;
    displacementAlongY: LengthContract;
    displacementAlongZ: LengthContract;
    rotationAboutX: AngleContract;
    rotationAboutY: AngleContract;
    rotationAboutZ: AngleContract;
}

export class LengthContract implements ILengthContract {
    value!: number;
    unit!: LengthUnitContract;

    constructor(data?: ILengthContract) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.value = _data["value"];
            this.unit = _data["unit"];
        }
    }

    static fromJS(data: any): LengthContract {
        data = typeof data === 'object' ? data : {};
        let result = new LengthContract();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        data["unit"] = this.unit;
        return data;
    }
}

export interface ILengthContract {
    value: number;
    unit: LengthUnitContract;
}

export enum LengthUnitContract {
    Undefined = "Undefined",
    Centimeter = "Centimeter",
    Foot = "Foot",
    Inch = "Inch",
    Meter = "Meter",
    Millimeter = "Millimeter",
}

export class AngleContract implements IAngleContract {
    value!: number;
    unit!: AngleUnitContract;

    constructor(data?: IAngleContract) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.value = _data["value"];
            this.unit = _data["unit"];
        }
    }

    static fromJS(data: any): AngleContract {
        data = typeof data === 'object' ? data : {};
        let result = new AngleContract();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        data["unit"] = this.unit;
        return data;
    }
}

export interface IAngleContract {
    value: number;
    unit: AngleUnitContract;
}

export enum AngleUnitContract {
    Undefined = "Undefined",
    Degree = "Degree",
    Radian = "Radian",
}

export class GetNodeResultsRequest implements IGetNodeResultsRequest {

    constructor(data?: IGetNodeResultsRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): GetNodeResultsRequest {
        data = typeof data === 'object' ? data : {};
        let result = new GetNodeResultsRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IGetNodeResultsRequest {
}

export class IdRequest implements IIdRequest {

    constructor(data?: IIdRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IdRequest {
        data = typeof data === 'object' ? data : {};
        let result = new IdRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIdRequest {
}

export class ModelResultResponse extends BeamOsContractBase implements IModelResultResponse {
    modelId!: string;
    maxShear!: ForceContract;
    minShear!: ForceContract;
    maxMoment!: TorqueContract;
    minMoment!: TorqueContract;

    constructor(data?: IModelResultResponse) {
        super(data);
        if (!data) {
            this.maxShear = new ForceContract();
            this.minShear = new ForceContract();
            this.maxMoment = new TorqueContract();
            this.minMoment = new TorqueContract();
        }
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.modelId = _data["modelId"];
            this.maxShear = _data["maxShear"] ? ForceContract.fromJS(_data["maxShear"]) : new ForceContract();
            this.minShear = _data["minShear"] ? ForceContract.fromJS(_data["minShear"]) : new ForceContract();
            this.maxMoment = _data["maxMoment"] ? TorqueContract.fromJS(_data["maxMoment"]) : new TorqueContract();
            this.minMoment = _data["minMoment"] ? TorqueContract.fromJS(_data["minMoment"]) : new TorqueContract();
        }
    }

    static fromJS(data: any): ModelResultResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ModelResultResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["modelId"] = this.modelId;
        data["maxShear"] = this.maxShear ? this.maxShear.toJSON() : <any>undefined;
        data["minShear"] = this.minShear ? this.minShear.toJSON() : <any>undefined;
        data["maxMoment"] = this.maxMoment ? this.maxMoment.toJSON() : <any>undefined;
        data["minMoment"] = this.minMoment ? this.minMoment.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IModelResultResponse extends IBeamOsContractBase {
    modelId: string;
    maxShear: ForceContract;
    minShear: ForceContract;
    maxMoment: TorqueContract;
    minMoment: TorqueContract;
}

export class SectionProfileResponse implements ISectionProfileResponse {
    id!: string;
    modelId!: string;
    area!: AreaContract;
    strongAxisMomentOfInertia!: AreaMomentOfInertiaContract;
    weakAxisMomentOfInertia!: AreaMomentOfInertiaContract;
    polarMomentOfInertia!: AreaMomentOfInertiaContract;
    strongAxisShearArea!: AreaContract;
    weakAxisShearArea!: AreaContract;

    constructor(data?: ISectionProfileResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.area = new AreaContract();
            this.strongAxisMomentOfInertia = new AreaMomentOfInertiaContract();
            this.weakAxisMomentOfInertia = new AreaMomentOfInertiaContract();
            this.polarMomentOfInertia = new AreaMomentOfInertiaContract();
            this.strongAxisShearArea = new AreaContract();
            this.weakAxisShearArea = new AreaContract();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.modelId = _data["modelId"];
            this.area = _data["area"] ? AreaContract.fromJS(_data["area"]) : new AreaContract();
            this.strongAxisMomentOfInertia = _data["strongAxisMomentOfInertia"] ? AreaMomentOfInertiaContract.fromJS(_data["strongAxisMomentOfInertia"]) : new AreaMomentOfInertiaContract();
            this.weakAxisMomentOfInertia = _data["weakAxisMomentOfInertia"] ? AreaMomentOfInertiaContract.fromJS(_data["weakAxisMomentOfInertia"]) : new AreaMomentOfInertiaContract();
            this.polarMomentOfInertia = _data["polarMomentOfInertia"] ? AreaMomentOfInertiaContract.fromJS(_data["polarMomentOfInertia"]) : new AreaMomentOfInertiaContract();
            this.strongAxisShearArea = _data["strongAxisShearArea"] ? AreaContract.fromJS(_data["strongAxisShearArea"]) : new AreaContract();
            this.weakAxisShearArea = _data["weakAxisShearArea"] ? AreaContract.fromJS(_data["weakAxisShearArea"]) : new AreaContract();
        }
    }

    static fromJS(data: any): SectionProfileResponse {
        data = typeof data === 'object' ? data : {};
        let result = new SectionProfileResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["modelId"] = this.modelId;
        data["area"] = this.area ? this.area.toJSON() : <any>undefined;
        data["strongAxisMomentOfInertia"] = this.strongAxisMomentOfInertia ? this.strongAxisMomentOfInertia.toJSON() : <any>undefined;
        data["weakAxisMomentOfInertia"] = this.weakAxisMomentOfInertia ? this.weakAxisMomentOfInertia.toJSON() : <any>undefined;
        data["polarMomentOfInertia"] = this.polarMomentOfInertia ? this.polarMomentOfInertia.toJSON() : <any>undefined;
        data["strongAxisShearArea"] = this.strongAxisShearArea ? this.strongAxisShearArea.toJSON() : <any>undefined;
        data["weakAxisShearArea"] = this.weakAxisShearArea ? this.weakAxisShearArea.toJSON() : <any>undefined;
        return data;
    }
}

export interface ISectionProfileResponse {
    id: string;
    modelId: string;
    area: AreaContract;
    strongAxisMomentOfInertia: AreaMomentOfInertiaContract;
    weakAxisMomentOfInertia: AreaMomentOfInertiaContract;
    polarMomentOfInertia: AreaMomentOfInertiaContract;
    strongAxisShearArea: AreaContract;
    weakAxisShearArea: AreaContract;
}

export class AreaContract implements IAreaContract {
    value!: number;
    unit!: AreaUnitContract;

    constructor(data?: IAreaContract) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.value = _data["value"];
            this.unit = _data["unit"];
        }
    }

    static fromJS(data: any): AreaContract {
        data = typeof data === 'object' ? data : {};
        let result = new AreaContract();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        data["unit"] = this.unit;
        return data;
    }
}

export interface IAreaContract {
    value: number;
    unit: AreaUnitContract;
}

export enum AreaUnitContract {
    Undefined = "Undefined",
    SquareCentimeter = "SquareCentimeter",
    SquareFoot = "SquareFoot",
    SquareInch = "SquareInch",
    SquareMeter = "SquareMeter",
    SquareMillimeter = "SquareMillimeter",
}

export class AreaMomentOfInertiaContract implements IAreaMomentOfInertiaContract {
    value!: number;
    unit!: AreaMomentOfInertiaUnitContract;

    constructor(data?: IAreaMomentOfInertiaContract) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.value = _data["value"];
            this.unit = _data["unit"];
        }
    }

    static fromJS(data: any): AreaMomentOfInertiaContract {
        data = typeof data === 'object' ? data : {};
        let result = new AreaMomentOfInertiaContract();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        data["unit"] = this.unit;
        return data;
    }
}

export interface IAreaMomentOfInertiaContract {
    value: number;
    unit: AreaMomentOfInertiaUnitContract;
}

export enum AreaMomentOfInertiaUnitContract {
    Undefined = "Undefined",
    CentimeterToTheFourth = "CentimeterToTheFourth",
    FootToTheFourth = "FootToTheFourth",
    InchToTheFourth = "InchToTheFourth",
    MeterToTheFourth = "MeterToTheFourth",
    MillimeterToTheFourth = "MillimeterToTheFourth",
}

export class CreateSectionProfileRequest implements ICreateSectionProfileRequest {
    modelId!: string;
    area!: AreaContract;
    strongAxisMomentOfInertia!: AreaMomentOfInertiaContract;
    weakAxisMomentOfInertia!: AreaMomentOfInertiaContract;
    polarMomentOfInertia!: AreaMomentOfInertiaContract;
    strongAxisShearArea!: AreaContract;
    weakAxisShearArea!: AreaContract;

    constructor(data?: ICreateSectionProfileRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.area = new AreaContract();
            this.strongAxisMomentOfInertia = new AreaMomentOfInertiaContract();
            this.weakAxisMomentOfInertia = new AreaMomentOfInertiaContract();
            this.polarMomentOfInertia = new AreaMomentOfInertiaContract();
            this.strongAxisShearArea = new AreaContract();
            this.weakAxisShearArea = new AreaContract();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.modelId = _data["modelId"];
            this.area = _data["area"] ? AreaContract.fromJS(_data["area"]) : new AreaContract();
            this.strongAxisMomentOfInertia = _data["strongAxisMomentOfInertia"] ? AreaMomentOfInertiaContract.fromJS(_data["strongAxisMomentOfInertia"]) : new AreaMomentOfInertiaContract();
            this.weakAxisMomentOfInertia = _data["weakAxisMomentOfInertia"] ? AreaMomentOfInertiaContract.fromJS(_data["weakAxisMomentOfInertia"]) : new AreaMomentOfInertiaContract();
            this.polarMomentOfInertia = _data["polarMomentOfInertia"] ? AreaMomentOfInertiaContract.fromJS(_data["polarMomentOfInertia"]) : new AreaMomentOfInertiaContract();
            this.strongAxisShearArea = _data["strongAxisShearArea"] ? AreaContract.fromJS(_data["strongAxisShearArea"]) : new AreaContract();
            this.weakAxisShearArea = _data["weakAxisShearArea"] ? AreaContract.fromJS(_data["weakAxisShearArea"]) : new AreaContract();
        }
    }

    static fromJS(data: any): CreateSectionProfileRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CreateSectionProfileRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["modelId"] = this.modelId;
        data["area"] = this.area ? this.area.toJSON() : <any>undefined;
        data["strongAxisMomentOfInertia"] = this.strongAxisMomentOfInertia ? this.strongAxisMomentOfInertia.toJSON() : <any>undefined;
        data["weakAxisMomentOfInertia"] = this.weakAxisMomentOfInertia ? this.weakAxisMomentOfInertia.toJSON() : <any>undefined;
        data["polarMomentOfInertia"] = this.polarMomentOfInertia ? this.polarMomentOfInertia.toJSON() : <any>undefined;
        data["strongAxisShearArea"] = this.strongAxisShearArea ? this.strongAxisShearArea.toJSON() : <any>undefined;
        data["weakAxisShearArea"] = this.weakAxisShearArea ? this.weakAxisShearArea.toJSON() : <any>undefined;
        return data;
    }
}

export interface ICreateSectionProfileRequest {
    modelId: string;
    area: AreaContract;
    strongAxisMomentOfInertia: AreaMomentOfInertiaContract;
    weakAxisMomentOfInertia: AreaMomentOfInertiaContract;
    polarMomentOfInertia: AreaMomentOfInertiaContract;
    strongAxisShearArea: AreaContract;
    weakAxisShearArea: AreaContract;
}

export abstract class BeamOsEntityContractBase extends BeamOsContractBase implements IBeamOsEntityContractBase {
    id!: string;

    protected _discriminator: string;

    constructor(data?: IBeamOsEntityContractBase) {
        super(data);
        this._discriminator = "BeamOsEntityContractBase";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): BeamOsEntityContractBase {
        data = typeof data === 'object' ? data : {};
        if (data["$type"] === "3") {
            let result = new PointLoadResponse();
            result.init(data);
            return result;
        }
        if (data["$type"] === "2") {
            let result = new NodeResponse();
            result.init(data);
            return result;
        }
        if (data["$type"] === "1") {
            let result = new Element1DResponse();
            result.init(data);
            return result;
        }
        if (data["$type"] === "0") {
            let result = new ModelResponse();
            result.init(data);
            return result;
        }
        if (data["$type"] === "4") {
            let result = new ShearDiagramResponse();
            result.init(data);
            return result;
        }
        if (data["$type"] === "5") {
            let result = new MomentDiagramResponse();
            result.init(data);
            return result;
        }
        throw new Error("The abstract class 'BeamOsEntityContractBase' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["$type"] = this._discriminator;
        data["id"] = this.id;
        super.toJSON(data);
        return data;
    }
}

export interface IBeamOsEntityContractBase extends IBeamOsContractBase {
    id: string;
}

export class PointLoadResponse extends BeamOsEntityContractBase implements IPointLoadResponse {
    modelId!: string;
    nodeId!: string;
    force!: ForceContract;
    direction!: Vector3;

    constructor(data?: IPointLoadResponse) {
        super(data);
        if (!data) {
            this.force = new ForceContract();
            this.direction = new Vector3();
        }
        this._discriminator = "3";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.modelId = _data["modelId"];
            this.nodeId = _data["nodeId"];
            this.force = _data["force"] ? ForceContract.fromJS(_data["force"]) : new ForceContract();
            this.direction = _data["direction"] ? Vector3.fromJS(_data["direction"]) : new Vector3();
        }
    }

    static fromJS(data: any): PointLoadResponse {
        data = typeof data === 'object' ? data : {};
        let result = new PointLoadResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["modelId"] = this.modelId;
        data["nodeId"] = this.nodeId;
        data["force"] = this.force ? this.force.toJSON() : <any>undefined;
        data["direction"] = this.direction ? this.direction.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IPointLoadResponse extends IBeamOsEntityContractBase {
    modelId: string;
    nodeId: string;
    force: ForceContract;
    direction: Vector3;
}

export class Vector3 implements IVector3 {
    x!: number;
    y!: number;
    z!: number;

    constructor(data?: IVector3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.x = _data["x"];
            this.y = _data["y"];
            this.z = _data["z"];
        }
    }

    static fromJS(data: any): Vector3 {
        data = typeof data === 'object' ? data : {};
        let result = new Vector3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["x"] = this.x;
        data["y"] = this.y;
        data["z"] = this.z;
        return data;
    }
}

export interface IVector3 {
    x: number;
    y: number;
    z: number;
}

export class ModelResponse extends BeamOsEntityContractBase implements IModelResponse {
    name!: string;
    description!: string;
    settings!: PhysicalModelSettings;
    nodes?: NodeResponse[] | undefined;
    element1ds?: Element1DResponse[] | undefined;
    materials?: MaterialResponse[] | undefined;
    sectionProfiles?: SectionProfileResponse[] | undefined;
    pointLoads?: PointLoadResponse[] | undefined;
    momentLoads?: MomentLoadResponse[] | undefined;

    constructor(data?: IModelResponse) {
        super(data);
        if (!data) {
            this.settings = new PhysicalModelSettings();
        }
        this._discriminator = "0";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.name = _data["name"];
            this.description = _data["description"];
            this.settings = _data["settings"] ? PhysicalModelSettings.fromJS(_data["settings"]) : new PhysicalModelSettings();
            if (Array.isArray(_data["nodes"])) {
                this.nodes = [] as any;
                for (let item of _data["nodes"])
                    this.nodes!.push(NodeResponse.fromJS(item));
            }
            if (Array.isArray(_data["element1ds"])) {
                this.element1ds = [] as any;
                for (let item of _data["element1ds"])
                    this.element1ds!.push(Element1DResponse.fromJS(item));
            }
            if (Array.isArray(_data["materials"])) {
                this.materials = [] as any;
                for (let item of _data["materials"])
                    this.materials!.push(MaterialResponse.fromJS(item));
            }
            if (Array.isArray(_data["sectionProfiles"])) {
                this.sectionProfiles = [] as any;
                for (let item of _data["sectionProfiles"])
                    this.sectionProfiles!.push(SectionProfileResponse.fromJS(item));
            }
            if (Array.isArray(_data["pointLoads"])) {
                this.pointLoads = [] as any;
                for (let item of _data["pointLoads"])
                    this.pointLoads!.push(PointLoadResponse.fromJS(item));
            }
            if (Array.isArray(_data["momentLoads"])) {
                this.momentLoads = [] as any;
                for (let item of _data["momentLoads"])
                    this.momentLoads!.push(MomentLoadResponse.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ModelResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ModelResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["description"] = this.description;
        data["settings"] = this.settings ? this.settings.toJSON() : <any>undefined;
        if (Array.isArray(this.nodes)) {
            data["nodes"] = [];
            for (let item of this.nodes)
                data["nodes"].push(item.toJSON());
        }
        if (Array.isArray(this.element1ds)) {
            data["element1ds"] = [];
            for (let item of this.element1ds)
                data["element1ds"].push(item.toJSON());
        }
        if (Array.isArray(this.materials)) {
            data["materials"] = [];
            for (let item of this.materials)
                data["materials"].push(item.toJSON());
        }
        if (Array.isArray(this.sectionProfiles)) {
            data["sectionProfiles"] = [];
            for (let item of this.sectionProfiles)
                data["sectionProfiles"].push(item.toJSON());
        }
        if (Array.isArray(this.pointLoads)) {
            data["pointLoads"] = [];
            for (let item of this.pointLoads)
                data["pointLoads"].push(item.toJSON());
        }
        if (Array.isArray(this.momentLoads)) {
            data["momentLoads"] = [];
            for (let item of this.momentLoads)
                data["momentLoads"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export interface IModelResponse extends IBeamOsEntityContractBase {
    name: string;
    description: string;
    settings: PhysicalModelSettings;
    nodes?: NodeResponse[] | undefined;
    element1ds?: Element1DResponse[] | undefined;
    materials?: MaterialResponse[] | undefined;
    sectionProfiles?: SectionProfileResponse[] | undefined;
    pointLoads?: PointLoadResponse[] | undefined;
    momentLoads?: MomentLoadResponse[] | undefined;
}

export class PhysicalModelSettings implements IPhysicalModelSettings {
    unitSettings!: UnitSettingsContract;
    analysisSettings!: AnalysisSettingsContract;
    yAxisUp!: boolean;

    constructor(data?: IPhysicalModelSettings) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.unitSettings = new UnitSettingsContract();
            this.analysisSettings = new AnalysisSettingsContract();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.unitSettings = _data["unitSettings"] ? UnitSettingsContract.fromJS(_data["unitSettings"]) : new UnitSettingsContract();
            this.analysisSettings = _data["analysisSettings"] ? AnalysisSettingsContract.fromJS(_data["analysisSettings"]) : new AnalysisSettingsContract();
            this.yAxisUp = _data["yAxisUp"];
        }
    }

    static fromJS(data: any): PhysicalModelSettings {
        data = typeof data === 'object' ? data : {};
        let result = new PhysicalModelSettings();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["unitSettings"] = this.unitSettings ? this.unitSettings.toJSON() : <any>undefined;
        data["analysisSettings"] = this.analysisSettings ? this.analysisSettings.toJSON() : <any>undefined;
        data["yAxisUp"] = this.yAxisUp;
        return data;
    }
}

export interface IPhysicalModelSettings {
    unitSettings: UnitSettingsContract;
    analysisSettings: AnalysisSettingsContract;
    yAxisUp: boolean;
}

export class UnitSettingsContract implements IUnitSettingsContract {
    lengthUnit!: LengthUnitContract;
    forceUnit!: ForceUnitContract;
    angleUnit!: AngleUnitContract;

    constructor(data?: IUnitSettingsContract) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.lengthUnit = _data["lengthUnit"];
            this.forceUnit = _data["forceUnit"];
            this.angleUnit = _data["angleUnit"];
        }
    }

    static fromJS(data: any): UnitSettingsContract {
        data = typeof data === 'object' ? data : {};
        let result = new UnitSettingsContract();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["lengthUnit"] = this.lengthUnit;
        data["forceUnit"] = this.forceUnit;
        data["angleUnit"] = this.angleUnit;
        return data;
    }
}

export interface IUnitSettingsContract {
    lengthUnit: LengthUnitContract;
    forceUnit: ForceUnitContract;
    angleUnit: AngleUnitContract;
}

export class AnalysisSettingsContract implements IAnalysisSettingsContract {
    element1DAnalysisType!: Element1dAnalysisType;

    constructor(data?: IAnalysisSettingsContract) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.element1DAnalysisType = _data["element1DAnalysisType"];
        }
    }

    static fromJS(data: any): AnalysisSettingsContract {
        data = typeof data === 'object' ? data : {};
        let result = new AnalysisSettingsContract();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["element1DAnalysisType"] = this.element1DAnalysisType;
        return data;
    }
}

export interface IAnalysisSettingsContract {
    element1DAnalysisType: Element1dAnalysisType;
}

export enum Element1dAnalysisType {
    Undefined = "Undefined",
    Euler = "Euler",
    Timoshenko = "Timoshenko",
}

export class NodeResponse extends BeamOsEntityContractBase implements INodeResponse {
    modelId!: string;
    locationPoint!: Point;
    restraint!: RestraintContract;
    customData?: { [key: string]: any; } | undefined;

    constructor(data?: INodeResponse) {
        super(data);
        if (!data) {
            this.locationPoint = new Point();
            this.restraint = new RestraintContract();
        }
        this._discriminator = "2";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.modelId = _data["modelId"];
            this.locationPoint = _data["locationPoint"] ? Point.fromJS(_data["locationPoint"]) : new Point();
            this.restraint = _data["restraint"] ? RestraintContract.fromJS(_data["restraint"]) : new RestraintContract();
            if (_data["customData"]) {
                this.customData = {} as any;
                for (let key in _data["customData"]) {
                    if (_data["customData"].hasOwnProperty(key))
                        (<any>this.customData)![key] = _data["customData"][key];
                }
            }
        }
    }

    static fromJS(data: any): NodeResponse {
        data = typeof data === 'object' ? data : {};
        let result = new NodeResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["modelId"] = this.modelId;
        data["locationPoint"] = this.locationPoint ? this.locationPoint.toJSON() : <any>undefined;
        data["restraint"] = this.restraint ? this.restraint.toJSON() : <any>undefined;
        if (this.customData) {
            data["customData"] = {};
            for (let key in this.customData) {
                if (this.customData.hasOwnProperty(key))
                    (<any>data["customData"])[key] = (<any>this.customData)[key];
            }
        }
        super.toJSON(data);
        return data;
    }
}

export interface INodeResponse extends IBeamOsEntityContractBase {
    modelId: string;
    locationPoint: Point;
    restraint: RestraintContract;
    customData?: { [key: string]: any; } | undefined;
}

export class Point extends BeamOsContractBase implements IPoint {
    xCoordinate!: number;
    yCoordinate!: number;
    zCoordinate!: number;
    lengthUnit!: LengthUnitContract;

    constructor(data?: IPoint) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.xCoordinate = _data["xCoordinate"];
            this.yCoordinate = _data["yCoordinate"];
            this.zCoordinate = _data["zCoordinate"];
            this.lengthUnit = _data["lengthUnit"];
        }
    }

    static fromJS(data: any): Point {
        data = typeof data === 'object' ? data : {};
        let result = new Point();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["xCoordinate"] = this.xCoordinate;
        data["yCoordinate"] = this.yCoordinate;
        data["zCoordinate"] = this.zCoordinate;
        data["lengthUnit"] = this.lengthUnit;
        super.toJSON(data);
        return data;
    }
}

export interface IPoint extends IBeamOsContractBase {
    xCoordinate: number;
    yCoordinate: number;
    zCoordinate: number;
    lengthUnit: LengthUnitContract;
}

export class RestraintContract extends BeamOsContractBase implements IRestraintContract {
    canTranslateAlongX!: boolean;
    canTranslateAlongY!: boolean;
    canTranslateAlongZ!: boolean;
    canRotateAboutX!: boolean;
    canRotateAboutY!: boolean;
    canRotateAboutZ!: boolean;

    constructor(data?: IRestraintContract) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.canTranslateAlongX = _data["canTranslateAlongX"];
            this.canTranslateAlongY = _data["canTranslateAlongY"];
            this.canTranslateAlongZ = _data["canTranslateAlongZ"];
            this.canRotateAboutX = _data["canRotateAboutX"];
            this.canRotateAboutY = _data["canRotateAboutY"];
            this.canRotateAboutZ = _data["canRotateAboutZ"];
        }
    }

    static fromJS(data: any): RestraintContract {
        data = typeof data === 'object' ? data : {};
        let result = new RestraintContract();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["canTranslateAlongX"] = this.canTranslateAlongX;
        data["canTranslateAlongY"] = this.canTranslateAlongY;
        data["canTranslateAlongZ"] = this.canTranslateAlongZ;
        data["canRotateAboutX"] = this.canRotateAboutX;
        data["canRotateAboutY"] = this.canRotateAboutY;
        data["canRotateAboutZ"] = this.canRotateAboutZ;
        super.toJSON(data);
        return data;
    }
}

export interface IRestraintContract extends IBeamOsContractBase {
    canTranslateAlongX: boolean;
    canTranslateAlongY: boolean;
    canTranslateAlongZ: boolean;
    canRotateAboutX: boolean;
    canRotateAboutY: boolean;
    canRotateAboutZ: boolean;
}

export class Element1DResponse extends BeamOsEntityContractBase implements IElement1DResponse {
    modelId!: string;
    startNodeId!: string;
    endNodeId!: string;
    materialId!: string;
    sectionProfileId!: string;
    sectionProfileRotation!: AngleContract;
    customData?: { [key: string]: any; } | undefined;

    constructor(data?: IElement1DResponse) {
        super(data);
        if (!data) {
            this.sectionProfileRotation = new AngleContract();
        }
        this._discriminator = "1";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.modelId = _data["modelId"];
            this.startNodeId = _data["startNodeId"];
            this.endNodeId = _data["endNodeId"];
            this.materialId = _data["materialId"];
            this.sectionProfileId = _data["sectionProfileId"];
            this.sectionProfileRotation = _data["sectionProfileRotation"] ? AngleContract.fromJS(_data["sectionProfileRotation"]) : new AngleContract();
            if (_data["customData"]) {
                this.customData = {} as any;
                for (let key in _data["customData"]) {
                    if (_data["customData"].hasOwnProperty(key))
                        (<any>this.customData)![key] = _data["customData"][key];
                }
            }
        }
    }

    static fromJS(data: any): Element1DResponse {
        data = typeof data === 'object' ? data : {};
        let result = new Element1DResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["modelId"] = this.modelId;
        data["startNodeId"] = this.startNodeId;
        data["endNodeId"] = this.endNodeId;
        data["materialId"] = this.materialId;
        data["sectionProfileId"] = this.sectionProfileId;
        data["sectionProfileRotation"] = this.sectionProfileRotation ? this.sectionProfileRotation.toJSON() : <any>undefined;
        if (this.customData) {
            data["customData"] = {};
            for (let key in this.customData) {
                if (this.customData.hasOwnProperty(key))
                    (<any>data["customData"])[key] = (<any>this.customData)[key];
            }
        }
        super.toJSON(data);
        return data;
    }
}

export interface IElement1DResponse extends IBeamOsEntityContractBase {
    modelId: string;
    startNodeId: string;
    endNodeId: string;
    materialId: string;
    sectionProfileId: string;
    sectionProfileRotation: AngleContract;
    customData?: { [key: string]: any; } | undefined;
}

export class MaterialResponse implements IMaterialResponse {
    id!: string;
    modelId!: string;
    modulusOfElasticity!: PressureContract;
    modulusOfRigidity!: PressureContract;

    constructor(data?: IMaterialResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.modulusOfElasticity = new PressureContract();
            this.modulusOfRigidity = new PressureContract();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.modelId = _data["modelId"];
            this.modulusOfElasticity = _data["modulusOfElasticity"] ? PressureContract.fromJS(_data["modulusOfElasticity"]) : new PressureContract();
            this.modulusOfRigidity = _data["modulusOfRigidity"] ? PressureContract.fromJS(_data["modulusOfRigidity"]) : new PressureContract();
        }
    }

    static fromJS(data: any): MaterialResponse {
        data = typeof data === 'object' ? data : {};
        let result = new MaterialResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["modelId"] = this.modelId;
        data["modulusOfElasticity"] = this.modulusOfElasticity ? this.modulusOfElasticity.toJSON() : <any>undefined;
        data["modulusOfRigidity"] = this.modulusOfRigidity ? this.modulusOfRigidity.toJSON() : <any>undefined;
        return data;
    }
}

export interface IMaterialResponse {
    id: string;
    modelId: string;
    modulusOfElasticity: PressureContract;
    modulusOfRigidity: PressureContract;
}

export class PressureContract implements IPressureContract {
    value!: number;
    unit!: PressureUnitContract;

    constructor(data?: IPressureContract) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.value = _data["value"];
            this.unit = _data["unit"];
        }
    }

    static fromJS(data: any): PressureContract {
        data = typeof data === 'object' ? data : {};
        let result = new PressureContract();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        data["unit"] = this.unit;
        return data;
    }
}

export interface IPressureContract {
    value: number;
    unit: PressureUnitContract;
}

export enum PressureUnitContract {
    Undefined = "Undefined",
    KilonewtonPerSquareCentimeter = "KilonewtonPerSquareCentimeter",
    KilonewtonPerSquareMeter = "KilonewtonPerSquareMeter",
    KilonewtonPerSquareMillimeter = "KilonewtonPerSquareMillimeter",
    KilopoundForcePerSquareFoot = "KilopoundForcePerSquareFoot",
    KilopoundForcePerSquareInch = "KilopoundForcePerSquareInch",
    NewtonPerSquareCentimeter = "NewtonPerSquareCentimeter",
    NewtonPerSquareMeter = "NewtonPerSquareMeter",
    NewtonPerSquareMillimeter = "NewtonPerSquareMillimeter",
    PoundForcePerSquareFoot = "PoundForcePerSquareFoot",
    PoundForcePerSquareInch = "PoundForcePerSquareInch",
}

export class MomentLoadResponse implements IMomentLoadResponse {
    id!: string;
    modelId!: string;
    nodeId!: string;
    torque!: TorqueContract;
    axisDirection!: Vector3;

    constructor(data?: IMomentLoadResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.torque = new TorqueContract();
            this.axisDirection = new Vector3();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.modelId = _data["modelId"];
            this.nodeId = _data["nodeId"];
            this.torque = _data["torque"] ? TorqueContract.fromJS(_data["torque"]) : new TorqueContract();
            this.axisDirection = _data["axisDirection"] ? Vector3.fromJS(_data["axisDirection"]) : new Vector3();
        }
    }

    static fromJS(data: any): MomentLoadResponse {
        data = typeof data === 'object' ? data : {};
        let result = new MomentLoadResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["modelId"] = this.modelId;
        data["nodeId"] = this.nodeId;
        data["torque"] = this.torque ? this.torque.toJSON() : <any>undefined;
        data["axisDirection"] = this.axisDirection ? this.axisDirection.toJSON() : <any>undefined;
        return data;
    }
}

export interface IMomentLoadResponse {
    id: string;
    modelId: string;
    nodeId: string;
    torque: TorqueContract;
    axisDirection: Vector3;
}

export class ShearDiagramResponse extends BeamOsEntityContractBase implements IShearDiagramResponse {
    element1DId!: string;
    globalShearDirection!: Vector3;
    lengthUnit!: string;
    forceUnit!: string;
    elementLength!: LengthContract;
    intervals!: DiagramConsistentIntervalResponse[];

    constructor(data?: IShearDiagramResponse) {
        super(data);
        if (!data) {
            this.globalShearDirection = new Vector3();
            this.elementLength = new LengthContract();
            this.intervals = [];
        }
        this._discriminator = "4";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.element1DId = _data["element1DId"];
            this.globalShearDirection = _data["globalShearDirection"] ? Vector3.fromJS(_data["globalShearDirection"]) : new Vector3();
            this.lengthUnit = _data["lengthUnit"];
            this.forceUnit = _data["forceUnit"];
            this.elementLength = _data["elementLength"] ? LengthContract.fromJS(_data["elementLength"]) : new LengthContract();
            if (Array.isArray(_data["intervals"])) {
                this.intervals = [] as any;
                for (let item of _data["intervals"])
                    this.intervals!.push(DiagramConsistentIntervalResponse.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ShearDiagramResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ShearDiagramResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["element1DId"] = this.element1DId;
        data["globalShearDirection"] = this.globalShearDirection ? this.globalShearDirection.toJSON() : <any>undefined;
        data["lengthUnit"] = this.lengthUnit;
        data["forceUnit"] = this.forceUnit;
        data["elementLength"] = this.elementLength ? this.elementLength.toJSON() : <any>undefined;
        if (Array.isArray(this.intervals)) {
            data["intervals"] = [];
            for (let item of this.intervals)
                data["intervals"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export interface IShearDiagramResponse extends IBeamOsEntityContractBase {
    element1DId: string;
    globalShearDirection: Vector3;
    lengthUnit: string;
    forceUnit: string;
    elementLength: LengthContract;
    intervals: DiagramConsistentIntervalResponse[];
}

export class DiagramConsistentIntervalResponse implements IDiagramConsistentIntervalResponse {
    startLocation!: LengthContract;
    endLocation!: LengthContract;
    polynomialCoefficients!: number[];

    constructor(data?: IDiagramConsistentIntervalResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.startLocation = new LengthContract();
            this.endLocation = new LengthContract();
            this.polynomialCoefficients = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.startLocation = _data["startLocation"] ? LengthContract.fromJS(_data["startLocation"]) : new LengthContract();
            this.endLocation = _data["endLocation"] ? LengthContract.fromJS(_data["endLocation"]) : new LengthContract();
            if (Array.isArray(_data["polynomialCoefficients"])) {
                this.polynomialCoefficients = [] as any;
                for (let item of _data["polynomialCoefficients"])
                    this.polynomialCoefficients!.push(item);
            }
        }
    }

    static fromJS(data: any): DiagramConsistentIntervalResponse {
        data = typeof data === 'object' ? data : {};
        let result = new DiagramConsistentIntervalResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["startLocation"] = this.startLocation ? this.startLocation.toJSON() : <any>undefined;
        data["endLocation"] = this.endLocation ? this.endLocation.toJSON() : <any>undefined;
        if (Array.isArray(this.polynomialCoefficients)) {
            data["polynomialCoefficients"] = [];
            for (let item of this.polynomialCoefficients)
                data["polynomialCoefficients"].push(item);
        }
        return data;
    }
}

export interface IDiagramConsistentIntervalResponse {
    startLocation: LengthContract;
    endLocation: LengthContract;
    polynomialCoefficients: number[];
}

export class MomentDiagramResponse extends BeamOsEntityContractBase implements IMomentDiagramResponse {
    element1DId!: string;
    lengthUnit!: string;
    forceUnit!: string;
    elementLength!: LengthContract;
    intervals!: DiagramConsistentIntervalResponse[];

    constructor(data?: IMomentDiagramResponse) {
        super(data);
        if (!data) {
            this.elementLength = new LengthContract();
            this.intervals = [];
        }
        this._discriminator = "5";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.element1DId = _data["element1DId"];
            this.lengthUnit = _data["lengthUnit"];
            this.forceUnit = _data["forceUnit"];
            this.elementLength = _data["elementLength"] ? LengthContract.fromJS(_data["elementLength"]) : new LengthContract();
            if (Array.isArray(_data["intervals"])) {
                this.intervals = [] as any;
                for (let item of _data["intervals"])
                    this.intervals!.push(DiagramConsistentIntervalResponse.fromJS(item));
            }
        }
    }

    static fromJS(data: any): MomentDiagramResponse {
        data = typeof data === 'object' ? data : {};
        let result = new MomentDiagramResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["element1DId"] = this.element1DId;
        data["lengthUnit"] = this.lengthUnit;
        data["forceUnit"] = this.forceUnit;
        data["elementLength"] = this.elementLength ? this.elementLength.toJSON() : <any>undefined;
        if (Array.isArray(this.intervals)) {
            data["intervals"] = [];
            for (let item of this.intervals)
                data["intervals"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export interface IMomentDiagramResponse extends IBeamOsEntityContractBase {
    element1DId: string;
    lengthUnit: string;
    forceUnit: string;
    elementLength: LengthContract;
    intervals: DiagramConsistentIntervalResponse[];
}

export class CreatePointLoadRequest implements ICreatePointLoadRequest {
    nodeId!: string;
    force!: ForceContract;
    direction!: Vector3;

    constructor(data?: ICreatePointLoadRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.force = new ForceContract();
            this.direction = new Vector3();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.nodeId = _data["nodeId"];
            this.force = _data["force"] ? ForceContract.fromJS(_data["force"]) : new ForceContract();
            this.direction = _data["direction"] ? Vector3.fromJS(_data["direction"]) : new Vector3();
        }
    }

    static fromJS(data: any): CreatePointLoadRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CreatePointLoadRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["nodeId"] = this.nodeId;
        data["force"] = this.force ? this.force.toJSON() : <any>undefined;
        data["direction"] = this.direction ? this.direction.toJSON() : <any>undefined;
        return data;
    }
}

export interface ICreatePointLoadRequest {
    nodeId: string;
    force: ForceContract;
    direction: Vector3;
}

export class CreateNodeRequest implements ICreateNodeRequest {
    modelId!: string;
    locationPoint!: Point;
    restraint?: RestraintContract | undefined;
    customData?: { [key: string]: any; } | undefined;

    constructor(data?: ICreateNodeRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.locationPoint = new Point();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.modelId = _data["modelId"];
            this.locationPoint = _data["locationPoint"] ? Point.fromJS(_data["locationPoint"]) : new Point();
            this.restraint = _data["restraint"] ? RestraintContract.fromJS(_data["restraint"]) : <any>undefined;
            if (_data["customData"]) {
                this.customData = {} as any;
                for (let key in _data["customData"]) {
                    if (_data["customData"].hasOwnProperty(key))
                        (<any>this.customData)![key] = _data["customData"][key];
                }
            }
        }
    }

    static fromJS(data: any): CreateNodeRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CreateNodeRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["modelId"] = this.modelId;
        data["locationPoint"] = this.locationPoint ? this.locationPoint.toJSON() : <any>undefined;
        data["restraint"] = this.restraint ? this.restraint.toJSON() : <any>undefined;
        if (this.customData) {
            data["customData"] = {};
            for (let key in this.customData) {
                if (this.customData.hasOwnProperty(key))
                    (<any>data["customData"])[key] = (<any>this.customData)[key];
            }
        }
        return data;
    }
}

export interface ICreateNodeRequest {
    modelId: string;
    locationPoint: Point;
    restraint?: RestraintContract | undefined;
    customData?: { [key: string]: any; } | undefined;
}

export class PatchNodeRequest implements IPatchNodeRequest {
    locationPoint?: PatchPointRequest | undefined;
    restraint?: PatchRestraintRequest | undefined;

    constructor(data?: IPatchNodeRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.locationPoint = _data["locationPoint"] ? PatchPointRequest.fromJS(_data["locationPoint"]) : <any>undefined;
            this.restraint = _data["restraint"] ? PatchRestraintRequest.fromJS(_data["restraint"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatchNodeRequest {
        data = typeof data === 'object' ? data : {};
        let result = new PatchNodeRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["locationPoint"] = this.locationPoint ? this.locationPoint.toJSON() : <any>undefined;
        data["restraint"] = this.restraint ? this.restraint.toJSON() : <any>undefined;
        return data;
    }
}

export interface IPatchNodeRequest {
    locationPoint?: PatchPointRequest | undefined;
    restraint?: PatchRestraintRequest | undefined;
}

export class PatchPointRequest implements IPatchPointRequest {
    lengthUnit!: string;
    xCoordinate?: number | undefined;
    yCoordinate?: number | undefined;
    zCoordinate?: number | undefined;

    constructor(data?: IPatchPointRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.lengthUnit = _data["lengthUnit"];
            this.xCoordinate = _data["xCoordinate"];
            this.yCoordinate = _data["yCoordinate"];
            this.zCoordinate = _data["zCoordinate"];
        }
    }

    static fromJS(data: any): PatchPointRequest {
        data = typeof data === 'object' ? data : {};
        let result = new PatchPointRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["lengthUnit"] = this.lengthUnit;
        data["xCoordinate"] = this.xCoordinate;
        data["yCoordinate"] = this.yCoordinate;
        data["zCoordinate"] = this.zCoordinate;
        return data;
    }
}

export interface IPatchPointRequest {
    lengthUnit: string;
    xCoordinate?: number | undefined;
    yCoordinate?: number | undefined;
    zCoordinate?: number | undefined;
}

export class PatchRestraintRequest implements IPatchRestraintRequest {
    canTranslateAlongX?: boolean | undefined;
    canTranslateAlongY?: boolean | undefined;
    canTranslateAlongZ?: boolean | undefined;
    canRotateAboutX?: boolean | undefined;
    canRotateAboutY?: boolean | undefined;
    canRotateAboutZ?: boolean | undefined;

    constructor(data?: IPatchRestraintRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.canTranslateAlongX = _data["canTranslateAlongX"];
            this.canTranslateAlongY = _data["canTranslateAlongY"];
            this.canTranslateAlongZ = _data["canTranslateAlongZ"];
            this.canRotateAboutX = _data["canRotateAboutX"];
            this.canRotateAboutY = _data["canRotateAboutY"];
            this.canRotateAboutZ = _data["canRotateAboutZ"];
        }
    }

    static fromJS(data: any): PatchRestraintRequest {
        data = typeof data === 'object' ? data : {};
        let result = new PatchRestraintRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["canTranslateAlongX"] = this.canTranslateAlongX;
        data["canTranslateAlongY"] = this.canTranslateAlongY;
        data["canTranslateAlongZ"] = this.canTranslateAlongZ;
        data["canRotateAboutX"] = this.canRotateAboutX;
        data["canRotateAboutY"] = this.canRotateAboutY;
        data["canRotateAboutZ"] = this.canRotateAboutZ;
        return data;
    }
}

export interface IPatchRestraintRequest {
    canTranslateAlongX?: boolean | undefined;
    canTranslateAlongY?: boolean | undefined;
    canTranslateAlongZ?: boolean | undefined;
    canRotateAboutX?: boolean | undefined;
    canRotateAboutY?: boolean | undefined;
    canRotateAboutZ?: boolean | undefined;
}

export class CreateMomentLoadRequest implements ICreateMomentLoadRequest {
    nodeId!: string;
    torque!: TorqueContract;
    axisDirection!: Vector3;

    constructor(data?: ICreateMomentLoadRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.torque = new TorqueContract();
            this.axisDirection = new Vector3();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.nodeId = _data["nodeId"];
            this.torque = _data["torque"] ? TorqueContract.fromJS(_data["torque"]) : new TorqueContract();
            this.axisDirection = _data["axisDirection"] ? Vector3.fromJS(_data["axisDirection"]) : new Vector3();
        }
    }

    static fromJS(data: any): CreateMomentLoadRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CreateMomentLoadRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["nodeId"] = this.nodeId;
        data["torque"] = this.torque ? this.torque.toJSON() : <any>undefined;
        data["axisDirection"] = this.axisDirection ? this.axisDirection.toJSON() : <any>undefined;
        return data;
    }
}

export interface ICreateMomentLoadRequest {
    nodeId: string;
    torque: TorqueContract;
    axisDirection: Vector3;
}

export class GetMomentLoadRequest implements IGetMomentLoadRequest {

    constructor(data?: IGetMomentLoadRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): GetMomentLoadRequest {
        data = typeof data === 'object' ? data : {};
        let result = new GetMomentLoadRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IGetMomentLoadRequest {
}

export class CreateModelRequest implements ICreateModelRequest {
    name!: string;
    description!: string;
    settings!: PhysicalModelSettings;
    id?: string | undefined;

    constructor(data?: ICreateModelRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.settings = new PhysicalModelSettings();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.description = _data["description"];
            this.settings = _data["settings"] ? PhysicalModelSettings.fromJS(_data["settings"]) : new PhysicalModelSettings();
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): CreateModelRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CreateModelRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["description"] = this.description;
        data["settings"] = this.settings ? this.settings.toJSON() : <any>undefined;
        data["id"] = this.id;
        return data;
    }
}

export interface ICreateModelRequest {
    name: string;
    description: string;
    settings: PhysicalModelSettings;
    id?: string | undefined;
}

export class ModelIdRequestWithProperties implements IModelIdRequestWithProperties {

    constructor(data?: IModelIdRequestWithProperties) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): ModelIdRequestWithProperties {
        data = typeof data === 'object' ? data : {};
        let result = new ModelIdRequestWithProperties();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IModelIdRequestWithProperties {
}

export class CreateMaterialRequest implements ICreateMaterialRequest {
    modelId!: string;
    modulusOfElasticity!: PressureContract;
    modulusOfRigidity!: PressureContract;

    constructor(data?: ICreateMaterialRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.modulusOfElasticity = new PressureContract();
            this.modulusOfRigidity = new PressureContract();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.modelId = _data["modelId"];
            this.modulusOfElasticity = _data["modulusOfElasticity"] ? PressureContract.fromJS(_data["modulusOfElasticity"]) : new PressureContract();
            this.modulusOfRigidity = _data["modulusOfRigidity"] ? PressureContract.fromJS(_data["modulusOfRigidity"]) : new PressureContract();
        }
    }

    static fromJS(data: any): CreateMaterialRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CreateMaterialRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["modelId"] = this.modelId;
        data["modulusOfElasticity"] = this.modulusOfElasticity ? this.modulusOfElasticity.toJSON() : <any>undefined;
        data["modulusOfRigidity"] = this.modulusOfRigidity ? this.modulusOfRigidity.toJSON() : <any>undefined;
        return data;
    }
}

export interface ICreateMaterialRequest {
    modelId: string;
    modulusOfElasticity: PressureContract;
    modulusOfRigidity: PressureContract;
}

export class CreateElement1dRequest implements ICreateElement1dRequest {
    modelId!: string;
    startNodeId!: string;
    endNodeId!: string;
    materialId!: string;
    sectionProfileId!: string;
    sectionProfileRotation?: AngleContract | undefined;
    customData?: { [key: string]: any; } | undefined;

    constructor(data?: ICreateElement1dRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.modelId = _data["modelId"];
            this.startNodeId = _data["startNodeId"];
            this.endNodeId = _data["endNodeId"];
            this.materialId = _data["materialId"];
            this.sectionProfileId = _data["sectionProfileId"];
            this.sectionProfileRotation = _data["sectionProfileRotation"] ? AngleContract.fromJS(_data["sectionProfileRotation"]) : <any>undefined;
            if (_data["customData"]) {
                this.customData = {} as any;
                for (let key in _data["customData"]) {
                    if (_data["customData"].hasOwnProperty(key))
                        (<any>this.customData)![key] = _data["customData"][key];
                }
            }
        }
    }

    static fromJS(data: any): CreateElement1dRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CreateElement1dRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["modelId"] = this.modelId;
        data["startNodeId"] = this.startNodeId;
        data["endNodeId"] = this.endNodeId;
        data["materialId"] = this.materialId;
        data["sectionProfileId"] = this.sectionProfileId;
        data["sectionProfileRotation"] = this.sectionProfileRotation ? this.sectionProfileRotation.toJSON() : <any>undefined;
        if (this.customData) {
            data["customData"] = {};
            for (let key in this.customData) {
                if (this.customData.hasOwnProperty(key))
                    (<any>data["customData"])[key] = (<any>this.customData)[key];
            }
        }
        return data;
    }
}

export interface ICreateElement1dRequest {
    modelId: string;
    startNodeId: string;
    endNodeId: string;
    materialId: string;
    sectionProfileId: string;
    sectionProfileRotation?: AngleContract | undefined;
    customData?: { [key: string]: any; } | undefined;
}

export class GetElement1dsRequest implements IGetElement1dsRequest {

    constructor(data?: IGetElement1dsRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): GetElement1dsRequest {
        data = typeof data === 'object' ? data : {};
        let result = new GetElement1dsRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IGetElement1dsRequest {
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}