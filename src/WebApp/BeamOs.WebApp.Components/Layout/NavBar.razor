@using BeamOs.Identity
@using BeamOs.WebApp.Components.Features.TestExplorer
@using Fluxor
@using Microsoft.AspNetCore.Components.Authorization
@using MudBlazor
@using System.Security.Claims
@* @using BeamOs.Common.Identity *@
@* @using BeamOs.WebApp.Client.Components.Components *@
@* @using BeamOs.WebApp.Client.Components.Features.Styles *@
@* @using BeamOs.WebApp.Client.Components.Features.TestExplorer *@

@implements IDisposable

@inject NavigationManager NavigationManager
@inject IState<MainLayoutState> MainLayoutState
@inject IDispatcher Dispatcher
@* @inject AuthenticationStateProvider AuthenticationStateProvider *@

<MudAppBar>
    @* <MudHidden Breakpoint="Breakpoint.SmAndDown">
        <MudIcon Icon="@Icons.Custom.Brands.MudBlazor" Size="Size.Large" />
    </MudHidden> *@
    @* <MudHidden Breakpoint="Breakpoint.MdAndUp">
        <MudIconButton Icon="@Icons.Material.Outlined.Menu" Color="Color.Inherit" Edge="Edge.Start" />
    </MudHidden> *@

    <MudButton Href="/" Class="mr-12">beamOS</MudButton>
    @* <Logo Class="pr-8"/> *@
    <MudStack Row="true">
        <MudButton Href="/reliability">Reliability</MudButton>
        <MudButton Href="@TestExplorer.Href">Test Explorer</MudButton>
        <MudButton Href="/models">Models</MudButton>
        @* <MudButton Href="/models/0a83df88-656e-47d9-98fe-25fd7d370b06">TestModelPage</MudButton> *@
    </MudStack>
    <MudSpacer />
    <MudStack Row="true">
        <MudToggleIconButton
        @bind-Toggled:get="@MainLayoutState.Value.IsDarkMode"
        @bind-Toggled:set="ToggleDarkMode"
        Size="Size.Medium"
        Color="Color.Default"
        Icon="@Icons.Material.Rounded.LightMode"
        ToggledIcon="@Icons.Material.Rounded.DarkMode"
        Class="my-auto" />
        <MudIconButton Target="_blank" Href="https://github.com/connorivy/beamOS" Icon="@Icons.Custom.Brands.GitHub" Edge="Edge.Start" />
        <AuthorizeView>
            <Authorized>
                <MudMenu>
                    <ActivatorContent>
                        <MudAvatar Color="Color.Primary">
                            @if (context.User.Claims.Where(c => c.Type == "picture").FirstOrDefault() is Claim claim)
                            {
                                <MudImage Src="@claim.Value" Alt="@context.User.Identity?.Name"></MudImage>
                            }
                            else
                            {
                                @context.User.Identity?.Name[0]
                            }
                        </MudAvatar>
                    </ActivatorContent>
                    <ChildContent>
                        <MudMenuItem Href="/user-settings">Settings</MudMenuItem>
                        <MudMenuItem OnClick="LogoutUser">Log Out</MudMenuItem>
                    </ChildContent>
                </MudMenu>
                @* <MudLink Href="@logoutRef">Log Out @context.User.Identity?.Name</MudLink> *@
            </Authorized>
            <NotAuthorized>
                <MudButton Href="@loginRef">
                    Log In
                </MudButton>
            </NotAuthorized>
        </AuthorizeView>
    </MudStack>
</MudAppBar>

@code {
    // [Parameter]
    // public bool IsDarkMode { get; set; }

    // [Inject]
    // public IsDarkModeProvider IsDarkModeProvider { get; init; }

    // [Parameter]
    // public EventCallback<bool> IsDarkModeChanged { get; set; }

    // async Task ToggleDarkMode(bool value)
    // {
    //     this.IsDarkModeProvider.IsDarkMode = value;
    //     this.IsDarkMode = value;
    //     await IsDarkModeChanged.InvokeAsync(value);
    // }

    [Inject]
    private AuthenticationStateProvider AuthenticationStateProvider { get; init; }

    private void ToggleDarkMode(bool value)
    {
        Dispatcher.Dispatch(new ToggleDarkMode());
    }

    private string? currentUrl;

    private string logoutRef => $"logout?ReturnUrl={currentUrl}";
    private string loginRef => $"login?ReturnUrl={currentUrl}";

    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private async Task LogoutUser()
    {
        await ((IAuthStateProvider)AuthenticationStateProvider).Logout();
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}
