// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using BeamOs.Common.Domain.Models;
using BeamOs.StructuralAnalysis.Domain.Common;
using BeamOs.StructuralAnalysis.Domain.PhysicalModel.LoadCases;
using BeamOs.StructuralAnalysis.Domain.PhysicalModel.ModelAggregate;
using BeamOs.StructuralAnalysis.Domain.PhysicalModel.MomentLoadAggregate;
using BeamOs.StructuralAnalysis.Domain.PhysicalModel.NodeAggregate;
using BeamOs.StructuralAnalysis.Infrastructure.Common;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using UnitsNet;

#pragma warning disable 219, 612, 618
#nullable disable

namespace BeamOs.StructuralAnalysis.Api
{
    [EntityFrameworkInternal]
    public partial class MomentLoadEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "BeamOs.StructuralAnalysis.Domain.PhysicalModel.MomentLoadAggregate.MomentLoad",
                typeof(MomentLoad),
                baseEntityType,
                propertyCount: 5,
                complexPropertyCount: 1,
                navigationCount: 2,
                foreignKeyCount: 3,
                unnamedIndexCount: 3,
                keyCount: 1);

            var id = runtimeEntityType.AddProperty(
                "Id",
                typeof(MomentLoadId),
                propertyInfo: typeof(BeamOsEntity<MomentLoadId>).GetProperty("Id", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(BeamOsEntity<MomentLoadId>).GetField("<Id>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                valueConverter: new MomentLoadIdConverter());
            id.SetSentinelFromProviderValue(0);

            var modelId = runtimeEntityType.AddProperty(
                "ModelId",
                typeof(ModelId),
                propertyInfo: typeof(BeamOsModelEntity<MomentLoadId>).GetProperty("ModelId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(BeamOsModelEntity<MomentLoadId>).GetField("<ModelId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                afterSaveBehavior: PropertySaveBehavior.Throw,
                valueConverter: new ModelIdConverter());
            modelId.SetSentinelFromProviderValue(new Guid("01995299-f603-7f43-808b-ccb85778f4ef"));

            var loadCaseId = runtimeEntityType.AddProperty(
                "LoadCaseId",
                typeof(LoadCaseId),
                propertyInfo: typeof(MomentLoad).GetProperty("LoadCaseId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MomentLoad).GetField("<LoadCaseId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueConverter: new LoadCaseIdConverter());
            loadCaseId.SetSentinelFromProviderValue(0);

            var nodeId = runtimeEntityType.AddProperty(
                "NodeId",
                typeof(NodeId),
                propertyInfo: typeof(MomentLoad).GetProperty("NodeId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MomentLoad).GetField("<NodeId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueConverter: new NodeIdConverter());
            nodeId.SetSentinelFromProviderValue(0);

            var torque = runtimeEntityType.AddProperty(
                "Torque",
                typeof(Torque),
                propertyInfo: typeof(MomentLoad).GetProperty("Torque", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MomentLoad).GetField("<Torque>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueConverter: new TorqueValueConverter());
            torque.SetSentinelFromProviderValue(0.0);

            AxisDirectionComplexProperty.Create(runtimeEntityType);
            var key = runtimeEntityType.AddKey(
                new[] { id, modelId });
            runtimeEntityType.SetPrimaryKey(key);

            var index = runtimeEntityType.AddIndex(
                new[] { modelId });

            var index0 = runtimeEntityType.AddIndex(
                new[] { loadCaseId, modelId });

            var index1 = runtimeEntityType.AddIndex(
                new[] { nodeId, modelId });

            return runtimeEntityType;
        }

        public static class AxisDirectionComplexProperty
        {
            public static RuntimeComplexProperty Create(RuntimeEntityType declaringType)
            {
                var complexProperty = declaringType.AddComplexProperty("AxisDirection",
                    typeof(UnitVector3d),
                    "BeamOs.StructuralAnalysis.Domain.PhysicalModel.MomentLoadAggregate.MomentLoad.AxisDirection#UnitVector3d",
                    typeof(UnitVector3d),
                    propertyInfo: typeof(MomentLoad).GetProperty("AxisDirection", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    fieldInfo: typeof(MomentLoad).GetField("<AxisDirection>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    propertyCount: 3);

                var complexType = complexProperty.ComplexType;
                var x = complexType.AddProperty(
                    "X",
                    typeof(double),
                    propertyInfo: typeof(UnitVector3d).GetProperty("X", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    fieldInfo: typeof(UnitVector3d).GetField("<X>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    sentinel: 0.0);

                var y = complexType.AddProperty(
                    "Y",
                    typeof(double),
                    propertyInfo: typeof(UnitVector3d).GetProperty("Y", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    fieldInfo: typeof(UnitVector3d).GetField("<Y>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    sentinel: 0.0);

                var z = complexType.AddProperty(
                    "Z",
                    typeof(double),
                    propertyInfo: typeof(UnitVector3d).GetProperty("Z", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    fieldInfo: typeof(UnitVector3d).GetField("<Z>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    sentinel: 0.0);

                complexType.AddAnnotation("Relational:FunctionName", null);
                complexType.AddAnnotation("Relational:Schema", null);
                complexType.AddAnnotation("Relational:SqlQuery", null);
                complexType.AddAnnotation("Relational:TableName", "MomentLoads");
                complexType.AddAnnotation("Relational:ViewName", null);
                complexType.AddAnnotation("Relational:ViewSchema", null);
                return complexProperty;
            }
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ModelId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id") }),
                principalEntityType,
                deleteBehavior: DeleteBehavior.Cascade,
                required: true);

            var model = declaringEntityType.AddNavigation("Model",
                runtimeForeignKey,
                onDependent: true,
                typeof(Model),
                propertyInfo: typeof(BeamOsModelEntity<MomentLoadId>).GetProperty("Model", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(BeamOsModelEntity<MomentLoadId>).GetField("<Model>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var momentLoads = principalEntityType.AddNavigation("MomentLoads",
                runtimeForeignKey,
                onDependent: false,
                typeof(IList<MomentLoad>),
                propertyInfo: typeof(Model).GetProperty("MomentLoads", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Model).GetField("<MomentLoads>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey2(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("LoadCaseId"), declaringEntityType.FindProperty("ModelId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id"), principalEntityType.FindProperty("ModelId") }),
                principalEntityType,
                deleteBehavior: DeleteBehavior.ClientCascade,
                required: true);

            var loadCase = declaringEntityType.AddNavigation("LoadCase",
                runtimeForeignKey,
                onDependent: true,
                typeof(LoadCase),
                propertyInfo: typeof(MomentLoad).GetProperty("LoadCase", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MomentLoad).GetField("<LoadCase>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey3(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("NodeId"), declaringEntityType.FindProperty("ModelId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id"), principalEntityType.FindProperty("ModelId") }),
                principalEntityType,
                deleteBehavior: DeleteBehavior.Cascade,
                required: true);

            var momentLoads = principalEntityType.AddNavigation("MomentLoads",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<MomentLoad>),
                propertyInfo: typeof(NodeDefinition).GetProperty("MomentLoads", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(NodeDefinition).GetField("<MomentLoads>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "MomentLoads");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
