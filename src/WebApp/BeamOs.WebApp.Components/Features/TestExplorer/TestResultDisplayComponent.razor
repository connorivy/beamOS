@using BeamOs.Tests.Common
@using BeamOs.WebApp.Client.Components.Features.TestExplorer
@inherits FluxorComponent

<div class="min-h-0 max-h-fit grow overflow-scroll point-events-auto">
    @if (@State.Value.AssertionResultArray is not null)
    {
        <AssertionResultVectorView AssertionResultArray="@State.Value.AssertionResultArray" ComparedValueName="@State.Value.ComparedValueName" ComparedValueNameCollection="@State.Value.ComparedValueNameCollection" />
    }
    else if (@State.Value.AssertionResultMatrix is not null)
    {
        <AssertionResultMatrixView AssertionResultMatrix="@State.Value.AssertionResultMatrix" ComparedValueName="@State.Value.ComparedValueName" ComparedValueNameCollection="@State.Value.ComparedValueNameCollection" />
    }
</div>

@code {

    [Inject]
    private IState<TestResultsForDisplayState> State { get; init; }

    [FeatureState]
    public record TestResultsForDisplayState(
        bool IsLoading,
        string? ComparedValueName,
        AssertionResult<double?[]>? AssertionResultArray,
        AssertionResult<double?[,]>? AssertionResultMatrix,
        ICollection<string>? ComparedValueNameCollection
    )
    {
        public TestResultsForDisplayState() : this(false, null, null, null, null)
        {

        }
    }

    private bool isLoadingAssertionResults;
    private string? ComparedValueName { get; set; }
    private AssertionResult<double?[]>? AssertionResultArray { get; set; }
    private AssertionResult<double?[,]>? AssertionResultMatrix { get; set; }
    private ICollection<string>? ComparedValueNameCollection { get; set; }

    private void ResetAssertionResults()
    {
        this.AssertionResultArray = null;
        this.AssertionResultMatrix = null;
        this.ComparedValueName = null;
    }

    public static class TestResultsForDisplayStateReducers
    {
        [ReducerMethod]
        public static TestResultsForDisplayState Reducer(
            TestResultsForDisplayState state,
            TestResultSelected action
        )
        {
            AssertionResult<double?[]>? assertionResultArray = null;
            AssertionResult<double?[,]>? assertionResultMatrix = null;

            if (
                action.Result.CalculatedValue is double[] calDoubArrVal
                && action.Result.ExpectedValue is double[] expDoubArrVal)
            {
                assertionResultArray = new(
                    expDoubArrVal.Cast<double?>().ToArray(),
                    calDoubArrVal.Cast<double?>().ToArray()
                );
            }
            else if (
                action.Result.CalculatedValue is double?[] calDoubArrValNul
                && action.Result.ExpectedValue is double?[] expDoubArrValNul)
            {
                assertionResultArray = new(
                    expDoubArrValNul,
                    calDoubArrValNul
                );
            }
            else if (
                action.Result.CalculatedValue is double[,] calDoubMatVal
                && action.Result.ExpectedValue is double[,] expDoubMatVal)
            {
                assertionResultMatrix = new(
                    AssertionResultMatrixView.ToNullable(expDoubMatVal),
                    AssertionResultMatrixView.ToNullable(calDoubMatVal)
                );
            }
            else if (
                action.Result.CalculatedValue is double?[,] calDoubMatValNul
                && action.Result.ExpectedValue is double?[,] expDoubMatValNul)
            {
                assertionResultMatrix = new(
                    expDoubMatValNul,
                    calDoubMatValNul
                );
            }
            return state with
            {
                AssertionResultArray = assertionResultArray,
                AssertionResultMatrix = assertionResultMatrix,
                ComparedValueName = action.Result.ComparedValueName,
                ComparedValueNameCollection = action.Result.ComparedValueNameCollection
            };
        }
    }

    public readonly record struct TestResultSelected(TestResult Result);
}
