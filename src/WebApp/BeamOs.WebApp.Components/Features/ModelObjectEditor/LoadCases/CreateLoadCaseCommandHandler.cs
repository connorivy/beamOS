using BeamOs.CodeGen.StructuralAnalysisApiClient;
using BeamOs.Common.Contracts;
using BeamOs.StructuralAnalysis.Contracts.PhysicalModel.LoadCases;
using BeamOs.WebApp.Components.Features.Common;
using BeamOs.WebApp.EditorCommands.Interfaces;
using Fluxor;
using Microsoft.Extensions.Logging;
using MudBlazor;

namespace BeamOs.WebApp.Components.Features.ModelObjectEditor.LoadCases;

public sealed class CreateLoadCaseClientCommandHandler(
    ILogger<CreateLoadCaseClientCommandHandler> logger,
    ISnackbar snackbar,
    IStructuralAnalysisApiClientV1 structuralAnalysisApiClientV1,
    IDispatcher dispatcher
) : ClientCommandHandlerBase<CreateLoadCaseClientCommand, LoadCase>(logger, snackbar)
{
    protected override async ValueTask<Result<LoadCase>> UpdateServer(
        CreateLoadCaseClientCommand command,
        CancellationToken ct = default
    )
    {
        return await structuralAnalysisApiClientV1.CreateLoadCaseAsync(
            command.ModelId,
            command.Data,
            ct
        );
    }

    protected override ValueTask<Result> UpdateClient(
        CreateLoadCaseClientCommand command,
        Result<LoadCase> serverResponse
    )
    {
        if (serverResponse.IsSuccess)
        {
            dispatcher.Dispatch(command with { LoadCaseId = serverResponse.Value.Id });
        }

        return new(Result.Success);
    }
}

public record CreateLoadCaseClientCommand(LoadCaseData Data) : IBeamOsClientCommand
{
    public Guid Id { get; } = Guid.NewGuid();
    public bool HandledByEditor { get; init; }
    public bool HandledByBlazor { get; init; }
    public bool HandledByServer { get; init; }
    public int TempLoadCaseId { get; init; } = ClientUtils.GenerateTempId();
    public required Guid ModelId { get; init; }

    /// <summary>
    /// The ID of the section profile in the model. This is null for temporary section profiles.
    /// The ID is generated by the server when the section profile is created.
    /// </summary>
    public int? LoadCaseId { get; init; }

    public IBeamOsClientCommand GetUndoCommand(BeamOsClientCommandArgs? args = null) =>
        new DeleteLoadCaseClientCommand
        {
            ModelId = this.ModelId,
            LoadCaseId = this.LoadCaseId ?? this.TempLoadCaseId,
            Data = this.Data,
            HandledByBlazor = args?.HandledByBlazor ?? this.HandledByBlazor,
            HandledByEditor = args?.HandledByEditor ?? this.HandledByEditor,
            HandledByServer = args?.HandledByServer ?? this.HandledByServer,
        };

    public IBeamOsClientCommand WithArgs(BeamOsClientCommandArgs? args = null) =>
        this with
        {
            HandledByBlazor = args?.HandledByBlazor ?? this.HandledByBlazor,
            HandledByEditor = args?.HandledByEditor ?? this.HandledByEditor,
            HandledByServer = args?.HandledByServer ?? this.HandledByServer,
        };
}

public record DeleteLoadCaseClientCommand : IBeamOsClientCommand
{
    public Guid Id { get; } = Guid.NewGuid();
    public bool HandledByEditor { get; init; }
    public bool HandledByBlazor { get; init; }
    public bool HandledByServer { get; init; }
    public required Guid ModelId { get; init; }
    public int LoadCaseId { get; init; }
    public required LoadCaseData Data { get; init; }

    public IBeamOsClientCommand GetUndoCommand(BeamOsClientCommandArgs? args = null) =>
        new CreateLoadCaseClientCommand(this.Data)
        {
            ModelId = this.ModelId,
            LoadCaseId = this.LoadCaseId,
            HandledByBlazor = args?.HandledByBlazor ?? this.HandledByBlazor,
            HandledByEditor = args?.HandledByEditor ?? this.HandledByEditor,
            HandledByServer = args?.HandledByServer ?? this.HandledByServer,
        };

    public IBeamOsClientCommand WithArgs(BeamOsClientCommandArgs? args = null) =>
        this with
        {
            HandledByBlazor = args?.HandledByBlazor ?? this.HandledByBlazor,
            HandledByEditor = args?.HandledByEditor ?? this.HandledByEditor,
            HandledByServer = args?.HandledByServer ?? this.HandledByServer,
        };
}
