@using BeamOS.WebApp.EditorApi
@using BeamOs.ApiClient
@using BeamOs.Contracts.Common
@using BeamOs.Contracts.PhysicalModel.Model

@inject IJSRuntime js
@inject IApiAlphaClient analysisApiClient
@inject EditorApiProxyFactory editorApiAlphaFactory

<MudContainer>
    <div class="bg-gray-900 absolute"></div>
    <canvas id="@elementId" class="absolute"></canvas>
    @if (isLoading)
    {
        <div class="bg-gray-900 w-full h-full absolute justify-center items-center opacity-90">
            <div class="flex w-full h-full m-auto left-0 right-0 top-0 bottom-0 justify-center items-center">
                <div class="rounded animate-spin ease duration-300 w-10 h-10 border-4 border-white"></div>
                <h2 class="px-3 font-bold text-white"> @loadingText ...</h2>
            </div>
        </div>
    }
</MudContainer>

@code {
    private bool isLoading = true;
    private string loadingText = "Loading beamOS editor...";
    public string elementId { get; } = "id" + Guid.NewGuid().ToString("N");
    private IEditorApiAlpha? editorApiAlpha;
    const string physicalModelId = "00000000-0000-0000-0000-000000000000";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isLoading = true;
            editorApiAlpha ??= await editorApiAlphaFactory.Create(elementId);
            loadingText = "Fetching Data";
            StateHasChanged();
            await LoadModel();
            isLoading = false;
            StateHasChanged();
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task LoadModel()
    {
        ModelResponseHydrated response = await analysisApiClient
            .GetModelHydratedAsync(physicalModelId, PreconfiguredUnits.N_M);
        var x = await editorApiAlpha.CreateModelHydratedAsync(response);
    }

}
