//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export interface IDirectStiffnessMethodAlphaClient {

    runDirectStiffnessMethod(physicalModelId: string): Promise<AnalyticalModelResponse>;

    /**
     * @return Success
     */
    createMaterial(string: string): Promise<string>;
}

export class DirectStiffnessMethodAlphaClient implements IDirectStiffnessMethodAlphaClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "";
    }

    runDirectStiffnessMethod(physicalModelId: string): Promise<AnalyticalModelResponse> {
        let url_ = this.baseUrl + "/api/analytical-models/{physicalModelId}";
        if (physicalModelId === undefined || physicalModelId === null)
            throw new Error("The parameter 'physicalModelId' must be defined.");
        url_ = url_.replace("{physicalModelId}", encodeURIComponent("" + physicalModelId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRunDirectStiffnessMethod(_response);
        });
    }

    protected processRunDirectStiffnessMethod(response: Response): Promise<AnalyticalModelResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AnalyticalModelResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AnalyticalModelResponse>(null as any);
    }

    /**
     * @return Success
     */
    createMaterial(string: string): Promise<string> {
        let url_ = this.baseUrl + "/api/material";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(string);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateMaterial(_response);
        });
    }

    protected processCreateMaterial(response: Response): Promise<string> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            return throwException("Unauthorized", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string>(null as any);
    }
}

export class AnalyticalModelResponse implements IAnalyticalModelResponse {
    degreeOfFreedomIds!: UnsupportedStructureDisplacementIdResponse[];
    boundaryConditionIds!: UnsupportedStructureDisplacementIdResponse[];
    analyticalNodeDisplacements!: number[];
    analyticalNodeReactions!: number[];

    constructor(data?: IAnalyticalModelResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.degreeOfFreedomIds = [];
            this.boundaryConditionIds = [];
            this.analyticalNodeDisplacements = [];
            this.analyticalNodeReactions = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["degreeOfFreedomIds"])) {
                this.degreeOfFreedomIds = [] as any;
                for (let item of _data["degreeOfFreedomIds"])
                    this.degreeOfFreedomIds!.push(UnsupportedStructureDisplacementIdResponse.fromJS(item));
            }
            if (Array.isArray(_data["boundaryConditionIds"])) {
                this.boundaryConditionIds = [] as any;
                for (let item of _data["boundaryConditionIds"])
                    this.boundaryConditionIds!.push(UnsupportedStructureDisplacementIdResponse.fromJS(item));
            }
            if (Array.isArray(_data["analyticalNodeDisplacements"])) {
                this.analyticalNodeDisplacements = [] as any;
                for (let item of _data["analyticalNodeDisplacements"])
                    this.analyticalNodeDisplacements!.push(item);
            }
            if (Array.isArray(_data["analyticalNodeReactions"])) {
                this.analyticalNodeReactions = [] as any;
                for (let item of _data["analyticalNodeReactions"])
                    this.analyticalNodeReactions!.push(item);
            }
        }
    }

    static fromJS(data: any): AnalyticalModelResponse {
        data = typeof data === 'object' ? data : {};
        let result = new AnalyticalModelResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.degreeOfFreedomIds)) {
            data["degreeOfFreedomIds"] = [];
            for (let item of this.degreeOfFreedomIds)
                data["degreeOfFreedomIds"].push(item.toJSON());
        }
        if (Array.isArray(this.boundaryConditionIds)) {
            data["boundaryConditionIds"] = [];
            for (let item of this.boundaryConditionIds)
                data["boundaryConditionIds"].push(item.toJSON());
        }
        if (Array.isArray(this.analyticalNodeDisplacements)) {
            data["analyticalNodeDisplacements"] = [];
            for (let item of this.analyticalNodeDisplacements)
                data["analyticalNodeDisplacements"].push(item);
        }
        if (Array.isArray(this.analyticalNodeReactions)) {
            data["analyticalNodeReactions"] = [];
            for (let item of this.analyticalNodeReactions)
                data["analyticalNodeReactions"].push(item);
        }
        return data;
    }
}

export interface IAnalyticalModelResponse {
    degreeOfFreedomIds: UnsupportedStructureDisplacementIdResponse[];
    boundaryConditionIds: UnsupportedStructureDisplacementIdResponse[];
    analyticalNodeDisplacements: number[];
    analyticalNodeReactions: number[];
}

export class UnsupportedStructureDisplacementIdResponse implements IUnsupportedStructureDisplacementIdResponse {
    analyticalNodeId!: string;
    direction!: string;

    constructor(data?: IUnsupportedStructureDisplacementIdResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.analyticalNodeId = _data["analyticalNodeId"];
            this.direction = _data["direction"];
        }
    }

    static fromJS(data: any): UnsupportedStructureDisplacementIdResponse {
        data = typeof data === 'object' ? data : {};
        let result = new UnsupportedStructureDisplacementIdResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["analyticalNodeId"] = this.analyticalNodeId;
        data["direction"] = this.direction;
        return data;
    }
}

export interface IUnsupportedStructureDisplacementIdResponse {
    analyticalNodeId: string;
    direction: string;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}