// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using BeamOs.Common.Domain.Models;
using BeamOs.StructuralAnalysis.Domain.AnalyticalResults.NodeResultAggregate;
using BeamOs.StructuralAnalysis.Domain.AnalyticalResults.ResultSetAggregate;
using BeamOs.StructuralAnalysis.Domain.Common;
using BeamOs.StructuralAnalysis.Domain.PhysicalModel.ModelAggregate;
using BeamOs.StructuralAnalysis.Domain.PhysicalModel.NodeAggregate;
using BeamOs.StructuralAnalysis.Infrastructure.Common;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using UnitsNet;

#pragma warning disable 219, 612, 618
#nullable disable

namespace BeamOs.StructuralAnalysis.Api
{
    [EntityFrameworkInternal]
    public partial class NodeResultEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "BeamOs.StructuralAnalysis.Domain.AnalyticalResults.NodeResultAggregate.NodeResult",
                typeof(NodeResult),
                baseEntityType,
                propertyCount: 3,
                complexPropertyCount: 2,
                navigationCount: 2,
                foreignKeyCount: 2,
                unnamedIndexCount: 2,
                keyCount: 1);

            var id = runtimeEntityType.AddProperty(
                "Id",
                typeof(NodeId),
                propertyInfo: typeof(BeamOsEntity<NodeId>).GetProperty("Id", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(BeamOsEntity<NodeId>).GetField("<Id>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                valueConverter: new NodeIdConverter());
            id.SetSentinelFromProviderValue(0);

            var resultSetId = runtimeEntityType.AddProperty(
                "ResultSetId",
                typeof(ResultSetId),
                propertyInfo: typeof(BeamOsAnalyticalResultEntity<NodeId>).GetProperty("ResultSetId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(BeamOsAnalyticalResultEntity<NodeId>).GetField("<ResultSetId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                afterSaveBehavior: PropertySaveBehavior.Throw,
                valueConverter: new ResultSetIdConverter());
            resultSetId.SetSentinelFromProviderValue(0);

            var modelId = runtimeEntityType.AddProperty(
                "ModelId",
                typeof(ModelId),
                propertyInfo: typeof(BeamOsModelEntity<NodeId>).GetProperty("ModelId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(BeamOsModelEntity<NodeId>).GetField("<ModelId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                afterSaveBehavior: PropertySaveBehavior.Throw,
                valueConverter: new ModelIdConverter());
            modelId.SetSentinelFromProviderValue(new Guid("01995299-f5d4-7a72-a6ef-7629022a1949"));

            DisplacementsComplexProperty.Create(runtimeEntityType);
            ForcesComplexProperty.Create(runtimeEntityType);
            var key = runtimeEntityType.AddKey(
                new[] { id, resultSetId, modelId });
            runtimeEntityType.SetPrimaryKey(key);

            var index = runtimeEntityType.AddIndex(
                new[] { modelId });

            var index0 = runtimeEntityType.AddIndex(
                new[] { resultSetId, modelId });

            return runtimeEntityType;
        }

        public static class DisplacementsComplexProperty
        {
            public static RuntimeComplexProperty Create(RuntimeEntityType declaringType)
            {
                var complexProperty = declaringType.AddComplexProperty("Displacements",
                    typeof(Displacements),
                    "BeamOs.StructuralAnalysis.Domain.AnalyticalResults.NodeResultAggregate.NodeResult.Displacements#Displacements",
                    typeof(Displacements),
                    propertyInfo: typeof(NodeResult).GetProperty("Displacements", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    fieldInfo: typeof(NodeResult).GetField("<Displacements>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    propertyCount: 6);

                var complexType = complexProperty.ComplexType;
                var displacementAlongX = complexType.AddProperty(
                    "DisplacementAlongX",
                    typeof(Length),
                    propertyInfo: typeof(Displacements).GetProperty("DisplacementAlongX", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    fieldInfo: typeof(Displacements).GetField("<DisplacementAlongX>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    valueConverter: new LengthValueConverter());
                displacementAlongX.SetSentinelFromProviderValue(0.0);

                var displacementAlongY = complexType.AddProperty(
                    "DisplacementAlongY",
                    typeof(Length),
                    propertyInfo: typeof(Displacements).GetProperty("DisplacementAlongY", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    fieldInfo: typeof(Displacements).GetField("<DisplacementAlongY>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    valueConverter: new LengthValueConverter());
                displacementAlongY.SetSentinelFromProviderValue(0.0);

                var displacementAlongZ = complexType.AddProperty(
                    "DisplacementAlongZ",
                    typeof(Length),
                    propertyInfo: typeof(Displacements).GetProperty("DisplacementAlongZ", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    fieldInfo: typeof(Displacements).GetField("<DisplacementAlongZ>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    valueConverter: new LengthValueConverter());
                displacementAlongZ.SetSentinelFromProviderValue(0.0);

                var rotationAboutX = complexType.AddProperty(
                    "RotationAboutX",
                    typeof(Angle),
                    propertyInfo: typeof(Displacements).GetProperty("RotationAboutX", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    fieldInfo: typeof(Displacements).GetField("<RotationAboutX>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    valueConverter: new AngleValueConverter());
                rotationAboutX.SetSentinelFromProviderValue(0.0);

                var rotationAboutY = complexType.AddProperty(
                    "RotationAboutY",
                    typeof(Angle),
                    propertyInfo: typeof(Displacements).GetProperty("RotationAboutY", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    fieldInfo: typeof(Displacements).GetField("<RotationAboutY>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    valueConverter: new AngleValueConverter());
                rotationAboutY.SetSentinelFromProviderValue(0.0);

                var rotationAboutZ = complexType.AddProperty(
                    "RotationAboutZ",
                    typeof(Angle),
                    propertyInfo: typeof(Displacements).GetProperty("RotationAboutZ", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    fieldInfo: typeof(Displacements).GetField("<RotationAboutZ>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    valueConverter: new AngleValueConverter());
                rotationAboutZ.SetSentinelFromProviderValue(0.0);

                complexType.AddAnnotation("Relational:FunctionName", null);
                complexType.AddAnnotation("Relational:Schema", null);
                complexType.AddAnnotation("Relational:SqlQuery", null);
                complexType.AddAnnotation("Relational:TableName", "NodeResults");
                complexType.AddAnnotation("Relational:ViewName", null);
                complexType.AddAnnotation("Relational:ViewSchema", null);
                return complexProperty;
            }
        }

        public static class ForcesComplexProperty
        {
            public static RuntimeComplexProperty Create(RuntimeEntityType declaringType)
            {
                var complexProperty = declaringType.AddComplexProperty("Forces",
                    typeof(Forces),
                    "BeamOs.StructuralAnalysis.Domain.AnalyticalResults.NodeResultAggregate.NodeResult.Forces#Forces",
                    typeof(Forces),
                    propertyInfo: typeof(NodeResult).GetProperty("Forces", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    fieldInfo: typeof(NodeResult).GetField("<Forces>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    propertyCount: 6);

                var complexType = complexProperty.ComplexType;
                var forceAlongX = complexType.AddProperty(
                    "ForceAlongX",
                    typeof(Force),
                    propertyInfo: typeof(Forces).GetProperty("ForceAlongX", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    fieldInfo: typeof(Forces).GetField("<ForceAlongX>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    valueConverter: new ForceValueConverter());
                forceAlongX.SetSentinelFromProviderValue(0.0);

                var forceAlongY = complexType.AddProperty(
                    "ForceAlongY",
                    typeof(Force),
                    propertyInfo: typeof(Forces).GetProperty("ForceAlongY", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    fieldInfo: typeof(Forces).GetField("<ForceAlongY>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    valueConverter: new ForceValueConverter());
                forceAlongY.SetSentinelFromProviderValue(0.0);

                var forceAlongZ = complexType.AddProperty(
                    "ForceAlongZ",
                    typeof(Force),
                    propertyInfo: typeof(Forces).GetProperty("ForceAlongZ", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    fieldInfo: typeof(Forces).GetField("<ForceAlongZ>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    valueConverter: new ForceValueConverter());
                forceAlongZ.SetSentinelFromProviderValue(0.0);

                var momentAboutX = complexType.AddProperty(
                    "MomentAboutX",
                    typeof(Torque),
                    propertyInfo: typeof(Forces).GetProperty("MomentAboutX", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    fieldInfo: typeof(Forces).GetField("<MomentAboutX>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    valueConverter: new TorqueValueConverter());
                momentAboutX.SetSentinelFromProviderValue(0.0);

                var momentAboutY = complexType.AddProperty(
                    "MomentAboutY",
                    typeof(Torque),
                    propertyInfo: typeof(Forces).GetProperty("MomentAboutY", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    fieldInfo: typeof(Forces).GetField("<MomentAboutY>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    valueConverter: new TorqueValueConverter());
                momentAboutY.SetSentinelFromProviderValue(0.0);

                var momentAboutZ = complexType.AddProperty(
                    "MomentAboutZ",
                    typeof(Torque),
                    propertyInfo: typeof(Forces).GetProperty("MomentAboutZ", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    fieldInfo: typeof(Forces).GetField("<MomentAboutZ>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    valueConverter: new TorqueValueConverter());
                momentAboutZ.SetSentinelFromProviderValue(0.0);

                complexType.AddAnnotation("Relational:FunctionName", null);
                complexType.AddAnnotation("Relational:Schema", null);
                complexType.AddAnnotation("Relational:SqlQuery", null);
                complexType.AddAnnotation("Relational:TableName", "NodeResults");
                complexType.AddAnnotation("Relational:ViewName", null);
                complexType.AddAnnotation("Relational:ViewSchema", null);
                return complexProperty;
            }
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ModelId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id") }),
                principalEntityType,
                deleteBehavior: DeleteBehavior.Cascade,
                required: true);

            var model = declaringEntityType.AddNavigation("Model",
                runtimeForeignKey,
                onDependent: true,
                typeof(Model),
                propertyInfo: typeof(BeamOsModelEntity<NodeId>).GetProperty("Model", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(BeamOsModelEntity<NodeId>).GetField("<Model>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey2(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ResultSetId"), declaringEntityType.FindProperty("ModelId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id"), principalEntityType.FindProperty("ModelId") }),
                principalEntityType,
                deleteBehavior: DeleteBehavior.Cascade,
                required: true);

            var resultSet = declaringEntityType.AddNavigation("ResultSet",
                runtimeForeignKey,
                onDependent: true,
                typeof(ResultSet),
                propertyInfo: typeof(BeamOsAnalyticalResultEntity<NodeId>).GetProperty("ResultSet", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(BeamOsAnalyticalResultEntity<NodeId>).GetField("<ResultSet>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var nodeResults = principalEntityType.AddNavigation("NodeResults",
                runtimeForeignKey,
                onDependent: false,
                typeof(IList<NodeResult>),
                propertyInfo: typeof(ResultSet).GetProperty("NodeResults", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ResultSet).GetField("<NodeResults>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "NodeResults");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
