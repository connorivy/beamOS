using BeamOs.CodeGen.StructuralAnalysisApiClient;
using BeamOs.Common.Contracts;
using BeamOs.StructuralAnalysis.Contracts.PhysicalModel.SectionProfile;
using BeamOs.WebApp.Components.Features.Common;
using BeamOs.WebApp.EditorCommands.Interfaces;
using Fluxor;
using Microsoft.Extensions.Logging;
using MudBlazor;

namespace BeamOs.WebApp.Components.Features.ModelObjectEditor.SectionProfiles;

public sealed class CreateSectionProfileClientCommandHandler(
    ILogger<CreateSectionProfileClientCommandHandler> logger,
    ISnackbar snackbar,
    IStructuralAnalysisApiClientV1 structuralAnalysisApiClientV1,
    IDispatcher dispatcher
)
    : ClientCommandHandlerBase<CreateSectionProfileClientCommand, SectionProfileResponse>(
        logger,
        snackbar
    )
{
    protected override async ValueTask<Result<SectionProfileResponse>> UpdateServer(
        CreateSectionProfileClientCommand command,
        CancellationToken ct = default
    )
    {
        return await structuralAnalysisApiClientV1.CreateSectionProfileAsync(
            command.ModelId,
            new(command.Data),
            ct
        );
    }

    protected override ValueTask<Result> UpdateClient(
        CreateSectionProfileClientCommand command,
        Result<SectionProfileResponse> serverResponse
    )
    {
        if (serverResponse.IsSuccess)
        {
            dispatcher.Dispatch(command with { SectionProfileId = serverResponse.Value.Id });
        }

        return new(Result.Success);
    }
}

public record CreateSectionProfileClientCommand(SectionProfileData Data) : IBeamOsClientCommand
{
    public Guid Id { get; } = Guid.NewGuid();
    public bool HandledByEditor { get; init; }
    public bool HandledByBlazor { get; init; }
    public bool HandledByServer { get; init; }
    public int TempSectionProfileId { get; init; } = ClientUtils.GenerateTempId();
    public required Guid ModelId { get; init; }

    /// <summary>
    /// The ID of the section profile in the model. This is null for temporary section profiles.
    /// The ID is generated by the server when the section profile is created.
    /// </summary>
    public int? SectionProfileId { get; init; }

    public IBeamOsClientCommand GetUndoCommand(BeamOsClientCommandArgs? args = null) =>
        new DeleteSectionProfileClientCommand
        {
            ModelId = this.ModelId,
            SectionProfileId = this.SectionProfileId ?? this.TempSectionProfileId,
            Data = this.Data,
            HandledByBlazor = args?.HandledByBlazor ?? this.HandledByBlazor,
            HandledByEditor = args?.HandledByEditor ?? this.HandledByEditor,
            HandledByServer = args?.HandledByServer ?? this.HandledByServer
        };

    public IBeamOsClientCommand WithArgs(BeamOsClientCommandArgs? args = null) =>
        this with
        {
            HandledByBlazor = args?.HandledByBlazor ?? this.HandledByBlazor,
            HandledByEditor = args?.HandledByEditor ?? this.HandledByEditor,
            HandledByServer = args?.HandledByServer ?? this.HandledByServer
        };
}

public record DeleteSectionProfileClientCommand : IBeamOsClientCommand
{
    public Guid Id { get; } = Guid.NewGuid();
    public bool HandledByEditor { get; init; }
    public bool HandledByBlazor { get; init; }
    public bool HandledByServer { get; init; }
    public required Guid ModelId { get; init; }
    public int SectionProfileId { get; init; }
    public required SectionProfileData Data { get; init; }

    public IBeamOsClientCommand GetUndoCommand(BeamOsClientCommandArgs? args = null) =>
        new CreateSectionProfileClientCommand(this.Data)
        {
            ModelId = this.ModelId,
            SectionProfileId = this.SectionProfileId,
            HandledByBlazor = args?.HandledByBlazor ?? this.HandledByBlazor,
            HandledByEditor = args?.HandledByEditor ?? this.HandledByEditor,
            HandledByServer = args?.HandledByServer ?? this.HandledByServer
        };

    public IBeamOsClientCommand WithArgs(BeamOsClientCommandArgs? args = null) =>
        this with
        {
            HandledByBlazor = args?.HandledByBlazor ?? this.HandledByBlazor,
            HandledByEditor = args?.HandledByEditor ?? this.HandledByEditor,
            HandledByServer = args?.HandledByServer ?? this.HandledByServer
        };
}
