@using System.Reflection
@using System.Collections
@using BeamOs.WebApp.Client.Components.Components.Editor.PropertyEnumerators
@using static BeamOs.WebApp.Client.Components.Components.Editor.StructuralApiClientComponent

@if (this.ObjectToDisplay is not null && IsSimpleType(this.ObjectToDisplay.GetType()))
{
    <MudItem xs="4">
        <MudTooltip Text="@ObjectName" RootClass="w-full">
            <MudText Typo="Typo.subtitle2" Class="truncate text-3xs">@ObjectName</MudText>
        </MudTooltip>
    </MudItem>
    <MudItem xs="8">
        <MudTooltip Text="@ObjectToDisplay?.ToString()" RootClass="w-full">
            <MudText Typo="Typo.subtitle2" Class="truncate text-3xs">@ObjectToDisplay</MudText>
        </MudTooltip>
    </MudItem>
}
else if (this.ObjectToDisplay is SimpleFieldTypeMarker fieldTypeMarker)
{
    if (fieldTypeMarker.FieldType == typeof(int))
    {
        <MudTextField T="int?" Value="@((int?)fieldTypeMarker.Value)" ValueChanged="(i) => ObjectToDisplayChanged.InvokeAsync(i)" Required="@fieldTypeMarker.IsRequired" Label="@ObjectName" />
    }
    else if (fieldTypeMarker.FieldType == typeof(double))
    {
        <MudTextField T="double?" Value="@((double?)fieldTypeMarker.Value)" ValueChanged="(i) => ObjectToDisplayChanged.InvokeAsync(i)" Required="@fieldTypeMarker.IsRequired" Label="@ObjectName" />
    }
    else if (fieldTypeMarker.FieldType == typeof(bool))
    {
        <MudTextField T="bool?" Value="@((bool?)fieldTypeMarker.Value)" ValueChanged="(i) => ObjectToDisplayChanged.InvokeAsync(i)" Required="@fieldTypeMarker.IsRequired" Label="@ObjectName" />
    }
    else
    {
        <MudTextField Converter="@StringObjectConverter" Value="@fieldTypeMarker.Value" ValueChanged="ObjectToDisplayChanged" Required="@fieldTypeMarker.IsRequired" Label="@ObjectName" />
    }
}
else if (this.ObjectToDisplay is ComplexFieldTypeMarker complex)
{
    @if (!string.IsNullOrEmpty(ObjectName))
    {
        <MudExpansionPanel Expanded="true" Text="@ObjectName" Class="text-nowrap text-clip mud-typography mud-typography-subtitle2">
            <MudGrid Spacing="1">
                @foreach (var key in complex.ValuesWithDisplayInformation.Keys)
                {
                    var obj = complex.Get(key);
                    <SelectionInfoSingleItemComponent2 ObjectName="@key.ToString()" ObjectToDisplayChanged="@((val) => complex.Set(key, val))" ObjectToDisplay="obj"></SelectionInfoSingleItemComponent2>
                }
            </MudGrid>
        </MudExpansionPanel>
    }
    else
    {
        @foreach (var key in complex.ValuesWithDisplayInformation.Keys)
        {
            var obj = complex.Get(key);
            <SelectionInfoSingleItemComponent2 ObjectName="@key.ToString()" ObjectToDisplayChanged="@((val) => complex.Set(key, val))" ObjectToDisplay="obj"></SelectionInfoSingleItemComponent2>
        }
    }
}
@* else if (this.propertyEnumerators.TryGetValue(this.ObjectType, out IPropertyEnumerator? propertyEnumerator))
{
    foreach (var propertyPair in propertyEnumerator.GetProps(this.ObjectToDisplay))
    {
        <SelectionInfoSingleItemComponent2 ObjectName="@propertyPair.Item1" ObjectToDisplay="@propertyPair.Item2"></SelectionInfoSingleItemComponent2>
    }
} *@
else if (this.ObjectToDisplay is IEnumerable enumerable)
{
    int counter = 0;
    foreach (var item in enumerable)
    {
        <SelectionInfoSingleItemComponent2 ObjectName="@($"{this.ObjectName}-{counter++}")" ObjectToDisplay="@item" ObjType="@item.GetType()"></SelectionInfoSingleItemComponent2>
    }   
}
else
{
    <MudExpansionPanel Expanded="true" Text="@ObjectName" Class="text-nowrap text-clip mud-typography mud-typography-subtitle2">
        <MudGrid Spacing="1">
            @foreach (var propInfo in GetPublicInstanceProps(this.ObjectToDisplay))
            {
                var value = propInfo.GetValue(this.ObjectToDisplay);
                <SelectionInfoSingleItemComponent2 ObjectName="@propInfo.Name" ObjectToDisplay="@value"></SelectionInfoSingleItemComponent2>
            }
        </MudGrid>
    </MudExpansionPanel>
}

@* <style>
    .mud-grid-item {
        padding: 0px !important;
    }

    .mud-expand-panel-header {
        padding-left: 0px !important;
        padding-right: 0px !important;
        padding-top: 8px !important;
        padding-bottom: 0px !important;
        min-height: 24px !important;
    }

    .mud-expand-panel-content {
        padding-left: 12px !important;
        padding-right: 0px !important;
        border-style: none;
        height: fit-content;
    }

    .mud-panel-expanded > .mud-expand-panel-header .mud-expand-panel-text {
        color: var(--mud-palette-primary-lighten);
    }

    .mud-expand-panel .mud-panel-expanded {
        margin-top: 0px;
        margin-block: 0px;
    }

    .mud-expand-panel-text {
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
    }
</style>
 *@
