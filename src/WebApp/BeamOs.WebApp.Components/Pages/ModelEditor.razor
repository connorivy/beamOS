@page "/models/{ModelId:guid}"

@using BeamOs.CodeGen.EditorApi
@using BeamOs.StructuralAnalysis.Contracts.Common
@using BeamOs.WebApp.Components.Features.AiAssistant
@using BeamOs.WebApp.Components.Features.AnalysisToolbar
@using BeamOs.WebApp.Components.Features.BugReports
@using BeamOs.WebApp.Components.Features.Common
@using BeamOs.WebApp.Components.Features.Editor
@using BeamOs.WebApp.Components.Features.ModelObjectEditor
@using BeamOs.WebApp.Components.Features.ProposalInfo
@using BeamOs.WebApp.Components.Features.ResultCharts
@using BeamOs.WebApp.Components.Features.ResultsTable
@using BeamOs.WebApp.Components.Features.SelectionInfo
@using BeamOs.WebApp.Components.Features.StructuralApi
@using BeamOs.WebApp.Components.Layout
@using BeamOs.WebApp.EditorCommands
@using Fluxor.Blazor.Web.Components
@using MudBlazor
@using System.Collections.Immutable

@inherits FluxorComponent
@layout ResponsiveSidebarLayout

<PageTitle>Editor</PageTitle>
@* 
@if (this.editorComponent is not null)
{
    <MudStack Row="true">
        <MudButton OnClick="@editorComponent.ShowShear">Show Shear Diagrams</MudButton>
        <MudButton OnClick="@editorComponent.ShowMoment">Show Moment Diagrams</MudButton>
        <MudButton OnClick="@editorComponent.ShowDeflection">Show Deflection Diagrams</MudButton>
    </MudStack>
} *@
<MudContainer MaxWidth="MaxWidth.False" Gutters="false" Class="relative h-full w-full">
    <EditorComponent Class="h-full" @ref="editorComponent" ModelId="@ModelId" IsReadOnly="false"></EditorComponent>
    @if (this.editorComponent is not null && this.EditorState.Value.LoadedModelId is Guid modelId)
    {
        <div class="flex items-center justify-center absolute left-4 right-4 top-4">
            <AnalysisToolbar Class="" editorComponent="@editorComponent" ModelId="@modelId"
                CanvasId="@editorComponent.CanvasId"></AnalysisToolbar>
        </div>

        @* <StructuralApiComponent Class="absolute left-0 top-0 w-1/5 p-4" ModelId="@modelId" CanvasId="@editorComponent.CanvasId"></StructuralApiComponent> *@
        @* <SectionContent SectionId="@MainLayout.Drawer"> *@
        @* <SelectionInfoComponent ModelId="@modelId" SelectedObjects="this.State.Value.SelectedObjects" Class="p-4" CanvasId="@editorComponent.CanvasId"></SelectionInfoComponent> *@
        @* </SectionContent> *@

        <FloatingResponsiveSidebar>
            <ModelObjectEditor ModelId="@modelId"
                UnitSettings="@this.EditorState.Value.CachedModelResponse.Settings.UnitSettings" />
        </FloatingResponsiveSidebar>

        @* <div class="flex justify-center absolute bottom-0 right-0 left-0 h-2/5">
            <ResultsTableComponent ModelId="@modelId" Class="w-5/6 p-4" />
        </div> *@

        var panelContentStack = this.State.Value.PanelContent;
        if (!panelContentStack.IsEmpty)
        {
            var panelContent = panelContentStack.Peek();
            <FloatingResponsivePanel>
                @if (!this.State.Value.PanelContentLocked && panelContentStack.Count() > 1)
                {
                    <MudIconButton OnClick="@GoBack" Icon="@Icons.Material.Filled.ArrowBack" Color="Color.Inherit"
                        Class="absolute top-2 left-2 z-10" />
                }
                @switch (panelContent)
                {
                    case PanelContent.ProposalInfo:
                        <ProposalInfo ModelId="@modelId" EditorApi="@this.EditorState.Value.EditorApi" />
                        break;
                    case PanelContent.Element1dResults:
                        <ResultChartsComponent ModelId="@modelId" />
                        break;
                    case PanelContent.ModelRepairScenarioCreator:
                        <ModelRepairScenarioCreator ModelId="@modelId" />
                        break;
                }
            </FloatingResponsivePanel>
        }

        <AiAssistant ModelId="@ModelId" />
    }
</MudContainer>
