@page "/test-explorer-dashboard"
@using BeamOs.WebApp.Client.Components.Features.TestExplorer
@using BeamOs.ApiClient
@using BeamOs.Contracts.AnalyticalResults.Model
@using BeamOs.Contracts.Common
@using BeamOs.Contracts.PhysicalModel.Model
@using BeamOs.Contracts.PhysicalModel.Node
@using BeamOS.Tests.Common.SolvedProblems
@using BeamOs.Tests.TestRunner

@* @rendermode InteractiveWebAssembly *@

@inject IJSRuntime js
@inject ICodeTestScoreTracker CodeTestScoresTracker
@inject NavigationManager NavigationManager

<PageTitle>Test Explorer Dashboard</PageTitle>

<MudContainer MaxWidth="MaxWidth.False" Class="h-full overflow-scroll p-4">
    <MudGrid>
        <MudItem xs="12" md="6">
            <MudText Typo="Typo.h3" GutterBottom="true">Are the results accurate?</MudText>
            <MudText Typo="Typo.subtitle1" GutterBottom="true">
                Accurate and reliable analysis results are the top priority for beamOS. Find out below how we ensure our results are correct.
            </MudText>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="mt-4">Get Started</MudButton>
        </MudItem>
        <MudItem xs="12" md="6" Class="d-flex justify-content-center align-items-center">
            <MudImage Src="your-image-url-here" Alt="Hero Image" Width="300" />
        </MudItem>
    </MudGrid>

    <MudGrid Spacing="3" Class="mt-6">
        <MudItem xs="12" md="4">
            <MudCard Class="shadow hover:shadow-lg">
                <MudCardContent>
                    <MudText Typo="Typo.h6" GutterBottom="true" Class="text-center">Number Of Tests</MudText>
                    <CounterAnimation TargetValue="@CodeTestScoresTracker.LatestScores.NumTests" Class="text-center" />
                </MudCardContent>
            </MudCard>
        </MudItem>
        <MudItem xs="12" md="4">
            <MudCard Class="shadow hover:shadow-lg">
                <MudCardContent>
                    <MudText Typo="Typo.h6" GutterBottom="true" Class="text-center">Code Coverage</MudText>
                    <CounterAnimation TargetValue="@((int)Math.Round(CodeTestScoresTracker.LatestScores.CodeCoveragePercent))" AfterNumber=" %" Class="text-center" />
                </MudCardContent>
            </MudCard>
        </MudItem>
        <MudItem xs="12" md="4">
            <MudCard Class="shadow hover:shadow-lg">
                <MudCardContent>
                    <MudText Typo="Typo.h6" GutterBottom="true" Class="text-center">Mutation Score</MudText>
                    <CounterAnimation TargetValue="@((int)Math.Round(CodeTestScoresTracker.LatestScores.MutationScore))" AfterNumber=" %" Class="text-center" />
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>

    <MudDivider Class="mt-6 mb-6" />

    <div class="scroll-section" id="section2" style="margin-top: 50px;">
        <MudCard Class="shadow hover:shadow-lg animate-scroll">
            <MudCardContent>
                <MudGrid>
                    <MudItem xs="12" md="7">
                        <MudText Typo="Typo.h3" GutterBottom="true" Class="my-5 mb-5">Analysis Kernel</MudText>
                        <MudText Typo="Typo.body1" Class="mb-5">
                            Much of the underlying structural analysis uses existing code from an open source projects known as
                            <MudButton Target="_blank" Href="https://opensees.berkeley.edu/" EndIcon="@Icons.Material.Filled.ArrowOutward" Variant="Variant.Text" Color="Color.Primary" Class="p-0">
                                OpenSees.
                            </MudButton>
                        </MudText>
                        <MudText Typo="Typo.body1" Class="mb-5">
                            This application was created by professors at the University of California, Berkeley as an open source tool for earthquake analysis. It has since been used by professors and PhD students around the world for analyzing structures.
                        </MudText>
                        <MudText Typo="Typo.body1" Class="mb-5">
                            beamOS can be thought of as a wrapper around this open source project that provides a nice UI and makes this tool accessible not only to developers, but to anyone with a knowledge of structural engineering.
                        </MudText>
                    </MudItem>
                    <MudItem xs="12" md="5">
                        @* <MudImage Src="images/get_rot_matrix_code_cov.png" Alt="Code Coverage Image" /> *@
                        <MudImage Src="images/FEM-bridge.png" Alt="FEM Bridge" />
                    </MudItem>
                </MudGrid>
            </MudCardContent>
        </MudCard>
    </div>

    <div class="scroll-section" id="section1">
        <MudCard Class="shadow hover:shadow-lg animate-scroll">
            <MudCardContent>
                <MudGrid>
                    <MudItem xs="12" md="6">
                        <MudText Typo="Typo.h3" GutterBottom="true" Class="my-5 mb-5">Number of tests</MudText>
                        <MudText Typo="Typo.body1" Class="mb-5">
                            What exactly are tests and why do they matter? Tests are automated scripts that ensure that a part of the application behaves as expected. To the right is an example of a test that you will find in our codebase that tests the behavior of the "GetRotationMatrix" function
                        </MudText>
                        <MudText Typo="Typo.body1" Class="mb-5">
                            This test makes sure that beamOS is computing the correct rotation matrix for a vertical member. This test is run every time a beamOS team member wants to make a change to the code base, and if the 'AssertEqual' method ever fails, then the proposed change will be rejected.
                        </MudText>
                        <MudText Typo="Typo.body1" Class="mb-5">
                            To browse all code tests, including the more involved ones, checkout the <MudLink Href="/test-explorer">Test Explorer</MudLink>
                        </MudText>
                    </MudItem>
                    <MudItem xs="12" md="6">
                       <CodeSnippet>
/// with no profile rotation, a vertical member will end up with it's
/// local x axis aligned in the global y direction
/// local y axis aligned in the global -x direction
/// local z axis aligned in the global z direction
[Fact]
public void GetRotationMatrix_ForVerticalMember_ShouldEqualExpectedValue()
{
    var element = Element1d.Create(
        startNode: new(0, 0, 0),
        endNode: new(0, 8, 0)
    );

    double[,] expectedRotationMatrix = new[,]
    {
        {  0, 1, 0 },
        { -1, 0, 0 },
        {  0, 0, 1 },
    };

    double[,] calculatedRotationMatrix = element.GetRotationMatrix();

    AssertEqual(expectedRotationMatrix, calculatedRotationMatrix);
}
                        </CodeSnippet>
                    </MudItem>
                </MudGrid>
            </MudCardContent>
        </MudCard>
    </div>

    <div class="scroll-section" id="section2" style="margin-top: 50px;">
        <MudCard Class="shadow hover:shadow-lg animate-scroll">
            <MudCardContent>
                <MudGrid>
                    <MudItem xs="12" md="7">
                        @* <MudImage Src="images/get_rot_matrix_code_cov.png" Alt="Code Coverage Image" /> *@
                        <CodeCoverageSnippet />
                    </MudItem>
                    <MudItem xs="12" md="5">
                        <MudText Typo="Typo.h3" GutterBottom="true" Class="my-5 mb-5">Code Coverage</MudText>
                        <MudText Typo="Typo.body1" Class="mb-5">
                            Code coverage is a measure of the percentage of a code base that is covered by tests.
                        </MudText>
                        <MudText Typo="Typo.body1" Class="mb-5">
                            The accompanying image is the coverage report of the single test shown in the block above. You can see from the coverage report that the selected test covers only a subset of the possible paths in this method, resulting in a block of untested code, shown in red.
                        </MudText>
                        <MudText Typo="Typo.body1" Class="mb-5">
                            It is often impractical and unneccesary to get all the way up to 100% code coverage, but beamOS aims to get as close as possible. Click here to view the latest
                            <MudButton Target="_blank" Href="/test-results/code-coverage/" EndIcon="@Icons.Material.Filled.ArrowOutward" Variant="Variant.Text" Color="Color.Primary" Class="p-0">
                                Coverage Report
                            </MudButton>
                        </MudText>
                    </MudItem>
                </MudGrid>
            </MudCardContent>
        </MudCard>
    </div>

    <div class="scroll-section" id="section3" style="margin-top: 50px;">
        <MudCard Class="shadow hover:shadow-lg animate-scroll">
            <MudCardContent>
                <MudGrid>
                    <MudItem xs="12" md="5">
                        <MudText Typo="Typo.h3" GutterBottom="true" Class="my-5 mb-5">Mutation Score</MudText>
                        <MudText Typo="Typo.body1" Class="mb-5">
                            Mutation score is a measure of how meaningful the automated tests are. Just because a line is covered by a test doesn't mean that the test will protect you from unwanted changes or side-effects in your codebase. Sometimes projects will even introduce tests that don't make any assertions (this means they can never fail) just to increase their code coverage.
                        </MudText>
                        <MudText Typo="Typo.body1" Class="mb-5">
                            A mutation score is calculated by a tool called <MudLink Href="https://stryker-mutator.io/" Target="_blank">Stryker.NET</MudLink> which makes thousands of mutations to the beamOS codebase and then runs the automated tests against the changed code. It is expected that the tests will now fail. If they don't fail, it might indicate that the tests do not sufficiently cover the code.
                        </MudText>
                        <MudText Typo="Typo.body1" Class="mb-5">
                            To put it more simply, Stryker.NET will change a '+' to a '-' in a method such as the 'GetRotationMatrix' method. Then we would expect that at least some of our tests that makes sure we are accurately computing the rotation matrix would fail. If not, then there is likely an issue with our tests.
                        </MudText>
                        <MudText Typo="Typo.body1" Class="mb-5">
                            The image shown here is the mutation report for the method above, GetRotationMatrix(), when just running the above test at the top of this page, GetRotationMatrix_ForVerticalMember_ShouldEqualExpectedValue(). Each dot next to a line of code represents a mutation to the method that was made. A green dot indicates that a mutation was introduced that lead to failing tests. A red dot indicates that a mutation was introduced, was covered by at least one test, and did not lead to any failing tests. An orange dot indicates that a mutation was introduced, but no tests covered that line of code (this is essentially the same as regular code coverage).
                        </MudText>
                        <MudText Typo="Typo.body1" Class="mb-5">
                            It is often impractical, unneccesary, or even impossible to get all the way up to 100% mutation score, but beamOS aims to get as close as possible. Click here to view the latest
                            <MudButton Target="_blank" Href="/test-results/stryker/" EndIcon="@Icons.Material.Filled.ArrowOutward" Variant="Variant.Text" Color="Color.Primary" Class="p-0">
                                Mutation Report
                            </MudButton>
                        </MudText>
                    </MudItem>
                    <MudItem xs="12" md="7">
                        <MudImage Src="images/mutation_report_light.jpeg" Alt="Mutation Report Image" />
                    </MudItem>
                </MudGrid>
            </MudCardContent>
        </MudCard>
    </div>
</MudContainer>

<style>
    .scroll-section {
        opacity: 0;
        transform: translateY(50px);
        transition: opacity 0.6s ease-out, transform 0.6s ease-out;
        margin-bottom: 20px;
    }

    .scroll-section.visible {
        opacity: 1;
        transform: translateY(0);
    }
</style>

<script>
    // thank you, chat gpt
    function initializeScrollAnimations() {
        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    entry.target.classList.add('visible');
                } else {
                    entry.target.classList.remove('visible');
                }
            });
        }, { threshold: 0.1 });

        document.querySelectorAll('.scroll-section').forEach(section => {
            observer.observe(section);
        });
    }
</script>

@code {
    private float mutationScore;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await js.InvokeVoidAsync("initializeScrollAnimations");
        }
        await base.OnAfterRenderAsync(firstRender);
    }
}

