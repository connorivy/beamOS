using BeamOs.CodeGen.StructuralAnalysisApiClient;
using BeamOs.Common.Contracts;
using BeamOs.StructuralAnalysis.Contracts.PhysicalModel.PointLoads;
using BeamOs.WebApp.Components.Features.Common;
using BeamOs.WebApp.Components.Features.Editor;
using BeamOs.WebApp.EditorCommands.Interfaces;
using Fluxor;
using Microsoft.Extensions.Logging;
using MudBlazor;

namespace BeamOs.WebApp.Components.Features.ModelObjectEditor.PointLoads;

public sealed class CreatePointLoadEditorCommandHandler(
    ILogger<CreatePointLoadEditorCommandHandler> logger,
    ISnackbar snackbar,
    IStructuralAnalysisApiClientV1 structuralAnalysisApiClientV1,
    IDispatcher dispatcher,
    IState<EditorComponentState> editorState
) : ClientCommandHandlerBase<CreatePointLoadClientCommand, PointLoadResponse>(logger, snackbar)
{
    protected override async ValueTask<Result> UpdateEditor(CreatePointLoadClientCommand command)
    {
        var editorApi =
            editorState.Value.EditorApi
            ?? throw new InvalidOperationException("Editor API is not initialized");

        return await editorApi.CreatePointLoadAsync(
            new PointLoadResponse(
                command.TempPointLoadId,
                command.Data.NodeId,
                command.Data.LoadCaseId,
                command.ModelId,
                command.Data.Force,
                command.Data.Direction
            ).ToEditorUnits()
        );
    }

    protected override async ValueTask<Result<PointLoadResponse>> UpdateServer(
        CreatePointLoadClientCommand command,
        CancellationToken ct = default
    )
    {
        var request = new CreatePointLoadRequest
        {
            NodeId = command.Data.NodeId,
            LoadCaseId = command.Data.LoadCaseId,
            Force = command.Data.Force,
            Direction = command.Data.Direction,
        };
        return await structuralAnalysisApiClientV1.CreatePointLoad(command.ModelId, request, ct);
    }

    protected override async ValueTask<Result> UpdateEditorAfterServerResponse(
        CreatePointLoadClientCommand command,
        Result<PointLoadResponse> serverResponse
    )
    {
        if (serverResponse.IsSuccess)
        {
            var editorApi =
                editorState.Value.EditorApi
                ?? throw new InvalidOperationException("Editor API is not initialized");

            return await editorApi.CreatePointLoadAsync(serverResponse.Value.ToEditorUnits());
        }
        return Result.Success;
    }

    protected override ValueTask<Result> UpdateClient(
        CreatePointLoadClientCommand command,
        Result<PointLoadResponse> serverResponse
    )
    {
        if (serverResponse.IsSuccess)
        {
            dispatcher.Dispatch(
                new PutPointLoadClientCommand(serverResponse.Value, serverResponse.Value)
            );
        }
        return new(Result.Success);
    }
}

public sealed class CreatePointLoadClientCommandHandler(
    CreatePointLoadEditorCommandHandler createPointLoadEditorCommandHandler
)
    : SimpleCommandHandlerBase<
        CreatePointLoadClientCommand,
        CreatePointLoadClientCommand,
        PointLoadResponse
    >(createPointLoadEditorCommandHandler)
{
    protected override CreatePointLoadClientCommand CreateCommand(
        CreatePointLoadClientCommand simpleCommand
    )
    {
        return simpleCommand;
    }
}

public record CreatePointLoadClientCommand(PointLoadData Data) : IBeamOsUndoableClientCommand
{
    public Guid Id { get; } = Guid.NewGuid();
    public bool HandledByEditor { get; init; }
    public bool HandledByBlazor { get; init; }
    public bool HandledByServer { get; init; }
    public int TempPointLoadId { get; init; } = ClientUtils.GenerateTempId();
    public required Guid ModelId { get; init; }

    /// <summary>
    /// The ID of the node in the model. This is null for temporary nodes.
    /// The ID is generated by the server when the node is created.
    /// </summary>
    public int? PointLoadId { get; init; }

    public IBeamOsUndoableClientCommand GetUndoCommand(BeamOsClientCommandArgs? args = null) =>
        new DeletePointLoadClientCommand
        {
            ModelId = this.ModelId,
            PointLoadId = this.PointLoadId ?? this.TempPointLoadId,
            Data = this.Data,
            HandledByBlazor = args?.HandledByBlazor ?? this.HandledByBlazor,
            HandledByEditor = args?.HandledByEditor ?? this.HandledByEditor,
            HandledByServer = args?.HandledByServer ?? this.HandledByServer,
        };

    public IBeamOsUndoableClientCommand WithArgs(BeamOsClientCommandArgs? args = null) =>
        this with
        {
            HandledByBlazor = args?.HandledByBlazor ?? this.HandledByBlazor,
            HandledByEditor = args?.HandledByEditor ?? this.HandledByEditor,
            HandledByServer = args?.HandledByServer ?? this.HandledByServer,
        };
}
