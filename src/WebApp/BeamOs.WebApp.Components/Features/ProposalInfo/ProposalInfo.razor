@using BeamOs.CodeGen.EditorApi
@using BeamOs.CodeGen.StructuralAnalysisApiClient
@using BeamOs.StructuralAnalysis.Contracts.PhysicalModel.Models
@using BeamOs.StructuralAnalysis.Contracts.PhysicalModel.Nodes
@using MudBlazor

@inherits FluxorComponent

@if (proposalInfos is null)
{
    <MudPaper Class="flex flex-col items-center justify-center h-32 w-full">
        <MudProgressCircular Indeterminate Color="Color.Primary" Size="Size.Large" />
        <MudText Class="mt-2" Typo="Typo.h6">Loading proposals...</MudText>
    </MudPaper>
}
else
{
    @if (state.Value.SelectedProposal is not ModelProposalResponse selectedProposal)
    {
        <MudPaper Class="p-3 w-full max-w-xs">
            <MudText Typo="Typo.h6" Class="mb-2">Proposals</MudText>
            <MudList T="ModelProposalInfo" Class="w-full">
                @foreach (var proposal in proposalInfos)
                {
                    <MudListItem Value="@proposal">
                        <div class="flex flex-row">
                            <div class="flex-1 flex flex-col">
                                <MudText Class="font-semibold">@proposal.Description</MudText>
                                <MudText Class="text-xs text-gray-500">@GetRelativeTime(proposal.LastModified)</MudText>
                            </div>
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small"
                                OnClick="() => LoadProposal(proposal.Id)">View</MudButton>
                        </div>
                    </MudListItem>
                }
            </MudList>
        </MudPaper>
    }
    else
    {
        <MudPaper Class="p-3 w-full max-w-xs flex flex-col gap-4">
            <MudTooltip Text="Back">
                <MudIconButton Icon="@Icons.Material.Filled.ArrowBack" OnClick="GoBack"></MudIconButton>
            </MudTooltip>
            <MudText Typo="Typo.h6">Proposal Details</MudText>
            <MudText Class="truncate"><span class="font-semibold">ID:</span> @selectedProposal.Id</MudText>
            <MudText Class="truncate"><span class="font-semibold">Last Modified:</span> @selectedProposal.LastModified</MudText>
            <MudText Class="truncate"><span class="font-semibold">Description:</span>
                @selectedProposal.ModelProposal?.Description</MudText>
            <div class="flex gap-2 mt-2">
                <MudButton Variant="Variant.Filled" Color="Color.Success" Size="Size.Small"
                    OnClick="() => AcceptProposal(selectedProposal.Id)">Accept Selected</MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Error" Size="Size.Small"
                    OnClick="() => RejectProposal(selectedProposal.Id)">Reject</MudButton>
            </div>
            <MudDivider />
            <div class="flex items-center mb-2">
                <MudCheckBox T="bool?" Value="@selectAllChecked" ValueChanged="@((bool? val) => selectAllChecked = val)" Color="Color.Primary" />
                <MudText Class="ml-2">Select All</MudText>
            </div>
            <MudList T="IEntityProposal" Class="divide-y divide-gray-200 p-0">
                @foreach (var proposalObject in state.Value.FilteredProposals ?? [])
                {
                    <MudListItem Value="@proposalObject" Class="p-1">
                        <div class="flex flex-row items-center gap-2 py-1">
                        <MudCheckBox
                            Value="@(!unselectedProposalObjectIds.Contains(proposalObject))"
                            Color="Color.Primary"
                            ValueChanged="(bool checkedVal) => ToggleProposalObjectSelection(proposalObject, checkedVal)" />
                        <div class="flex flex-col gap-1">
                            @if (proposalObject is IEntityModificationProposal entityModificationProposal)
                            {
                                <MudText Class="truncate"><span class="font-semibold">Existing Id:</span> @entityModificationProposal.ExistingId</MudText>
                            }
                            <MudText Class="truncate"><span class="font-semibold">Object:</span> @proposalObject.ObjectType</MudText>
                            <MudText Class="truncate"><span class="font-semibold">Type:</span> @proposalObject.ProposalType</MudText>
                        </div>
                        </div>
                    </MudListItem>
                }
            </MudList>
            @if (selectedProposal.ProposalIssues is not null && selectedProposal.ProposalIssues.Count > 0)
            {
                <MudSelect @bind-Value="minSeverity" Label="Minimum Severity" Dense="true" Class="mb-2 w-full">
                    @foreach (var sev in availableSeverities)
                    {
                        <MudSelectItem Value="@sev">@sev</MudSelectItem>
                    }
                </MudSelect>

                if (this.FilteredIssues.Any())
                {
                    <MudList T="ProposalIssue" Class="divide-y divide-gray-200">
                        @foreach (var issue in this.FilteredIssues)
                        {
                            <MudListItem Value="@issue" Class="flex flex-col gap-1 py-1">
                                <div class="flex flex-col">
                                    <MudText Class="truncate"><span class="font-semibold">ID:</span> @issue.ProposedId.ProposedId</MudText>
                                    <MudText Class="truncate"><span class="font-semibold">Object Type:</span> @issue.ObjectType</MudText>
                                    <MudText><span class="font-semibold">Message:</span> @issue.Message</MudText>
                                    <MudText Class="truncate"><span class="font-semibold">Severity:</span> @issue.Severity</MudText>
                                    @* <MudButton Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small"
                                        OnClick="() => ResolveIssue(issue)" Class="self-end mt-1">Resolve</MudButton> *@
                                </div>
                            </MudListItem>
                        }
                    </MudList>
                }
                else
                {
                    <MudText>No issues found for this severity.</MudText>
                }
            }
            else
            {
                <MudText>No issues found for this proposal.</MudText>
            }
        </MudPaper>
    }
}