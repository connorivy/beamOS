@using MudBlazor
@using System.Collections

@inherits FluxorComponent

@if (this.ObjectToDisplay is ISimpleSelectionInfo simpleSelectionInfo)
{
    if (this.ObjectToDisplay is IEditableSelectionInfo editableSelectionInfo)
    {
        @* var currentFieldNum = numFields++; *@
        @* editableSelectionInfo.FieldNum = currentFieldNum; *@

       if (editableSelectionInfo.FieldType == typeof(int))
        {
            <MudTextField @ref="MudTextFieldIntRef" T="int?" Typo="Typo.input" @bind-Value="@simpleSelectionInfo.ValueAsInt" Required="@editableSelectionInfo.IsRequired" Label="@this.ObjectToDisplay.FieldName" OnlyValidateIfDirty="true" @onfocus="(_) => OnFocus(editableSelectionInfo)" />
        }
        else if (editableSelectionInfo.FieldType == typeof(double))
        {
            <MudTextField @ref="MudTextFieldDoubleRef" T="double?" Typo="Typo.input" @bind-Value="@simpleSelectionInfo.ValueAsDouble" Required="@editableSelectionInfo.IsRequired" Label="@this.ObjectToDisplay.FieldName" OnlyValidateIfDirty="true" @onfocus="(_) => OnFocus(editableSelectionInfo)" />
        }
        else if (editableSelectionInfo.FieldType == typeof(bool))
        {
            <MudTextField @ref="MudTextFieldBoolRef" T="bool?" Typo="Typo.input" Value="@simpleSelectionInfo.ValueAsBool" Required="@editableSelectionInfo.IsRequired" Label="@this.ObjectToDisplay.FieldName" OnlyValidateIfDirty="true" @onfocus="(_) => OnFocus(editableSelectionInfo)" />
        }
        else if (editableSelectionInfo.FieldType.IsEnum)
        {
            <MudSelect T="int?" Typo="Typo.input" @bind-Value="@simpleSelectionInfo.ValueAsInt" Required="@editableSelectionInfo.IsRequired" Label="@this.ObjectToDisplay.FieldName" OnlyValidateIfDirty="true" @onfocus="(_) => OnFocus(editableSelectionInfo)">
            @foreach (var val in Enum.GetValues(editableSelectionInfo.FieldType))
            {
                var stringVal = val.ToString();
                if (string.Equals(stringVal, "Undefined"))
                {
                    continue;
                }
                <MudSelectItem T="int?" Value="(int)val">@stringVal</MudSelectItem>
            }
            </MudSelect>
        }
        else
        {
            <MudTextField @ref="MudTextFieldStringRef" Typo="Typo.input" @bind-Value="@simpleSelectionInfo.ValueAsString" Required="@editableSelectionInfo.IsRequired" Label="@this.ObjectToDisplay.FieldName" OnlyValidateIfDirty="true" @onfocus="(_) => OnFocus(editableSelectionInfo)" />
        }
    }
    else
    {
        <MudItem xs="4">
            <MudTooltip Text="@this.ObjectToDisplay.FieldName" RootClass="w-full">
                <MudText Typo="Typo.subtitle2" Class="truncate text-3xs">@this.ObjectToDisplay.FieldName</MudText>
            </MudTooltip>
        </MudItem>
        <MudItem xs="8">
            <MudTooltip Text="@simpleSelectionInfo.Value?.ToString()" RootClass="w-full">
                <MudText Typo="Typo.subtitle2" Class="truncate text-3xs">@simpleSelectionInfo.Value</MudText>
            </MudTooltip>
        </MudItem>
    }
}
else if (this.ObjectToDisplay is IComplexSelectionInfo complexSelectionInfo)
{
    @if (!complexSelectionInfo.Flatten)
    {
        <MudExpansionPanel Expanded="true" Text="@this.ObjectToDisplay.FieldName" Class="text-nowrap text-clip mud-typography mud-typography-subtitle2">
            <MudGrid Spacing="1">
                @foreach (var selectionInfo in complexSelectionInfo.SelectionInfos)
                {
                    <SelectionInfoSingleItemComponent ObjectToDisplay="selectionInfo"></SelectionInfoSingleItemComponent>
                }
            </MudGrid>
        </MudExpansionPanel>
    }
    else
    {
        @foreach (var selectionInfo in complexSelectionInfo.SelectionInfos)
        {
            <SelectionInfoSingleItemComponent ObjectToDisplay="selectionInfo"></SelectionInfoSingleItemComponent>
        }
    }
}
else
{
    throw new Exception($"Unexpected type for ObjectToDisplay of type {this.ObjectToDisplay.GetType()}");
}
