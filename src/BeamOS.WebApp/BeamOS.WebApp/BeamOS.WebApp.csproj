<Project Sdk="Microsoft.NET.Sdk.Web">

  <PropertyGroup>
    <Nullable>enable</Nullable>
    <ImplicitUsings>enable</ImplicitUsings>
    <NpmFolder>./NpmJs</NpmFolder>
    <UserSecretsId>1b8b30f7-695f-4024-ae1b-ee72f0a52305</UserSecretsId>
    <IsPackable>true</IsPackable>
    <ErrorOnDuplicatePublishOutputFiles>false</ErrorOnDuplicatePublishOutputFiles>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Blazored.LocalStorage" />
    <PackageReference Include="Microsoft.AspNetCore.Authentication.Google" />
    <PackageReference Include="Microsoft.AspNetCore.Authentication.JwtBearer" />
    <PackageReference Include="Microsoft.AspNetCore.Components.WebAssembly.Server" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.Design">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="Teronis.MSBuild.Packaging.ProjectBuildInPackage">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="MudBlazor" />
    <PackageReference Include="MudBlazor.ThemeManager" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\..\BeamOs.StructuralAnalysis\BeamOs.ApiClient\BeamOs.ApiClient.csproj" />
    <ProjectReference Include="..\..\BeamOs.StructuralAnalysis\BeamOs.Api\BeamOs.Api.csproj" />
    <ProjectReference Include="..\BeamOS.WebApp.Client\BeamOS.WebApp.Client.csproj">
      <PrivateAssets>all</PrivateAssets>
    </ProjectReference>
  </ItemGroup>

  <ItemGroup>
    <Folder Include="wwwroot\test-results\stryker\" />
  </ItemGroup>

  <Target Name="CopyOpenSees" AfterTargets="AfterBuild" Condition="'$(ContinuousIntegrationBuild)' == false">
    <!-- /y will surpress prompt to override existing files -->
    <!-- /s will copy subdirectories unless they are empty-->
    <Exec Condition="Exists('$(SolutionDir)openSees\bin\')" Command="xcopy /y /s $(SolutionDir)openSees\bin\** $(OutDir)" />
    <Exec Condition="Exists('$(SolutionDir)openSees\lib\')" Command="xcopy /y /s $(SolutionDir)openSees\lib\** $(OutDir)..\lib\" />
  </Target>

  <!--<Target Name="NpmInstall" Condition="'$(Configuration)' == 'Release' AND '$(ContinuousIntegrationBuild)' == false" Inputs="$(NpmFolder)/package.json" Outputs="$(NpmFolder)/node_modules/.install-stamp">
    --><!--
        Use npm install or npm ci depending on RestorePackagesWithLockFile value.
        Uncomment the following lines if you want to use this feature:

        <PropertyGroup>
          <RestorePackagesWithLockFile>true</RestorePackagesWithLockFile>
        </PropertyGroup>
     --><!--
    <Exec WorkingDirectory="$(NpmFolder)" Command="npm ci" Condition="'$(RestorePackagesWithLockFile)' == 'true'" />
    <Exec WorkingDirectory="$(NpmFolder)" Command="npm install" Condition="'$(RestorePackagesWithLockFile)' != 'true'" />

    --><!-- Write the stamp file, so incremental builds work --><!--
    <Touch Files="$(NpmFolder)/node_modules/.install-stamp" AlwaysCreate="true" />
  </Target>

  --><!--
      2. Run npm run build before building the .NET project.
      MSBuild runs NpmInstall before this task because of the DependsOnTargets attribute.
   --><!--
  <Target Name="NpmRunBuild" DependsOnTargets="NpmInstall" BeforeTargets="BeforeBuild" Condition="'$(Configuration)' == 'Release' AND '$(ContinuousIntegrationBuild)' == false">
    <Exec WorkingDirectory="$(NpmFolder)" Command="npm run build" />
    <Exec WorkingDirectory="$(NpmFolder)" Command="npx tailwindcss -i ./src/app.css -o ../wwwroot/css/tailwind.css" />
  </Target>-->

</Project>
