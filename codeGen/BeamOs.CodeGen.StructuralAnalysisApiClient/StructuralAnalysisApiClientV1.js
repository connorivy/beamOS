//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
export class StructuralAnalysisApiClientV1 {
    constructor(baseUrl, http) {
        this.jsonParseReviver = undefined;
        this.http = http ? http : window;
        this.baseUrl = baseUrl !== null && baseUrl !== void 0 ? baseUrl : "http://localhost:5079";
    }
    /**
     * @return OK
     */
    createSectionProfile(modelId, body) {
        let url_ = this.baseUrl + "/api/models/{modelId}/section-profiles";
        if (modelId === undefined || modelId === null)
            throw new Error("The parameter 'modelId' must be defined.");
        url_ = url_.replace("{modelId}", encodeURIComponent("" + modelId));
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processCreateSectionProfile(_response);
        });
    }
    processCreateSectionProfile(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ResultOfSectionProfileResponse.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * @return OK
     */
    batchPutSectionProfile(modelId, body) {
        let url_ = this.baseUrl + "/api/models/{modelId}/section-profiles";
        if (modelId === undefined || modelId === null)
            throw new Error("The parameter 'modelId' must be defined.");
        url_ = url_.replace("{modelId}", encodeURIComponent("" + modelId));
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processBatchPutSectionProfile(_response);
        });
    }
    processBatchPutSectionProfile(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ResultOfBatchResponse.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * @return OK
     */
    deleteSectionProfile(modelId, id) {
        let url_ = this.baseUrl + "/api/models/{modelId}/section-profiles/{id}";
        if (modelId === undefined || modelId === null)
            throw new Error("The parameter 'modelId' must be defined.");
        url_ = url_.replace("{modelId}", encodeURIComponent("" + modelId));
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "DELETE",
            headers: {
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processDeleteSectionProfile(_response);
        });
    }
    processDeleteSectionProfile(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ResultOfModelEntityResponse.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * @return OK
     */
    putSectionProfile(id, modelId, body) {
        let url_ = this.baseUrl + "/api/models/{modelId}/section-profiles/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (modelId === undefined || modelId === null)
            throw new Error("The parameter 'modelId' must be defined.");
        url_ = url_.replace("{modelId}", encodeURIComponent("" + modelId));
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processPutSectionProfile(_response);
        });
    }
    processPutSectionProfile(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ResultOfSectionProfileResponse.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * @return OK
     */
    createPointLoad(modelId, body) {
        let url_ = this.baseUrl + "/api/models/{modelId}/point-loads";
        if (modelId === undefined || modelId === null)
            throw new Error("The parameter 'modelId' must be defined.");
        url_ = url_.replace("{modelId}", encodeURIComponent("" + modelId));
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processCreatePointLoad(_response);
        });
    }
    processCreatePointLoad(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ResultOfPointLoadResponse.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * @return OK
     */
    batchPutPointLoad(modelId, body) {
        let url_ = this.baseUrl + "/api/models/{modelId}/point-loads";
        if (modelId === undefined || modelId === null)
            throw new Error("The parameter 'modelId' must be defined.");
        url_ = url_.replace("{modelId}", encodeURIComponent("" + modelId));
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processBatchPutPointLoad(_response);
        });
    }
    processBatchPutPointLoad(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ResultOfBatchResponse.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * @return OK
     */
    deletePointLoad(modelId, id) {
        let url_ = this.baseUrl + "/api/models/{modelId}/point-loads/{id}";
        if (modelId === undefined || modelId === null)
            throw new Error("The parameter 'modelId' must be defined.");
        url_ = url_.replace("{modelId}", encodeURIComponent("" + modelId));
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "DELETE",
            headers: {
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processDeletePointLoad(_response);
        });
    }
    processDeletePointLoad(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ResultOfModelEntityResponse.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * @return OK
     */
    putPointLoad(id, modelId, body) {
        let url_ = this.baseUrl + "/api/models/{modelId}/point-loads/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (modelId === undefined || modelId === null)
            throw new Error("The parameter 'modelId' must be defined.");
        url_ = url_.replace("{modelId}", encodeURIComponent("" + modelId));
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processPutPointLoad(_response);
        });
    }
    processPutPointLoad(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ResultOfPointLoadResponse.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * @return OK
     */
    createNode(modelId, body) {
        let url_ = this.baseUrl + "/api/models/{modelId}/nodes";
        if (modelId === undefined || modelId === null)
            throw new Error("The parameter 'modelId' must be defined.");
        url_ = url_.replace("{modelId}", encodeURIComponent("" + modelId));
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processCreateNode(_response);
        });
    }
    processCreateNode(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ResultOfNodeResponse.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * @return OK
     */
    updateNode(modelId, body) {
        let url_ = this.baseUrl + "/api/models/{modelId}/nodes";
        if (modelId === undefined || modelId === null)
            throw new Error("The parameter 'modelId' must be defined.");
        url_ = url_.replace("{modelId}", encodeURIComponent("" + modelId));
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            method: "PATCH",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processUpdateNode(_response);
        });
    }
    processUpdateNode(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ResultOfNodeResponse.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * @return OK
     */
    batchPutNode(modelId, body) {
        let url_ = this.baseUrl + "/api/models/{modelId}/nodes";
        if (modelId === undefined || modelId === null)
            throw new Error("The parameter 'modelId' must be defined.");
        url_ = url_.replace("{modelId}", encodeURIComponent("" + modelId));
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processBatchPutNode(_response);
        });
    }
    processBatchPutNode(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ResultOfBatchResponse.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * @return OK
     */
    deleteNode(modelId, id) {
        let url_ = this.baseUrl + "/api/models/{modelId}/nodes/{id}";
        if (modelId === undefined || modelId === null)
            throw new Error("The parameter 'modelId' must be defined.");
        url_ = url_.replace("{modelId}", encodeURIComponent("" + modelId));
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "DELETE",
            headers: {
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processDeleteNode(_response);
        });
    }
    processDeleteNode(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ResultOfModelEntityResponse.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * @return OK
     */
    putNode(id, modelId, body) {
        let url_ = this.baseUrl + "/api/models/{modelId}/nodes/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (modelId === undefined || modelId === null)
            throw new Error("The parameter 'modelId' must be defined.");
        url_ = url_.replace("{modelId}", encodeURIComponent("" + modelId));
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processPutNode(_response);
        });
    }
    processPutNode(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ResultOfNodeResponse.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * @return OK
     */
    createMomentLoad(modelId, body) {
        let url_ = this.baseUrl + "/api/models/{modelId}/moment-loads";
        if (modelId === undefined || modelId === null)
            throw new Error("The parameter 'modelId' must be defined.");
        url_ = url_.replace("{modelId}", encodeURIComponent("" + modelId));
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processCreateMomentLoad(_response);
        });
    }
    processCreateMomentLoad(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ResultOfMomentLoadResponse.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * @return OK
     */
    batchPutMomentLoad(modelId, body) {
        let url_ = this.baseUrl + "/api/models/{modelId}/moment-loads";
        if (modelId === undefined || modelId === null)
            throw new Error("The parameter 'modelId' must be defined.");
        url_ = url_.replace("{modelId}", encodeURIComponent("" + modelId));
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processBatchPutMomentLoad(_response);
        });
    }
    processBatchPutMomentLoad(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ResultOfBatchResponse.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * @return OK
     */
    deleteMomentLoad(modelId, id) {
        let url_ = this.baseUrl + "/api/models/{modelId}/moment-loads/{id}";
        if (modelId === undefined || modelId === null)
            throw new Error("The parameter 'modelId' must be defined.");
        url_ = url_.replace("{modelId}", encodeURIComponent("" + modelId));
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "DELETE",
            headers: {
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processDeleteMomentLoad(_response);
        });
    }
    processDeleteMomentLoad(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ResultOfModelEntityResponse.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * @return OK
     */
    putMomentLoad(id, modelId, body) {
        let url_ = this.baseUrl + "/api/models/{modelId}/moment-loads/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (modelId === undefined || modelId === null)
            throw new Error("The parameter 'modelId' must be defined.");
        url_ = url_.replace("{modelId}", encodeURIComponent("" + modelId));
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processPutMomentLoad(_response);
        });
    }
    processPutMomentLoad(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ResultOfMomentLoadResponse.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * @param body (optional)
     * @return OK
     */
    createModel(body) {
        let url_ = this.baseUrl + "/api/models";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processCreateModel(_response);
        });
    }
    processCreateModel(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ResultOfModelResponse.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * @return OK
     */
    getModels() {
        let url_ = this.baseUrl + "/api/models";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processGetModels(_response);
        });
    }
    processGetModels(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ResultOfListOfModelInfoResponse.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * @return OK
     */
    getModel(modelId) {
        let url_ = this.baseUrl + "/api/models/{modelId}";
        if (modelId === undefined || modelId === null)
            throw new Error("The parameter 'modelId' must be defined.");
        url_ = url_.replace("{modelId}", encodeURIComponent("" + modelId));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processGetModel(_response);
        });
    }
    processGetModel(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ResultOfModelResponse.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * @return OK
     */
    createMaterial(modelId, body) {
        let url_ = this.baseUrl + "/api/models/{modelId}/materials";
        if (modelId === undefined || modelId === null)
            throw new Error("The parameter 'modelId' must be defined.");
        url_ = url_.replace("{modelId}", encodeURIComponent("" + modelId));
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processCreateMaterial(_response);
        });
    }
    processCreateMaterial(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ResultOfMaterialResponse.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * @return OK
     */
    batchPutMaterial(modelId, body) {
        let url_ = this.baseUrl + "/api/models/{modelId}/materials";
        if (modelId === undefined || modelId === null)
            throw new Error("The parameter 'modelId' must be defined.");
        url_ = url_.replace("{modelId}", encodeURIComponent("" + modelId));
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processBatchPutMaterial(_response);
        });
    }
    processBatchPutMaterial(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ResultOfBatchResponse.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * @return OK
     */
    putMaterial(id, modelId, body) {
        let url_ = this.baseUrl + "/api/models/{modelId}/materials/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (modelId === undefined || modelId === null)
            throw new Error("The parameter 'modelId' must be defined.");
        url_ = url_.replace("{modelId}", encodeURIComponent("" + modelId));
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processPutMaterial(_response);
        });
    }
    processPutMaterial(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ResultOfMaterialResponse.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * @return OK
     */
    batchPutLoadCombination(modelId, body) {
        let url_ = this.baseUrl + "/api/models/{modelId}/load-combinations";
        if (modelId === undefined || modelId === null)
            throw new Error("The parameter 'modelId' must be defined.");
        url_ = url_.replace("{modelId}", encodeURIComponent("" + modelId));
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processBatchPutLoadCombination(_response);
        });
    }
    processBatchPutLoadCombination(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ResultOfBatchResponse.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * @return OK
     */
    createLoadCombination(modelId, body) {
        let url_ = this.baseUrl + "/api/models/{modelId}/load-combinations";
        if (modelId === undefined || modelId === null)
            throw new Error("The parameter 'modelId' must be defined.");
        url_ = url_.replace("{modelId}", encodeURIComponent("" + modelId));
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processCreateLoadCombination(_response);
        });
    }
    processCreateLoadCombination(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ResultOfLoadCombination.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * @return OK
     */
    deleteLoadCombination(modelId, id) {
        let url_ = this.baseUrl + "/api/models/{modelId}/load-combinations/{id}";
        if (modelId === undefined || modelId === null)
            throw new Error("The parameter 'modelId' must be defined.");
        url_ = url_.replace("{modelId}", encodeURIComponent("" + modelId));
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "DELETE",
            headers: {
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processDeleteLoadCombination(_response);
        });
    }
    processDeleteLoadCombination(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ResultOfModelEntityResponse.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * @return OK
     */
    getLoadCombination(modelId, id) {
        let url_ = this.baseUrl + "/api/models/{modelId}/load-combinations/{id}";
        if (modelId === undefined || modelId === null)
            throw new Error("The parameter 'modelId' must be defined.");
        url_ = url_.replace("{modelId}", encodeURIComponent("" + modelId));
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processGetLoadCombination(_response);
        });
    }
    processGetLoadCombination(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ResultOfLoadCombination.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * @return OK
     */
    putLoadCombination(modelId, id, body) {
        let url_ = this.baseUrl + "/api/models/{modelId}/load-combinations/{id}";
        if (modelId === undefined || modelId === null)
            throw new Error("The parameter 'modelId' must be defined.");
        url_ = url_.replace("{modelId}", encodeURIComponent("" + modelId));
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processPutLoadCombination(_response);
        });
    }
    processPutLoadCombination(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ResultOfLoadCombination.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * @return OK
     */
    batchPutLoadCase(modelId, body) {
        let url_ = this.baseUrl + "/api/models/{modelId}/load-cases";
        if (modelId === undefined || modelId === null)
            throw new Error("The parameter 'modelId' must be defined.");
        url_ = url_.replace("{modelId}", encodeURIComponent("" + modelId));
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processBatchPutLoadCase(_response);
        });
    }
    processBatchPutLoadCase(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ResultOfBatchResponse.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * @return OK
     */
    createLoadCase(modelId, body) {
        let url_ = this.baseUrl + "/api/models/{modelId}/load-cases";
        if (modelId === undefined || modelId === null)
            throw new Error("The parameter 'modelId' must be defined.");
        url_ = url_.replace("{modelId}", encodeURIComponent("" + modelId));
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processCreateLoadCase(_response);
        });
    }
    processCreateLoadCase(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ResultOfLoadCase.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * @return OK
     */
    deleteLoadCase(modelId, id) {
        let url_ = this.baseUrl + "/api/models/{modelId}/load-cases/{id}";
        if (modelId === undefined || modelId === null)
            throw new Error("The parameter 'modelId' must be defined.");
        url_ = url_.replace("{modelId}", encodeURIComponent("" + modelId));
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "DELETE",
            headers: {
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processDeleteLoadCase(_response);
        });
    }
    processDeleteLoadCase(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ResultOfModelEntityResponse.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * @return OK
     */
    getLoadCase(modelId, id) {
        let url_ = this.baseUrl + "/api/models/{modelId}/load-cases/{id}";
        if (modelId === undefined || modelId === null)
            throw new Error("The parameter 'modelId' must be defined.");
        url_ = url_.replace("{modelId}", encodeURIComponent("" + modelId));
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processGetLoadCase(_response);
        });
    }
    processGetLoadCase(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ResultOfLoadCase.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * @return OK
     */
    putLoadCase(modelId, id, body) {
        let url_ = this.baseUrl + "/api/models/{modelId}/load-cases/{id}";
        if (modelId === undefined || modelId === null)
            throw new Error("The parameter 'modelId' must be defined.");
        url_ = url_.replace("{modelId}", encodeURIComponent("" + modelId));
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processPutLoadCase(_response);
        });
    }
    processPutLoadCase(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ResultOfLoadCase.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * @return OK
     */
    createElement1d(modelId, body) {
        let url_ = this.baseUrl + "/api/models/{modelId}/element1ds";
        if (modelId === undefined || modelId === null)
            throw new Error("The parameter 'modelId' must be defined.");
        url_ = url_.replace("{modelId}", encodeURIComponent("" + modelId));
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processCreateElement1d(_response);
        });
    }
    processCreateElement1d(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ResultOfElement1dResponse.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * @return OK
     */
    batchPutElement1d(modelId, body) {
        let url_ = this.baseUrl + "/api/models/{modelId}/element1ds";
        if (modelId === undefined || modelId === null)
            throw new Error("The parameter 'modelId' must be defined.");
        url_ = url_.replace("{modelId}", encodeURIComponent("" + modelId));
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processBatchPutElement1d(_response);
        });
    }
    processBatchPutElement1d(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ResultOfBatchResponse.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * @return OK
     */
    deleteElement1d(modelId, id) {
        let url_ = this.baseUrl + "/api/models/{modelId}/element1ds/{id}";
        if (modelId === undefined || modelId === null)
            throw new Error("The parameter 'modelId' must be defined.");
        url_ = url_.replace("{modelId}", encodeURIComponent("" + modelId));
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "DELETE",
            headers: {
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processDeleteElement1d(_response);
        });
    }
    processDeleteElement1d(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ResultOfModelEntityResponse.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * @return OK
     */
    getElement1d(modelId, id) {
        let url_ = this.baseUrl + "/api/models/{modelId}/element1ds/{id}";
        if (modelId === undefined || modelId === null)
            throw new Error("The parameter 'modelId' must be defined.");
        url_ = url_.replace("{modelId}", encodeURIComponent("" + modelId));
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processGetElement1d(_response);
        });
    }
    processGetElement1d(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ResultOfElement1dResponse.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * @return OK
     */
    putElement1d(id, modelId, body) {
        let url_ = this.baseUrl + "/api/models/{modelId}/element1ds/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (modelId === undefined || modelId === null)
            throw new Error("The parameter 'modelId' must be defined.");
        url_ = url_.replace("{modelId}", encodeURIComponent("" + modelId));
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processPutElement1d(_response);
        });
    }
    processPutElement1d(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ResultOfElement1dResponse.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * @param body (optional)
     * @return OK
     */
    runOpenSeesAnalysis(modelId, body) {
        let url_ = this.baseUrl + "/api/models/{modelId}/analyze/opensees";
        if (modelId === undefined || modelId === null)
            throw new Error("The parameter 'modelId' must be defined.");
        url_ = url_.replace("{modelId}", encodeURIComponent("" + modelId));
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processRunOpenSeesAnalysis(_response);
        });
    }
    processRunOpenSeesAnalysis(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ResultOfAnalyticalResultsResponse.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * @param body (optional)
     * @return OK
     */
    runDirectStiffnessMethod(modelId, body) {
        let url_ = this.baseUrl + "/api/models/{modelId}/analyze/dsm";
        if (modelId === undefined || modelId === null)
            throw new Error("The parameter 'modelId' must be defined.");
        url_ = url_.replace("{modelId}", encodeURIComponent("" + modelId));
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processRunDirectStiffnessMethod(_response);
        });
    }
    processRunDirectStiffnessMethod(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ResultOfAnalyticalResultsResponse.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * @return OK
     */
    deleteAllResultSets(modelId) {
        let url_ = this.baseUrl + "/api/models/{modelId}/result-sets";
        if (modelId === undefined || modelId === null)
            throw new Error("The parameter 'modelId' must be defined.");
        url_ = url_.replace("{modelId}", encodeURIComponent("" + modelId));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "DELETE",
            headers: {
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processDeleteAllResultSets(_response);
        });
    }
    processDeleteAllResultSets(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ResultOfint.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * @param unitsOverride (optional)
     * @return OK
     */
    getDiagrams(modelId, id, unitsOverride) {
        let url_ = this.baseUrl + "/api/models/{modelId}/result-sets/{id}/diagrams?";
        if (modelId === undefined || modelId === null)
            throw new Error("The parameter 'modelId' must be defined.");
        url_ = url_.replace("{modelId}", encodeURIComponent("" + modelId));
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (unitsOverride === null)
            throw new Error("The parameter 'unitsOverride' cannot be null.");
        else if (unitsOverride !== undefined)
            url_ += "UnitsOverride=" + encodeURIComponent("" + unitsOverride) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processGetDiagrams(_response);
        });
    }
    processGetDiagrams(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ResultOfAnalyticalResultsResponse.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * @return OK
     */
    getNodeResult(modelId, resultSetId, id) {
        let url_ = this.baseUrl + "/api/models/{modelId}/result-sets/{resultSetId}/node-results/{id}";
        if (modelId === undefined || modelId === null)
            throw new Error("The parameter 'modelId' must be defined.");
        url_ = url_.replace("{modelId}", encodeURIComponent("" + modelId));
        if (resultSetId === undefined || resultSetId === null)
            throw new Error("The parameter 'resultSetId' must be defined.");
        url_ = url_.replace("{resultSetId}", encodeURIComponent("" + resultSetId));
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processGetNodeResult(_response);
        });
    }
    processGetNodeResult(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ResultOfNodeResultResponse.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * @return OK
     */
    getResultSet(modelId, id) {
        let url_ = this.baseUrl + "/api/models/{modelId}/result-sets/{id}";
        if (modelId === undefined || modelId === null)
            throw new Error("The parameter 'modelId' must be defined.");
        url_ = url_.replace("{modelId}", encodeURIComponent("" + modelId));
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processGetResultSet(_response);
        });
    }
    processGetResultSet(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ResultOfResultSetResponse.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * @param body (optional)
     * @return OK
     */
    convertToBeamOs(body) {
        let url_ = this.baseUrl + "/api/speckle-receive";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processConvertToBeamOs(_response);
        });
    }
    processConvertToBeamOs(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ResultOfBeamOsModelBuilderDto.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * @return OK
     */
    githubModelsChat(modelId, body) {
        let url_ = this.baseUrl + "/api/models/{modelId}/github-models-chat";
        if (modelId === undefined || modelId === null)
            throw new Error("The parameter 'modelId' must be defined.");
        url_ = url_.replace("{modelId}", encodeURIComponent("" + modelId));
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processGithubModelsChat(_response);
        });
    }
    processGithubModelsChat(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ResultOfstring.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
}
export class AnalysisSettings {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.element1DAnalysisType = _data["element1DAnalysisType"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new AnalysisSettings();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["element1DAnalysisType"] = this.element1DAnalysisType;
        return data;
    }
}
export class AnalyticalResultsResponse {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            if (Array.isArray(_data["shearDiagrams"])) {
                this.shearDiagrams = [];
                for (let item of _data["shearDiagrams"])
                    this.shearDiagrams.push(ShearDiagramResponse.fromJS(item));
            }
            if (Array.isArray(_data["momentDiagrams"])) {
                this.momentDiagrams = [];
                for (let item of _data["momentDiagrams"])
                    this.momentDiagrams.push(MomentDiagramResponse.fromJS(item));
            }
            if (Array.isArray(_data["deflectionDiagrams"])) {
                this.deflectionDiagrams = [];
                for (let item of _data["deflectionDiagrams"])
                    this.deflectionDiagrams.push(DeflectionDiagramResponse.fromJS(item));
            }
            this.globalStresses = _data["globalStresses"] ? GlobalStresses.fromJS(_data["globalStresses"]) : undefined;
            this.id = _data["id"];
            this.modelId = _data["modelId"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new AnalyticalResultsResponse();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        if (Array.isArray(this.shearDiagrams)) {
            data["shearDiagrams"] = [];
            for (let item of this.shearDiagrams)
                data["shearDiagrams"].push(item.toJSON());
        }
        if (Array.isArray(this.momentDiagrams)) {
            data["momentDiagrams"] = [];
            for (let item of this.momentDiagrams)
                data["momentDiagrams"].push(item.toJSON());
        }
        if (Array.isArray(this.deflectionDiagrams)) {
            data["deflectionDiagrams"] = [];
            for (let item of this.deflectionDiagrams)
                data["deflectionDiagrams"].push(item.toJSON());
        }
        data["globalStresses"] = this.globalStresses ? this.globalStresses.toJSON() : undefined;
        data["id"] = this.id;
        data["modelId"] = this.modelId;
        return data;
    }
}
export class Angle {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.value = _data["value"];
            this.unit = _data["unit"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new Angle();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["value"] = this.value;
        data["unit"] = this.unit;
        return data;
    }
}
export var AngleUnit;
(function (AngleUnit) {
    AngleUnit["Undefined"] = "Undefined";
    AngleUnit["Degree"] = "Degree";
    AngleUnit["Radian"] = "Radian";
})(AngleUnit || (AngleUnit = {}));
export var AreaMomentOfInertiaUnit;
(function (AreaMomentOfInertiaUnit) {
    AreaMomentOfInertiaUnit["Undefined"] = "Undefined";
    AreaMomentOfInertiaUnit["CentimeterToTheFourth"] = "CentimeterToTheFourth";
    AreaMomentOfInertiaUnit["FootToTheFourth"] = "FootToTheFourth";
    AreaMomentOfInertiaUnit["InchToTheFourth"] = "InchToTheFourth";
    AreaMomentOfInertiaUnit["MeterToTheFourth"] = "MeterToTheFourth";
    AreaMomentOfInertiaUnit["MillimeterToTheFourth"] = "MillimeterToTheFourth";
})(AreaMomentOfInertiaUnit || (AreaMomentOfInertiaUnit = {}));
export var AreaUnit;
(function (AreaUnit) {
    AreaUnit["Undefined"] = "Undefined";
    AreaUnit["SquareCentimeter"] = "SquareCentimeter";
    AreaUnit["SquareFoot"] = "SquareFoot";
    AreaUnit["SquareInch"] = "SquareInch";
    AreaUnit["SquareMeter"] = "SquareMeter";
    AreaUnit["SquareMillimeter"] = "SquareMillimeter";
})(AreaUnit || (AreaUnit = {}));
export class BatchResponse {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.created = _data["created"];
            this.updated = _data["updated"];
            this.deleted = _data["deleted"];
            this.errors = _data["errors"];
            if (Array.isArray(_data["entityStatuses"])) {
                this.entityStatuses = [];
                for (let item of _data["entityStatuses"])
                    this.entityStatuses.push(EntityStatus.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new BatchResponse();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["created"] = this.created;
        data["updated"] = this.updated;
        data["deleted"] = this.deleted;
        data["errors"] = this.errors;
        if (Array.isArray(this.entityStatuses)) {
            data["entityStatuses"] = [];
            for (let item of this.entityStatuses)
                data["entityStatuses"].push(item.toJSON());
        }
        return data;
    }
}
export class BeamOsError {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.code = _data["code"];
            this.description = _data["description"];
            this.type = _data["type"];
            this.numericType = _data["numericType"];
            if (_data["metadata"]) {
                this.metadata = {};
                for (let key in _data["metadata"]) {
                    if (_data["metadata"].hasOwnProperty(key))
                        this.metadata[key] = _data["metadata"][key];
                }
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new BeamOsError();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["code"] = this.code;
        data["description"] = this.description;
        data["type"] = this.type;
        data["numericType"] = this.numericType;
        if (this.metadata) {
            data["metadata"] = {};
            for (let key in this.metadata) {
                if (this.metadata.hasOwnProperty(key))
                    data["metadata"][key] = this.metadata[key];
            }
        }
        return data;
    }
}
export class BeamOsModelBuilderDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.name = _data["name"];
            this.description = _data["description"];
            this.settings = _data["settings"] ? ModelSettings.fromJS(_data["settings"]) : undefined;
            this.guidString = _data["guidString"];
            if (Array.isArray(_data["nodes"])) {
                this.nodes = [];
                for (let item of _data["nodes"])
                    this.nodes.push(PutNodeRequest.fromJS(item));
            }
            if (Array.isArray(_data["materials"])) {
                this.materials = [];
                for (let item of _data["materials"])
                    this.materials.push(PutMaterialRequest.fromJS(item));
            }
            if (Array.isArray(_data["sectionProfiles"])) {
                this.sectionProfiles = [];
                for (let item of _data["sectionProfiles"])
                    this.sectionProfiles.push(PutSectionProfileRequest.fromJS(item));
            }
            if (Array.isArray(_data["element1ds"])) {
                this.element1ds = [];
                for (let item of _data["element1ds"])
                    this.element1ds.push(PutElement1dRequest.fromJS(item));
            }
            if (Array.isArray(_data["pointLoads"])) {
                this.pointLoads = [];
                for (let item of _data["pointLoads"])
                    this.pointLoads.push(PutPointLoadRequest.fromJS(item));
            }
            if (Array.isArray(_data["momentLoads"])) {
                this.momentLoads = [];
                for (let item of _data["momentLoads"])
                    this.momentLoads.push(PutMomentLoadRequest.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new BeamOsModelBuilderDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["name"] = this.name;
        data["description"] = this.description;
        data["settings"] = this.settings ? this.settings.toJSON() : undefined;
        data["guidString"] = this.guidString;
        if (Array.isArray(this.nodes)) {
            data["nodes"] = [];
            for (let item of this.nodes)
                data["nodes"].push(item.toJSON());
        }
        if (Array.isArray(this.materials)) {
            data["materials"] = [];
            for (let item of this.materials)
                data["materials"].push(item.toJSON());
        }
        if (Array.isArray(this.sectionProfiles)) {
            data["sectionProfiles"] = [];
            for (let item of this.sectionProfiles)
                data["sectionProfiles"].push(item.toJSON());
        }
        if (Array.isArray(this.element1ds)) {
            data["element1ds"] = [];
            for (let item of this.element1ds)
                data["element1ds"].push(item.toJSON());
        }
        if (Array.isArray(this.pointLoads)) {
            data["pointLoads"] = [];
            for (let item of this.pointLoads)
                data["pointLoads"].push(item.toJSON());
        }
        if (Array.isArray(this.momentLoads)) {
            data["momentLoads"] = [];
            for (let item of this.momentLoads)
                data["momentLoads"].push(item.toJSON());
        }
        return data;
    }
}
export class CreateElement1dRequest {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.startNodeId = _data["startNodeId"];
            this.endNodeId = _data["endNodeId"];
            this.materialId = _data["materialId"];
            this.sectionProfileId = _data["sectionProfileId"];
            this.sectionProfileRotation = _data["sectionProfileRotation"] ? NullableOfAngle.fromJS(_data["sectionProfileRotation"]) : undefined;
            this.id = _data["id"];
            if (_data["metadata"]) {
                this.metadata = {};
                for (let key in _data["metadata"]) {
                    if (_data["metadata"].hasOwnProperty(key))
                        this.metadata[key] = _data["metadata"][key];
                }
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new CreateElement1dRequest();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["startNodeId"] = this.startNodeId;
        data["endNodeId"] = this.endNodeId;
        data["materialId"] = this.materialId;
        data["sectionProfileId"] = this.sectionProfileId;
        data["sectionProfileRotation"] = this.sectionProfileRotation ? this.sectionProfileRotation.toJSON() : undefined;
        data["id"] = this.id;
        if (this.metadata) {
            data["metadata"] = {};
            for (let key in this.metadata) {
                if (this.metadata.hasOwnProperty(key))
                    data["metadata"][key] = this.metadata[key];
            }
        }
        return data;
    }
}
export class CreateMaterialRequest {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.modulusOfElasticity = _data["modulusOfElasticity"];
            this.modulusOfRigidity = _data["modulusOfRigidity"];
            this.pressureUnit = _data["pressureUnit"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new CreateMaterialRequest();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["modulusOfElasticity"] = this.modulusOfElasticity;
        data["modulusOfRigidity"] = this.modulusOfRigidity;
        data["pressureUnit"] = this.pressureUnit;
        return data;
    }
}
export class CreateModelRequest {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.settings = new ModelSettings();
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.name = _data["name"];
            this.description = _data["description"];
            this.settings = _data["settings"] ? ModelSettings.fromJS(_data["settings"]) : new ModelSettings();
            this.id = _data["id"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new CreateModelRequest();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["name"] = this.name;
        data["description"] = this.description;
        data["settings"] = this.settings ? this.settings.toJSON() : undefined;
        data["id"] = this.id;
        return data;
    }
}
export class CreateMomentLoadRequest {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.torque = new Torque();
            this.axisDirection = new Vector3();
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.nodeId = _data["nodeId"];
            this.loadCaseId = _data["loadCaseId"];
            this.torque = _data["torque"] ? Torque.fromJS(_data["torque"]) : new Torque();
            this.axisDirection = _data["axisDirection"] ? Vector3.fromJS(_data["axisDirection"]) : new Vector3();
            this.id = _data["id"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new CreateMomentLoadRequest();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["nodeId"] = this.nodeId;
        data["loadCaseId"] = this.loadCaseId;
        data["torque"] = this.torque ? this.torque.toJSON() : undefined;
        data["axisDirection"] = this.axisDirection ? this.axisDirection.toJSON() : undefined;
        data["id"] = this.id;
        return data;
    }
}
export class CreateNodeRequest {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.locationPoint = new Point();
            this.restraint = new Restraint();
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.locationPoint = _data["locationPoint"] ? Point.fromJS(_data["locationPoint"]) : new Point();
            this.restraint = _data["restraint"] ? Restraint.fromJS(_data["restraint"]) : new Restraint();
            if (_data["metadata"]) {
                this.metadata = {};
                for (let key in _data["metadata"]) {
                    if (_data["metadata"].hasOwnProperty(key))
                        this.metadata[key] = _data["metadata"][key];
                }
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new CreateNodeRequest();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["locationPoint"] = this.locationPoint ? this.locationPoint.toJSON() : undefined;
        data["restraint"] = this.restraint ? this.restraint.toJSON() : undefined;
        if (this.metadata) {
            data["metadata"] = {};
            for (let key in this.metadata) {
                if (this.metadata.hasOwnProperty(key))
                    data["metadata"][key] = this.metadata[key];
            }
        }
        return data;
    }
}
export class CreatePointLoadRequest {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.force = new Force();
            this.direction = new Vector3();
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.nodeId = _data["nodeId"];
            this.loadCaseId = _data["loadCaseId"];
            this.force = _data["force"] ? Force.fromJS(_data["force"]) : new Force();
            this.direction = _data["direction"] ? Vector3.fromJS(_data["direction"]) : new Vector3();
            this.id = _data["id"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new CreatePointLoadRequest();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["nodeId"] = this.nodeId;
        data["loadCaseId"] = this.loadCaseId;
        data["force"] = this.force ? this.force.toJSON() : undefined;
        data["direction"] = this.direction ? this.direction.toJSON() : undefined;
        data["id"] = this.id;
        return data;
    }
}
export class CreateSectionProfileRequest {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.area = _data["area"];
            this.strongAxisMomentOfInertia = _data["strongAxisMomentOfInertia"];
            this.weakAxisMomentOfInertia = _data["weakAxisMomentOfInertia"];
            this.polarMomentOfInertia = _data["polarMomentOfInertia"];
            this.strongAxisShearArea = _data["strongAxisShearArea"];
            this.weakAxisShearArea = _data["weakAxisShearArea"];
            this.areaUnit = _data["areaUnit"];
            this.areaMomentOfInertiaUnit = _data["areaMomentOfInertiaUnit"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new CreateSectionProfileRequest();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["area"] = this.area;
        data["strongAxisMomentOfInertia"] = this.strongAxisMomentOfInertia;
        data["weakAxisMomentOfInertia"] = this.weakAxisMomentOfInertia;
        data["polarMomentOfInertia"] = this.polarMomentOfInertia;
        data["strongAxisShearArea"] = this.strongAxisShearArea;
        data["weakAxisShearArea"] = this.weakAxisShearArea;
        data["areaUnit"] = this.areaUnit;
        data["areaMomentOfInertiaUnit"] = this.areaMomentOfInertiaUnit;
        return data;
    }
}
export class DeflectionDiagramResponse {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.offsets = [];
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.element1dId = _data["element1dId"];
            this.numSteps = _data["numSteps"];
            if (Array.isArray(_data["offsets"])) {
                this.offsets = [];
                for (let item of _data["offsets"])
                    this.offsets.push(item);
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new DeflectionDiagramResponse();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["element1dId"] = this.element1dId;
        data["numSteps"] = this.numSteps;
        if (Array.isArray(this.offsets)) {
            data["offsets"] = [];
            for (let item of this.offsets)
                data["offsets"].push(item);
        }
        return data;
    }
}
export class DiagramConsistentIntervalResponse {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.startLocation = new Length();
            this.endLocation = new Length();
            this.polynomialCoefficients = [];
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.startLocation = _data["startLocation"] ? Length.fromJS(_data["startLocation"]) : new Length();
            this.endLocation = _data["endLocation"] ? Length.fromJS(_data["endLocation"]) : new Length();
            if (Array.isArray(_data["polynomialCoefficients"])) {
                this.polynomialCoefficients = [];
                for (let item of _data["polynomialCoefficients"])
                    this.polynomialCoefficients.push(item);
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new DiagramConsistentIntervalResponse();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["startLocation"] = this.startLocation ? this.startLocation.toJSON() : undefined;
        data["endLocation"] = this.endLocation ? this.endLocation.toJSON() : undefined;
        if (Array.isArray(this.polynomialCoefficients)) {
            data["polynomialCoefficients"] = [];
            for (let item of this.polynomialCoefficients)
                data["polynomialCoefficients"].push(item);
        }
        return data;
    }
}
export class DiagramConsistentIntervalResponse2 {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.startLocation = new Length();
            this.endLocation = new Length();
            this.polynomialCoefficients = [];
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.startLocation = _data["startLocation"] ? Length.fromJS(_data["startLocation"]) : new Length();
            this.endLocation = _data["endLocation"] ? Length.fromJS(_data["endLocation"]) : new Length();
            if (Array.isArray(_data["polynomialCoefficients"])) {
                this.polynomialCoefficients = [];
                for (let item of _data["polynomialCoefficients"])
                    this.polynomialCoefficients.push(item);
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new DiagramConsistentIntervalResponse2();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["startLocation"] = this.startLocation ? this.startLocation.toJSON() : undefined;
        data["endLocation"] = this.endLocation ? this.endLocation.toJSON() : undefined;
        if (Array.isArray(this.polynomialCoefficients)) {
            data["polynomialCoefficients"] = [];
            for (let item of this.polynomialCoefficients)
                data["polynomialCoefficients"].push(item);
        }
        return data;
    }
}
export class DisplacementsResponse {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.displacementAlongX = new Length();
            this.displacementAlongY = new Length();
            this.displacementAlongZ = new Length();
            this.rotationAboutX = new Angle();
            this.rotationAboutY = new Angle();
            this.rotationAboutZ = new Angle();
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.displacementAlongX = _data["displacementAlongX"] ? Length.fromJS(_data["displacementAlongX"]) : new Length();
            this.displacementAlongY = _data["displacementAlongY"] ? Length.fromJS(_data["displacementAlongY"]) : new Length();
            this.displacementAlongZ = _data["displacementAlongZ"] ? Length.fromJS(_data["displacementAlongZ"]) : new Length();
            this.rotationAboutX = _data["rotationAboutX"] ? Angle.fromJS(_data["rotationAboutX"]) : new Angle();
            this.rotationAboutY = _data["rotationAboutY"] ? Angle.fromJS(_data["rotationAboutY"]) : new Angle();
            this.rotationAboutZ = _data["rotationAboutZ"] ? Angle.fromJS(_data["rotationAboutZ"]) : new Angle();
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new DisplacementsResponse();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["displacementAlongX"] = this.displacementAlongX ? this.displacementAlongX.toJSON() : undefined;
        data["displacementAlongY"] = this.displacementAlongY ? this.displacementAlongY.toJSON() : undefined;
        data["displacementAlongZ"] = this.displacementAlongZ ? this.displacementAlongZ.toJSON() : undefined;
        data["rotationAboutX"] = this.rotationAboutX ? this.rotationAboutX.toJSON() : undefined;
        data["rotationAboutY"] = this.rotationAboutY ? this.rotationAboutY.toJSON() : undefined;
        data["rotationAboutZ"] = this.rotationAboutZ ? this.rotationAboutZ.toJSON() : undefined;
        return data;
    }
}
export var Element1dAnalysisType;
(function (Element1dAnalysisType) {
    Element1dAnalysisType["Undefined"] = "Undefined";
    Element1dAnalysisType["Euler"] = "Euler";
    Element1dAnalysisType["Timoshenko"] = "Timoshenko";
})(Element1dAnalysisType || (Element1dAnalysisType = {}));
export class Element1dData {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.startNodeId = _data["startNodeId"];
            this.endNodeId = _data["endNodeId"];
            this.materialId = _data["materialId"];
            this.sectionProfileId = _data["sectionProfileId"];
            this.sectionProfileRotation = _data["sectionProfileRotation"] ? NullableOfAngle.fromJS(_data["sectionProfileRotation"]) : undefined;
            if (_data["metadata"]) {
                this.metadata = {};
                for (let key in _data["metadata"]) {
                    if (_data["metadata"].hasOwnProperty(key))
                        this.metadata[key] = _data["metadata"][key];
                }
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new Element1dData();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["startNodeId"] = this.startNodeId;
        data["endNodeId"] = this.endNodeId;
        data["materialId"] = this.materialId;
        data["sectionProfileId"] = this.sectionProfileId;
        data["sectionProfileRotation"] = this.sectionProfileRotation ? this.sectionProfileRotation.toJSON() : undefined;
        if (this.metadata) {
            data["metadata"] = {};
            for (let key in this.metadata) {
                if (this.metadata.hasOwnProperty(key))
                    data["metadata"][key] = this.metadata[key];
            }
        }
        return data;
    }
}
export class Element1dResponse {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.sectionProfileRotation = new Angle();
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.modelId = _data["modelId"];
            this.startNodeId = _data["startNodeId"];
            this.endNodeId = _data["endNodeId"];
            this.materialId = _data["materialId"];
            this.sectionProfileId = _data["sectionProfileId"];
            this.sectionProfileRotation = _data["sectionProfileRotation"] ? Angle.fromJS(_data["sectionProfileRotation"]) : new Angle();
            if (_data["metadata"]) {
                this.metadata = {};
                for (let key in _data["metadata"]) {
                    if (_data["metadata"].hasOwnProperty(key))
                        this.metadata[key] = _data["metadata"][key];
                }
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new Element1dResponse();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["modelId"] = this.modelId;
        data["startNodeId"] = this.startNodeId;
        data["endNodeId"] = this.endNodeId;
        data["materialId"] = this.materialId;
        data["sectionProfileId"] = this.sectionProfileId;
        data["sectionProfileRotation"] = this.sectionProfileRotation ? this.sectionProfileRotation.toJSON() : undefined;
        if (this.metadata) {
            data["metadata"] = {};
            for (let key in this.metadata) {
                if (this.metadata.hasOwnProperty(key))
                    data["metadata"][key] = this.metadata[key];
            }
        }
        return data;
    }
}
export class Element1dResponse2 {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.sectionProfileRotation = new Angle();
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.modelId = _data["modelId"];
            this.startNodeId = _data["startNodeId"];
            this.endNodeId = _data["endNodeId"];
            this.materialId = _data["materialId"];
            this.sectionProfileId = _data["sectionProfileId"];
            this.sectionProfileRotation = _data["sectionProfileRotation"] ? Angle.fromJS(_data["sectionProfileRotation"]) : new Angle();
            if (_data["metadata"]) {
                this.metadata = {};
                for (let key in _data["metadata"]) {
                    if (_data["metadata"].hasOwnProperty(key))
                        this.metadata[key] = _data["metadata"][key];
                }
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new Element1dResponse2();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["modelId"] = this.modelId;
        data["startNodeId"] = this.startNodeId;
        data["endNodeId"] = this.endNodeId;
        data["materialId"] = this.materialId;
        data["sectionProfileId"] = this.sectionProfileId;
        data["sectionProfileRotation"] = this.sectionProfileRotation ? this.sectionProfileRotation.toJSON() : undefined;
        if (this.metadata) {
            data["metadata"] = {};
            for (let key in this.metadata) {
                if (this.metadata.hasOwnProperty(key))
                    data["metadata"][key] = this.metadata[key];
            }
        }
        return data;
    }
}
export class Element1dResultResponse {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.minShear = new Length();
            this.maxShear = new Length();
            this.minMoment = new Torque();
            this.maxMoment = new Torque();
            this.minDisplacement = new Length();
            this.maxDisplacement = new Length();
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.modelId = _data["modelId"];
            this.resultSetId = _data["resultSetId"];
            this.element1dId = _data["element1dId"];
            this.minShear = _data["minShear"] ? Length.fromJS(_data["minShear"]) : new Length();
            this.maxShear = _data["maxShear"] ? Length.fromJS(_data["maxShear"]) : new Length();
            this.minMoment = _data["minMoment"] ? Torque.fromJS(_data["minMoment"]) : new Torque();
            this.maxMoment = _data["maxMoment"] ? Torque.fromJS(_data["maxMoment"]) : new Torque();
            this.minDisplacement = _data["minDisplacement"] ? Length.fromJS(_data["minDisplacement"]) : new Length();
            this.maxDisplacement = _data["maxDisplacement"] ? Length.fromJS(_data["maxDisplacement"]) : new Length();
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new Element1dResultResponse();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["modelId"] = this.modelId;
        data["resultSetId"] = this.resultSetId;
        data["element1dId"] = this.element1dId;
        data["minShear"] = this.minShear ? this.minShear.toJSON() : undefined;
        data["maxShear"] = this.maxShear ? this.maxShear.toJSON() : undefined;
        data["minMoment"] = this.minMoment ? this.minMoment.toJSON() : undefined;
        data["maxMoment"] = this.maxMoment ? this.maxMoment.toJSON() : undefined;
        data["minDisplacement"] = this.minDisplacement ? this.minDisplacement.toJSON() : undefined;
        data["maxDisplacement"] = this.maxDisplacement ? this.maxDisplacement.toJSON() : undefined;
        return data;
    }
}
export var EntityOperationStatus;
(function (EntityOperationStatus) {
    EntityOperationStatus["Undefined"] = "Undefined";
    EntityOperationStatus["Created"] = "Created";
    EntityOperationStatus["Updated"] = "Updated";
    EntityOperationStatus["Deleted"] = "Deleted";
    EntityOperationStatus["Error"] = "Error";
})(EntityOperationStatus || (EntityOperationStatus = {}));
export class EntityStatus {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.entityOperationStatus = _data["entityOperationStatus"];
            this.errorMessage = _data["errorMessage"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new EntityStatus();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["entityOperationStatus"] = this.entityOperationStatus;
        data["errorMessage"] = this.errorMessage;
        return data;
    }
}
export var ErrorType;
(function (ErrorType) {
    ErrorType["None"] = "None";
    ErrorType["Failure"] = "Failure";
    ErrorType["Unexpected"] = "Unexpected";
    ErrorType["Validation"] = "Validation";
    ErrorType["Conflict"] = "Conflict";
    ErrorType["NotFound"] = "NotFound";
    ErrorType["Unauthorized"] = "Unauthorized";
    ErrorType["Forbidden"] = "Forbidden";
})(ErrorType || (ErrorType = {}));
export class Force {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.value = _data["value"];
            this.unit = _data["unit"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new Force();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["value"] = this.value;
        data["unit"] = this.unit;
        return data;
    }
}
export class ForcesResponse {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.forceAlongX = new Force();
            this.forceAlongY = new Force();
            this.forceAlongZ = new Force();
            this.momentAboutX = new Torque();
            this.momentAboutY = new Torque();
            this.momentAboutZ = new Torque();
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.forceAlongX = _data["forceAlongX"] ? Force.fromJS(_data["forceAlongX"]) : new Force();
            this.forceAlongY = _data["forceAlongY"] ? Force.fromJS(_data["forceAlongY"]) : new Force();
            this.forceAlongZ = _data["forceAlongZ"] ? Force.fromJS(_data["forceAlongZ"]) : new Force();
            this.momentAboutX = _data["momentAboutX"] ? Torque.fromJS(_data["momentAboutX"]) : new Torque();
            this.momentAboutY = _data["momentAboutY"] ? Torque.fromJS(_data["momentAboutY"]) : new Torque();
            this.momentAboutZ = _data["momentAboutZ"] ? Torque.fromJS(_data["momentAboutZ"]) : new Torque();
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ForcesResponse();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["forceAlongX"] = this.forceAlongX ? this.forceAlongX.toJSON() : undefined;
        data["forceAlongY"] = this.forceAlongY ? this.forceAlongY.toJSON() : undefined;
        data["forceAlongZ"] = this.forceAlongZ ? this.forceAlongZ.toJSON() : undefined;
        data["momentAboutX"] = this.momentAboutX ? this.momentAboutX.toJSON() : undefined;
        data["momentAboutY"] = this.momentAboutY ? this.momentAboutY.toJSON() : undefined;
        data["momentAboutZ"] = this.momentAboutZ ? this.momentAboutZ.toJSON() : undefined;
        return data;
    }
}
export var ForceUnit;
(function (ForceUnit) {
    ForceUnit["Undefined"] = "Undefined";
    ForceUnit["Kilonewton"] = "Kilonewton";
    ForceUnit["KilopoundForce"] = "KilopoundForce";
    ForceUnit["Newton"] = "Newton";
    ForceUnit["PoundForce"] = "PoundForce";
})(ForceUnit || (ForceUnit = {}));
export class GithubModelsChatRequest {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.apiKey = _data["apiKey"];
            this.message = _data["message"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new GithubModelsChatRequest();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["apiKey"] = this.apiKey;
        data["message"] = this.message;
        return data;
    }
}
export class GlobalStresses {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.maxShear = new Force();
            this.minShear = new Force();
            this.maxMoment = new Torque();
            this.minMoment = new Torque();
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.maxShear = _data["maxShear"] ? Force.fromJS(_data["maxShear"]) : new Force();
            this.minShear = _data["minShear"] ? Force.fromJS(_data["minShear"]) : new Force();
            this.maxMoment = _data["maxMoment"] ? Torque.fromJS(_data["maxMoment"]) : new Torque();
            this.minMoment = _data["minMoment"] ? Torque.fromJS(_data["minMoment"]) : new Torque();
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new GlobalStresses();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["maxShear"] = this.maxShear ? this.maxShear.toJSON() : undefined;
        data["minShear"] = this.minShear ? this.minShear.toJSON() : undefined;
        data["maxMoment"] = this.maxMoment ? this.maxMoment.toJSON() : undefined;
        data["minMoment"] = this.minMoment ? this.minMoment.toJSON() : undefined;
        return data;
    }
}
export class Length {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.value = _data["value"];
            this.unit = _data["unit"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new Length();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["value"] = this.value;
        data["unit"] = this.unit;
        return data;
    }
}
export var LengthUnit;
(function (LengthUnit) {
    LengthUnit["Undefined"] = "Undefined";
    LengthUnit["Centimeter"] = "Centimeter";
    LengthUnit["Foot"] = "Foot";
    LengthUnit["Inch"] = "Inch";
    LengthUnit["Meter"] = "Meter";
    LengthUnit["Millimeter"] = "Millimeter";
})(LengthUnit || (LengthUnit = {}));
export class LoadCase {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new LoadCase();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["name"] = this.name;
        return data;
    }
}
export class LoadCase2 {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new LoadCase2();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["name"] = this.name;
        return data;
    }
}
export class LoadCaseData {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.name = _data["name"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new LoadCaseData();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["name"] = this.name;
        return data;
    }
}
export class LoadCombination {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.loadCaseFactors = {};
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            if (_data["loadCaseFactors"]) {
                this.loadCaseFactors = {};
                for (let key in _data["loadCaseFactors"]) {
                    if (_data["loadCaseFactors"].hasOwnProperty(key))
                        this.loadCaseFactors[key] = _data["loadCaseFactors"][key];
                }
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new LoadCombination();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        if (this.loadCaseFactors) {
            data["loadCaseFactors"] = {};
            for (let key in this.loadCaseFactors) {
                if (this.loadCaseFactors.hasOwnProperty(key))
                    data["loadCaseFactors"][key] = this.loadCaseFactors[key];
            }
        }
        return data;
    }
}
export class LoadCombination2 {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.loadCaseFactors = {};
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            if (_data["loadCaseFactors"]) {
                this.loadCaseFactors = {};
                for (let key in _data["loadCaseFactors"]) {
                    if (_data["loadCaseFactors"].hasOwnProperty(key))
                        this.loadCaseFactors[key] = _data["loadCaseFactors"][key];
                }
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new LoadCombination2();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        if (this.loadCaseFactors) {
            data["loadCaseFactors"] = {};
            for (let key in this.loadCaseFactors) {
                if (this.loadCaseFactors.hasOwnProperty(key))
                    data["loadCaseFactors"][key] = this.loadCaseFactors[key];
            }
        }
        return data;
    }
}
export class LoadCombinationData {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.loadCaseFactors = {};
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            if (_data["loadCaseFactors"]) {
                this.loadCaseFactors = {};
                for (let key in _data["loadCaseFactors"]) {
                    if (_data["loadCaseFactors"].hasOwnProperty(key))
                        this.loadCaseFactors[key] = _data["loadCaseFactors"][key];
                }
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new LoadCombinationData();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        if (this.loadCaseFactors) {
            data["loadCaseFactors"] = {};
            for (let key in this.loadCaseFactors) {
                if (this.loadCaseFactors.hasOwnProperty(key))
                    data["loadCaseFactors"][key] = this.loadCaseFactors[key];
            }
        }
        return data;
    }
}
export class MaterialRequestData {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.modulusOfElasticity = _data["modulusOfElasticity"];
            this.modulusOfRigidity = _data["modulusOfRigidity"];
            this.pressureUnit = _data["pressureUnit"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new MaterialRequestData();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["modulusOfElasticity"] = this.modulusOfElasticity;
        data["modulusOfRigidity"] = this.modulusOfRigidity;
        data["pressureUnit"] = this.pressureUnit;
        return data;
    }
}
export class MaterialResponse {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.modelId = _data["modelId"];
            this.modulusOfElasticity = _data["modulusOfElasticity"];
            this.modulusOfRigidity = _data["modulusOfRigidity"];
            this.pressureUnit = _data["pressureUnit"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new MaterialResponse();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["modelId"] = this.modelId;
        data["modulusOfElasticity"] = this.modulusOfElasticity;
        data["modulusOfRigidity"] = this.modulusOfRigidity;
        data["pressureUnit"] = this.pressureUnit;
        return data;
    }
}
export class MaterialResponse2 {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.modelId = _data["modelId"];
            this.modulusOfElasticity = _data["modulusOfElasticity"];
            this.modulusOfRigidity = _data["modulusOfRigidity"];
            this.pressureUnit = _data["pressureUnit"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new MaterialResponse2();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["modelId"] = this.modelId;
        data["modulusOfElasticity"] = this.modulusOfElasticity;
        data["modulusOfRigidity"] = this.modulusOfRigidity;
        data["pressureUnit"] = this.pressureUnit;
        return data;
    }
}
export class ModelEntityResponse {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.modelId = _data["modelId"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ModelEntityResponse();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["modelId"] = this.modelId;
        return data;
    }
}
export class ModelInfoResponse {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.settings = new ModelSettings();
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.name = _data["name"];
            this.description = _data["description"];
            this.settings = _data["settings"] ? ModelSettings.fromJS(_data["settings"]) : new ModelSettings();
            this.lastModified = _data["lastModified"] ? new Date(_data["lastModified"].toString()) : undefined;
            this.role = _data["role"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ModelInfoResponse();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["name"] = this.name;
        data["description"] = this.description;
        data["settings"] = this.settings ? this.settings.toJSON() : undefined;
        data["lastModified"] = this.lastModified ? this.lastModified.toISOString() : undefined;
        data["role"] = this.role;
        return data;
    }
}
export class ModelResponse {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.settings = new ModelSettings();
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.name = _data["name"];
            this.description = _data["description"];
            this.settings = _data["settings"] ? ModelSettings.fromJS(_data["settings"]) : new ModelSettings();
            this.lastModified = _data["lastModified"] ? new Date(_data["lastModified"].toString()) : undefined;
            if (Array.isArray(_data["nodes"])) {
                this.nodes = [];
                for (let item of _data["nodes"])
                    this.nodes.push(NodeResponse2.fromJS(item));
            }
            if (Array.isArray(_data["element1ds"])) {
                this.element1ds = [];
                for (let item of _data["element1ds"])
                    this.element1ds.push(Element1dResponse.fromJS(item));
            }
            if (Array.isArray(_data["materials"])) {
                this.materials = [];
                for (let item of _data["materials"])
                    this.materials.push(MaterialResponse.fromJS(item));
            }
            if (Array.isArray(_data["sectionProfiles"])) {
                this.sectionProfiles = [];
                for (let item of _data["sectionProfiles"])
                    this.sectionProfiles.push(SectionProfileResponse2.fromJS(item));
            }
            if (Array.isArray(_data["pointLoads"])) {
                this.pointLoads = [];
                for (let item of _data["pointLoads"])
                    this.pointLoads.push(PointLoadResponse2.fromJS(item));
            }
            if (Array.isArray(_data["momentLoads"])) {
                this.momentLoads = [];
                for (let item of _data["momentLoads"])
                    this.momentLoads.push(MomentLoadResponse2.fromJS(item));
            }
            if (Array.isArray(_data["resultSets"])) {
                this.resultSets = [];
                for (let item of _data["resultSets"])
                    this.resultSets.push(ResultSetResponse.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ModelResponse();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["name"] = this.name;
        data["description"] = this.description;
        data["settings"] = this.settings ? this.settings.toJSON() : undefined;
        data["lastModified"] = this.lastModified ? this.lastModified.toISOString() : undefined;
        if (Array.isArray(this.nodes)) {
            data["nodes"] = [];
            for (let item of this.nodes)
                data["nodes"].push(item.toJSON());
        }
        if (Array.isArray(this.element1ds)) {
            data["element1ds"] = [];
            for (let item of this.element1ds)
                data["element1ds"].push(item.toJSON());
        }
        if (Array.isArray(this.materials)) {
            data["materials"] = [];
            for (let item of this.materials)
                data["materials"].push(item.toJSON());
        }
        if (Array.isArray(this.sectionProfiles)) {
            data["sectionProfiles"] = [];
            for (let item of this.sectionProfiles)
                data["sectionProfiles"].push(item.toJSON());
        }
        if (Array.isArray(this.pointLoads)) {
            data["pointLoads"] = [];
            for (let item of this.pointLoads)
                data["pointLoads"].push(item.toJSON());
        }
        if (Array.isArray(this.momentLoads)) {
            data["momentLoads"] = [];
            for (let item of this.momentLoads)
                data["momentLoads"].push(item.toJSON());
        }
        if (Array.isArray(this.resultSets)) {
            data["resultSets"] = [];
            for (let item of this.resultSets)
                data["resultSets"].push(item.toJSON());
        }
        return data;
    }
}
export class ModelSettings {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.unitSettings = new UnitSettings();
            this.yAxisUp = true;
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.unitSettings = _data["unitSettings"] ? UnitSettings.fromJS(_data["unitSettings"]) : new UnitSettings();
            this.analysisSettings = _data["analysisSettings"] ? AnalysisSettings.fromJS(_data["analysisSettings"]) : undefined;
            this.yAxisUp = _data["yAxisUp"] !== undefined ? _data["yAxisUp"] : true;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ModelSettings();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["unitSettings"] = this.unitSettings ? this.unitSettings.toJSON() : undefined;
        data["analysisSettings"] = this.analysisSettings ? this.analysisSettings.toJSON() : undefined;
        data["yAxisUp"] = this.yAxisUp;
        return data;
    }
}
export class MomentDiagramResponse {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.elementLength = new Length();
            this.intervals = [];
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.modelId = _data["modelId"];
            this.resultSetId = _data["resultSetId"];
            this.element1dId = _data["element1dId"];
            this.lengthUnit = _data["lengthUnit"];
            this.torqueUnit = _data["torqueUnit"];
            this.elementLength = _data["elementLength"] ? Length.fromJS(_data["elementLength"]) : new Length();
            if (Array.isArray(_data["intervals"])) {
                this.intervals = [];
                for (let item of _data["intervals"])
                    this.intervals.push(DiagramConsistentIntervalResponse2.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new MomentDiagramResponse();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["modelId"] = this.modelId;
        data["resultSetId"] = this.resultSetId;
        data["element1dId"] = this.element1dId;
        data["lengthUnit"] = this.lengthUnit;
        data["torqueUnit"] = this.torqueUnit;
        data["elementLength"] = this.elementLength ? this.elementLength.toJSON() : undefined;
        if (Array.isArray(this.intervals)) {
            data["intervals"] = [];
            for (let item of this.intervals)
                data["intervals"].push(item.toJSON());
        }
        return data;
    }
}
export class MomentLoadData {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.torque = new Torque();
            this.axisDirection = new Vector3();
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.nodeId = _data["nodeId"];
            this.loadCaseId = _data["loadCaseId"];
            this.torque = _data["torque"] ? Torque.fromJS(_data["torque"]) : new Torque();
            this.axisDirection = _data["axisDirection"] ? Vector3.fromJS(_data["axisDirection"]) : new Vector3();
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new MomentLoadData();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["nodeId"] = this.nodeId;
        data["loadCaseId"] = this.loadCaseId;
        data["torque"] = this.torque ? this.torque.toJSON() : undefined;
        data["axisDirection"] = this.axisDirection ? this.axisDirection.toJSON() : undefined;
        return data;
    }
}
export class MomentLoadResponse {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.torque = new Torque();
            this.axisDirection = new Vector3();
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.nodeId = _data["nodeId"];
            this.loadCaseId = _data["loadCaseId"];
            this.modelId = _data["modelId"];
            this.torque = _data["torque"] ? Torque.fromJS(_data["torque"]) : new Torque();
            this.axisDirection = _data["axisDirection"] ? Vector3.fromJS(_data["axisDirection"]) : new Vector3();
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new MomentLoadResponse();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["nodeId"] = this.nodeId;
        data["loadCaseId"] = this.loadCaseId;
        data["modelId"] = this.modelId;
        data["torque"] = this.torque ? this.torque.toJSON() : undefined;
        data["axisDirection"] = this.axisDirection ? this.axisDirection.toJSON() : undefined;
        return data;
    }
}
export class MomentLoadResponse2 {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.torque = new Torque();
            this.axisDirection = new Vector3();
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.nodeId = _data["nodeId"];
            this.loadCaseId = _data["loadCaseId"];
            this.modelId = _data["modelId"];
            this.torque = _data["torque"] ? Torque.fromJS(_data["torque"]) : new Torque();
            this.axisDirection = _data["axisDirection"] ? Vector3.fromJS(_data["axisDirection"]) : new Vector3();
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new MomentLoadResponse2();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["nodeId"] = this.nodeId;
        data["loadCaseId"] = this.loadCaseId;
        data["modelId"] = this.modelId;
        data["torque"] = this.torque ? this.torque.toJSON() : undefined;
        data["axisDirection"] = this.axisDirection ? this.axisDirection.toJSON() : undefined;
        return data;
    }
}
export class NodeData {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.locationPoint = new Point();
            this.restraint = new Restraint();
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.locationPoint = _data["locationPoint"] ? Point.fromJS(_data["locationPoint"]) : new Point();
            this.restraint = _data["restraint"] ? Restraint.fromJS(_data["restraint"]) : new Restraint();
            if (_data["metadata"]) {
                this.metadata = {};
                for (let key in _data["metadata"]) {
                    if (_data["metadata"].hasOwnProperty(key))
                        this.metadata[key] = _data["metadata"][key];
                }
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new NodeData();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["locationPoint"] = this.locationPoint ? this.locationPoint.toJSON() : undefined;
        data["restraint"] = this.restraint ? this.restraint.toJSON() : undefined;
        if (this.metadata) {
            data["metadata"] = {};
            for (let key in this.metadata) {
                if (this.metadata.hasOwnProperty(key))
                    data["metadata"][key] = this.metadata[key];
            }
        }
        return data;
    }
}
export class NodeResponse {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.locationPoint = new Point();
            this.restraint = new Restraint();
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.modelId = _data["modelId"];
            this.locationPoint = _data["locationPoint"] ? Point.fromJS(_data["locationPoint"]) : new Point();
            this.restraint = _data["restraint"] ? Restraint.fromJS(_data["restraint"]) : new Restraint();
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new NodeResponse();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["modelId"] = this.modelId;
        data["locationPoint"] = this.locationPoint ? this.locationPoint.toJSON() : undefined;
        data["restraint"] = this.restraint ? this.restraint.toJSON() : undefined;
        return data;
    }
}
export class NodeResponse2 {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.locationPoint = new Point();
            this.restraint = new Restraint();
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.modelId = _data["modelId"];
            this.locationPoint = _data["locationPoint"] ? Point.fromJS(_data["locationPoint"]) : new Point();
            this.restraint = _data["restraint"] ? Restraint.fromJS(_data["restraint"]) : new Restraint();
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new NodeResponse2();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["modelId"] = this.modelId;
        data["locationPoint"] = this.locationPoint ? this.locationPoint.toJSON() : undefined;
        data["restraint"] = this.restraint ? this.restraint.toJSON() : undefined;
        return data;
    }
}
export class NodeResultResponse {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.forces = new ForcesResponse();
            this.displacements = new DisplacementsResponse();
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.modelId = _data["modelId"];
            this.resultSetId = _data["resultSetId"];
            this.nodeId = _data["nodeId"];
            this.forces = _data["forces"] ? ForcesResponse.fromJS(_data["forces"]) : new ForcesResponse();
            this.displacements = _data["displacements"] ? DisplacementsResponse.fromJS(_data["displacements"]) : new DisplacementsResponse();
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new NodeResultResponse();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["modelId"] = this.modelId;
        data["resultSetId"] = this.resultSetId;
        data["nodeId"] = this.nodeId;
        data["forces"] = this.forces ? this.forces.toJSON() : undefined;
        data["displacements"] = this.displacements ? this.displacements.toJSON() : undefined;
        return data;
    }
}
export class NodeResultResponse2 {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.forces = new ForcesResponse();
            this.displacements = new DisplacementsResponse();
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.modelId = _data["modelId"];
            this.resultSetId = _data["resultSetId"];
            this.nodeId = _data["nodeId"];
            this.forces = _data["forces"] ? ForcesResponse.fromJS(_data["forces"]) : new ForcesResponse();
            this.displacements = _data["displacements"] ? DisplacementsResponse.fromJS(_data["displacements"]) : new DisplacementsResponse();
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new NodeResultResponse2();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["modelId"] = this.modelId;
        data["resultSetId"] = this.resultSetId;
        data["nodeId"] = this.nodeId;
        data["forces"] = this.forces ? this.forces.toJSON() : undefined;
        data["displacements"] = this.displacements ? this.displacements.toJSON() : undefined;
        return data;
    }
}
export class NullableOfAngle {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.value = _data["value"];
            this.unit = _data["unit"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new NullableOfAngle();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["value"] = this.value;
        data["unit"] = this.unit;
        return data;
    }
}
export class NullableOfPartialPoint {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.x = _data["x"];
            this.y = _data["y"];
            this.z = _data["z"];
            this.lengthUnit = _data["lengthUnit"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new NullableOfPartialPoint();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["x"] = this.x;
        data["y"] = this.y;
        data["z"] = this.z;
        data["lengthUnit"] = this.lengthUnit;
        return data;
    }
}
export class NullableOfPartialRestraint {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.canTranslateAlongX = _data["canTranslateAlongX"];
            this.canTranslateAlongY = _data["canTranslateAlongY"];
            this.canTranslateAlongZ = _data["canTranslateAlongZ"];
            this.canRotateAboutX = _data["canRotateAboutX"];
            this.canRotateAboutY = _data["canRotateAboutY"];
            this.canRotateAboutZ = _data["canRotateAboutZ"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new NullableOfPartialRestraint();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["canTranslateAlongX"] = this.canTranslateAlongX;
        data["canTranslateAlongY"] = this.canTranslateAlongY;
        data["canTranslateAlongZ"] = this.canTranslateAlongZ;
        data["canRotateAboutX"] = this.canRotateAboutX;
        data["canRotateAboutY"] = this.canRotateAboutY;
        data["canRotateAboutZ"] = this.canRotateAboutZ;
        return data;
    }
}
export class Point {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.x = _data["x"];
            this.y = _data["y"];
            this.z = _data["z"];
            this.lengthUnit = _data["lengthUnit"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new Point();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["x"] = this.x;
        data["y"] = this.y;
        data["z"] = this.z;
        data["lengthUnit"] = this.lengthUnit;
        return data;
    }
}
export class PointLoadData {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.force = new Force();
            this.direction = new Vector3();
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.nodeId = _data["nodeId"];
            this.loadCaseId = _data["loadCaseId"];
            this.force = _data["force"] ? Force.fromJS(_data["force"]) : new Force();
            this.direction = _data["direction"] ? Vector3.fromJS(_data["direction"]) : new Vector3();
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new PointLoadData();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["nodeId"] = this.nodeId;
        data["loadCaseId"] = this.loadCaseId;
        data["force"] = this.force ? this.force.toJSON() : undefined;
        data["direction"] = this.direction ? this.direction.toJSON() : undefined;
        return data;
    }
}
export class PointLoadResponse {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.force = new Force();
            this.direction = new Vector3();
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.modelId = _data["modelId"];
            this.id = _data["id"];
            this.nodeId = _data["nodeId"];
            this.loadCaseId = _data["loadCaseId"];
            this.force = _data["force"] ? Force.fromJS(_data["force"]) : new Force();
            this.direction = _data["direction"] ? Vector3.fromJS(_data["direction"]) : new Vector3();
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new PointLoadResponse();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["modelId"] = this.modelId;
        data["id"] = this.id;
        data["nodeId"] = this.nodeId;
        data["loadCaseId"] = this.loadCaseId;
        data["force"] = this.force ? this.force.toJSON() : undefined;
        data["direction"] = this.direction ? this.direction.toJSON() : undefined;
        return data;
    }
}
export class PointLoadResponse2 {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.force = new Force();
            this.direction = new Vector3();
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.modelId = _data["modelId"];
            this.id = _data["id"];
            this.nodeId = _data["nodeId"];
            this.loadCaseId = _data["loadCaseId"];
            this.force = _data["force"] ? Force.fromJS(_data["force"]) : new Force();
            this.direction = _data["direction"] ? Vector3.fromJS(_data["direction"]) : new Vector3();
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new PointLoadResponse2();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["modelId"] = this.modelId;
        data["id"] = this.id;
        data["nodeId"] = this.nodeId;
        data["loadCaseId"] = this.loadCaseId;
        data["force"] = this.force ? this.force.toJSON() : undefined;
        data["direction"] = this.direction ? this.direction.toJSON() : undefined;
        return data;
    }
}
export var PressureUnit;
(function (PressureUnit) {
    PressureUnit["Undefined"] = "Undefined";
    PressureUnit["KilonewtonPerSquareCentimeter"] = "KilonewtonPerSquareCentimeter";
    PressureUnit["KilonewtonPerSquareMeter"] = "KilonewtonPerSquareMeter";
    PressureUnit["KilonewtonPerSquareMillimeter"] = "KilonewtonPerSquareMillimeter";
    PressureUnit["KilopoundForcePerSquareFoot"] = "KilopoundForcePerSquareFoot";
    PressureUnit["KilopoundForcePerSquareInch"] = "KilopoundForcePerSquareInch";
    PressureUnit["NewtonPerSquareCentimeter"] = "NewtonPerSquareCentimeter";
    PressureUnit["NewtonPerSquareMeter"] = "NewtonPerSquareMeter";
    PressureUnit["NewtonPerSquareMillimeter"] = "NewtonPerSquareMillimeter";
    PressureUnit["PoundForcePerSquareFoot"] = "PoundForcePerSquareFoot";
    PressureUnit["PoundForcePerSquareInch"] = "PoundForcePerSquareInch";
})(PressureUnit || (PressureUnit = {}));
export class PutElement1dRequest {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.startNodeId = _data["startNodeId"];
            this.endNodeId = _data["endNodeId"];
            this.materialId = _data["materialId"];
            this.sectionProfileId = _data["sectionProfileId"];
            this.sectionProfileRotation = _data["sectionProfileRotation"] ? NullableOfAngle.fromJS(_data["sectionProfileRotation"]) : undefined;
            if (_data["metadata"]) {
                this.metadata = {};
                for (let key in _data["metadata"]) {
                    if (_data["metadata"].hasOwnProperty(key))
                        this.metadata[key] = _data["metadata"][key];
                }
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new PutElement1dRequest();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["startNodeId"] = this.startNodeId;
        data["endNodeId"] = this.endNodeId;
        data["materialId"] = this.materialId;
        data["sectionProfileId"] = this.sectionProfileId;
        data["sectionProfileRotation"] = this.sectionProfileRotation ? this.sectionProfileRotation.toJSON() : undefined;
        if (this.metadata) {
            data["metadata"] = {};
            for (let key in this.metadata) {
                if (this.metadata.hasOwnProperty(key))
                    data["metadata"][key] = this.metadata[key];
            }
        }
        return data;
    }
}
export class PutMaterialRequest {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.modulusOfElasticity = _data["modulusOfElasticity"];
            this.modulusOfRigidity = _data["modulusOfRigidity"];
            this.pressureUnit = _data["pressureUnit"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new PutMaterialRequest();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["modulusOfElasticity"] = this.modulusOfElasticity;
        data["modulusOfRigidity"] = this.modulusOfRigidity;
        data["pressureUnit"] = this.pressureUnit;
        return data;
    }
}
export class PutMomentLoadRequest {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.torque = new Torque();
            this.axisDirection = new Vector3();
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.nodeId = _data["nodeId"];
            this.loadCaseId = _data["loadCaseId"];
            this.torque = _data["torque"] ? Torque.fromJS(_data["torque"]) : new Torque();
            this.axisDirection = _data["axisDirection"] ? Vector3.fromJS(_data["axisDirection"]) : new Vector3();
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new PutMomentLoadRequest();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["nodeId"] = this.nodeId;
        data["loadCaseId"] = this.loadCaseId;
        data["torque"] = this.torque ? this.torque.toJSON() : undefined;
        data["axisDirection"] = this.axisDirection ? this.axisDirection.toJSON() : undefined;
        return data;
    }
}
export class PutNodeRequest {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.locationPoint = new Point();
            this.restraint = new Restraint();
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.locationPoint = _data["locationPoint"] ? Point.fromJS(_data["locationPoint"]) : new Point();
            this.restraint = _data["restraint"] ? Restraint.fromJS(_data["restraint"]) : new Restraint();
            if (_data["metadata"]) {
                this.metadata = {};
                for (let key in _data["metadata"]) {
                    if (_data["metadata"].hasOwnProperty(key))
                        this.metadata[key] = _data["metadata"][key];
                }
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new PutNodeRequest();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["locationPoint"] = this.locationPoint ? this.locationPoint.toJSON() : undefined;
        data["restraint"] = this.restraint ? this.restraint.toJSON() : undefined;
        if (this.metadata) {
            data["metadata"] = {};
            for (let key in this.metadata) {
                if (this.metadata.hasOwnProperty(key))
                    data["metadata"][key] = this.metadata[key];
            }
        }
        return data;
    }
}
export class PutPointLoadRequest {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.force = new Force();
            this.direction = new Vector3();
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.nodeId = _data["nodeId"];
            this.loadCaseId = _data["loadCaseId"];
            this.force = _data["force"] ? Force.fromJS(_data["force"]) : new Force();
            this.direction = _data["direction"] ? Vector3.fromJS(_data["direction"]) : new Vector3();
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new PutPointLoadRequest();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["nodeId"] = this.nodeId;
        data["loadCaseId"] = this.loadCaseId;
        data["force"] = this.force ? this.force.toJSON() : undefined;
        data["direction"] = this.direction ? this.direction.toJSON() : undefined;
        return data;
    }
}
export class PutSectionProfileRequest {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.area = _data["area"];
            this.strongAxisMomentOfInertia = _data["strongAxisMomentOfInertia"];
            this.weakAxisMomentOfInertia = _data["weakAxisMomentOfInertia"];
            this.polarMomentOfInertia = _data["polarMomentOfInertia"];
            this.strongAxisShearArea = _data["strongAxisShearArea"];
            this.weakAxisShearArea = _data["weakAxisShearArea"];
            this.areaUnit = _data["areaUnit"];
            this.areaMomentOfInertiaUnit = _data["areaMomentOfInertiaUnit"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new PutSectionProfileRequest();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["area"] = this.area;
        data["strongAxisMomentOfInertia"] = this.strongAxisMomentOfInertia;
        data["weakAxisMomentOfInertia"] = this.weakAxisMomentOfInertia;
        data["polarMomentOfInertia"] = this.polarMomentOfInertia;
        data["strongAxisShearArea"] = this.strongAxisShearArea;
        data["weakAxisShearArea"] = this.weakAxisShearArea;
        data["areaUnit"] = this.areaUnit;
        data["areaMomentOfInertiaUnit"] = this.areaMomentOfInertiaUnit;
        return data;
    }
}
export class Restraint {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.canTranslateAlongX = _data["canTranslateAlongX"];
            this.canTranslateAlongY = _data["canTranslateAlongY"];
            this.canTranslateAlongZ = _data["canTranslateAlongZ"];
            this.canRotateAboutX = _data["canRotateAboutX"];
            this.canRotateAboutY = _data["canRotateAboutY"];
            this.canRotateAboutZ = _data["canRotateAboutZ"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new Restraint();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["canTranslateAlongX"] = this.canTranslateAlongX;
        data["canTranslateAlongY"] = this.canTranslateAlongY;
        data["canTranslateAlongZ"] = this.canTranslateAlongZ;
        data["canRotateAboutX"] = this.canRotateAboutX;
        data["canRotateAboutY"] = this.canRotateAboutY;
        data["canRotateAboutZ"] = this.canRotateAboutZ;
        return data;
    }
}
export class ResultOfAnalyticalResultsResponse {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.value = _data["value"] ? AnalyticalResultsResponse.fromJS(_data["value"]) : undefined;
            this.error = _data["error"] ? BeamOsError.fromJS(_data["error"]) : undefined;
            this.isError = _data["isError"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ResultOfAnalyticalResultsResponse();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["value"] = this.value ? this.value.toJSON() : undefined;
        data["error"] = this.error ? this.error.toJSON() : undefined;
        data["isError"] = this.isError;
        return data;
    }
}
export class ResultOfBatchResponse {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.value = _data["value"] ? BatchResponse.fromJS(_data["value"]) : undefined;
            this.error = _data["error"] ? BeamOsError.fromJS(_data["error"]) : undefined;
            this.isError = _data["isError"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ResultOfBatchResponse();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["value"] = this.value ? this.value.toJSON() : undefined;
        data["error"] = this.error ? this.error.toJSON() : undefined;
        data["isError"] = this.isError;
        return data;
    }
}
export class ResultOfBeamOsModelBuilderDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.value = _data["value"] ? BeamOsModelBuilderDto.fromJS(_data["value"]) : undefined;
            this.error = _data["error"] ? BeamOsError.fromJS(_data["error"]) : undefined;
            this.isError = _data["isError"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ResultOfBeamOsModelBuilderDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["value"] = this.value ? this.value.toJSON() : undefined;
        data["error"] = this.error ? this.error.toJSON() : undefined;
        data["isError"] = this.isError;
        return data;
    }
}
export class ResultOfElement1dResponse {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.value = _data["value"] ? Element1dResponse2.fromJS(_data["value"]) : undefined;
            this.error = _data["error"] ? BeamOsError.fromJS(_data["error"]) : undefined;
            this.isError = _data["isError"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ResultOfElement1dResponse();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["value"] = this.value ? this.value.toJSON() : undefined;
        data["error"] = this.error ? this.error.toJSON() : undefined;
        data["isError"] = this.isError;
        return data;
    }
}
export class ResultOfint {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.value = _data["value"];
            this.error = _data["error"] ? BeamOsError.fromJS(_data["error"]) : undefined;
            this.isError = _data["isError"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ResultOfint();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["value"] = this.value;
        data["error"] = this.error ? this.error.toJSON() : undefined;
        data["isError"] = this.isError;
        return data;
    }
}
export class ResultOfListOfModelInfoResponse {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            if (Array.isArray(_data["value"])) {
                this.value = [];
                for (let item of _data["value"])
                    this.value.push(ModelInfoResponse.fromJS(item));
            }
            this.error = _data["error"] ? BeamOsError.fromJS(_data["error"]) : undefined;
            this.isError = _data["isError"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ResultOfListOfModelInfoResponse();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        if (Array.isArray(this.value)) {
            data["value"] = [];
            for (let item of this.value)
                data["value"].push(item.toJSON());
        }
        data["error"] = this.error ? this.error.toJSON() : undefined;
        data["isError"] = this.isError;
        return data;
    }
}
export class ResultOfLoadCase {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.value = _data["value"] ? LoadCase2.fromJS(_data["value"]) : undefined;
            this.error = _data["error"] ? BeamOsError.fromJS(_data["error"]) : undefined;
            this.isError = _data["isError"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ResultOfLoadCase();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["value"] = this.value ? this.value.toJSON() : undefined;
        data["error"] = this.error ? this.error.toJSON() : undefined;
        data["isError"] = this.isError;
        return data;
    }
}
export class ResultOfLoadCombination {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.value = _data["value"] ? LoadCombination2.fromJS(_data["value"]) : undefined;
            this.error = _data["error"] ? BeamOsError.fromJS(_data["error"]) : undefined;
            this.isError = _data["isError"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ResultOfLoadCombination();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["value"] = this.value ? this.value.toJSON() : undefined;
        data["error"] = this.error ? this.error.toJSON() : undefined;
        data["isError"] = this.isError;
        return data;
    }
}
export class ResultOfMaterialResponse {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.value = _data["value"] ? MaterialResponse2.fromJS(_data["value"]) : undefined;
            this.error = _data["error"] ? BeamOsError.fromJS(_data["error"]) : undefined;
            this.isError = _data["isError"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ResultOfMaterialResponse();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["value"] = this.value ? this.value.toJSON() : undefined;
        data["error"] = this.error ? this.error.toJSON() : undefined;
        data["isError"] = this.isError;
        return data;
    }
}
export class ResultOfModelEntityResponse {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.value = _data["value"] ? ModelEntityResponse.fromJS(_data["value"]) : undefined;
            this.error = _data["error"] ? BeamOsError.fromJS(_data["error"]) : undefined;
            this.isError = _data["isError"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ResultOfModelEntityResponse();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["value"] = this.value ? this.value.toJSON() : undefined;
        data["error"] = this.error ? this.error.toJSON() : undefined;
        data["isError"] = this.isError;
        return data;
    }
}
export class ResultOfModelResponse {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.value = _data["value"] ? ModelResponse.fromJS(_data["value"]) : undefined;
            this.error = _data["error"] ? BeamOsError.fromJS(_data["error"]) : undefined;
            this.isError = _data["isError"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ResultOfModelResponse();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["value"] = this.value ? this.value.toJSON() : undefined;
        data["error"] = this.error ? this.error.toJSON() : undefined;
        data["isError"] = this.isError;
        return data;
    }
}
export class ResultOfMomentLoadResponse {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.value = _data["value"] ? MomentLoadResponse.fromJS(_data["value"]) : undefined;
            this.error = _data["error"] ? BeamOsError.fromJS(_data["error"]) : undefined;
            this.isError = _data["isError"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ResultOfMomentLoadResponse();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["value"] = this.value ? this.value.toJSON() : undefined;
        data["error"] = this.error ? this.error.toJSON() : undefined;
        data["isError"] = this.isError;
        return data;
    }
}
export class ResultOfNodeResponse {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.value = _data["value"] ? NodeResponse.fromJS(_data["value"]) : undefined;
            this.error = _data["error"] ? BeamOsError.fromJS(_data["error"]) : undefined;
            this.isError = _data["isError"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ResultOfNodeResponse();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["value"] = this.value ? this.value.toJSON() : undefined;
        data["error"] = this.error ? this.error.toJSON() : undefined;
        data["isError"] = this.isError;
        return data;
    }
}
export class ResultOfNodeResultResponse {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.value = _data["value"] ? NodeResultResponse2.fromJS(_data["value"]) : undefined;
            this.error = _data["error"] ? BeamOsError.fromJS(_data["error"]) : undefined;
            this.isError = _data["isError"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ResultOfNodeResultResponse();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["value"] = this.value ? this.value.toJSON() : undefined;
        data["error"] = this.error ? this.error.toJSON() : undefined;
        data["isError"] = this.isError;
        return data;
    }
}
export class ResultOfPointLoadResponse {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.value = _data["value"] ? PointLoadResponse.fromJS(_data["value"]) : undefined;
            this.error = _data["error"] ? BeamOsError.fromJS(_data["error"]) : undefined;
            this.isError = _data["isError"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ResultOfPointLoadResponse();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["value"] = this.value ? this.value.toJSON() : undefined;
        data["error"] = this.error ? this.error.toJSON() : undefined;
        data["isError"] = this.isError;
        return data;
    }
}
export class ResultOfResultSetResponse {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.value = _data["value"] ? ResultSetResponse2.fromJS(_data["value"]) : undefined;
            this.error = _data["error"] ? BeamOsError.fromJS(_data["error"]) : undefined;
            this.isError = _data["isError"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ResultOfResultSetResponse();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["value"] = this.value ? this.value.toJSON() : undefined;
        data["error"] = this.error ? this.error.toJSON() : undefined;
        data["isError"] = this.isError;
        return data;
    }
}
export class ResultOfSectionProfileResponse {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.value = _data["value"] ? SectionProfileResponse.fromJS(_data["value"]) : undefined;
            this.error = _data["error"] ? BeamOsError.fromJS(_data["error"]) : undefined;
            this.isError = _data["isError"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ResultOfSectionProfileResponse();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["value"] = this.value ? this.value.toJSON() : undefined;
        data["error"] = this.error ? this.error.toJSON() : undefined;
        data["isError"] = this.isError;
        return data;
    }
}
export class ResultOfstring {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.value = _data["value"];
            this.error = _data["error"] ? BeamOsError.fromJS(_data["error"]) : undefined;
            this.isError = _data["isError"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ResultOfstring();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["value"] = this.value;
        data["error"] = this.error ? this.error.toJSON() : undefined;
        data["isError"] = this.isError;
        return data;
    }
}
export class ResultSetResponse {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.modelId = _data["modelId"];
            if (Array.isArray(_data["nodeResults"])) {
                this.nodeResults = [];
                for (let item of _data["nodeResults"])
                    this.nodeResults.push(NodeResultResponse.fromJS(item));
            }
            if (Array.isArray(_data["element1dResults"])) {
                this.element1dResults = [];
                for (let item of _data["element1dResults"])
                    this.element1dResults.push(Element1dResultResponse.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ResultSetResponse();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["modelId"] = this.modelId;
        if (Array.isArray(this.nodeResults)) {
            data["nodeResults"] = [];
            for (let item of this.nodeResults)
                data["nodeResults"].push(item.toJSON());
        }
        if (Array.isArray(this.element1dResults)) {
            data["element1dResults"] = [];
            for (let item of this.element1dResults)
                data["element1dResults"].push(item.toJSON());
        }
        return data;
    }
}
export class ResultSetResponse2 {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.modelId = _data["modelId"];
            if (Array.isArray(_data["nodeResults"])) {
                this.nodeResults = [];
                for (let item of _data["nodeResults"])
                    this.nodeResults.push(NodeResultResponse.fromJS(item));
            }
            if (Array.isArray(_data["element1dResults"])) {
                this.element1dResults = [];
                for (let item of _data["element1dResults"])
                    this.element1dResults.push(Element1dResultResponse.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ResultSetResponse2();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["modelId"] = this.modelId;
        if (Array.isArray(this.nodeResults)) {
            data["nodeResults"] = [];
            for (let item of this.nodeResults)
                data["nodeResults"].push(item.toJSON());
        }
        if (Array.isArray(this.element1dResults)) {
            data["element1dResults"] = [];
            for (let item of this.element1dResults)
                data["element1dResults"].push(item.toJSON());
        }
        return data;
    }
}
export class RunDsmRequest {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.unitsOverride = _data["unitsOverride"];
            if (Array.isArray(_data["loadCombinationIds"])) {
                this.loadCombinationIds = [];
                for (let item of _data["loadCombinationIds"])
                    this.loadCombinationIds.push(item);
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new RunDsmRequest();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["unitsOverride"] = this.unitsOverride;
        if (Array.isArray(this.loadCombinationIds)) {
            data["loadCombinationIds"] = [];
            for (let item of this.loadCombinationIds)
                data["loadCombinationIds"].push(item);
        }
        return data;
    }
}
export class SectionProfileData {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.area = _data["area"];
            this.strongAxisMomentOfInertia = _data["strongAxisMomentOfInertia"];
            this.weakAxisMomentOfInertia = _data["weakAxisMomentOfInertia"];
            this.polarMomentOfInertia = _data["polarMomentOfInertia"];
            this.strongAxisShearArea = _data["strongAxisShearArea"];
            this.weakAxisShearArea = _data["weakAxisShearArea"];
            this.areaUnit = _data["areaUnit"];
            this.areaMomentOfInertiaUnit = _data["areaMomentOfInertiaUnit"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new SectionProfileData();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["area"] = this.area;
        data["strongAxisMomentOfInertia"] = this.strongAxisMomentOfInertia;
        data["weakAxisMomentOfInertia"] = this.weakAxisMomentOfInertia;
        data["polarMomentOfInertia"] = this.polarMomentOfInertia;
        data["strongAxisShearArea"] = this.strongAxisShearArea;
        data["weakAxisShearArea"] = this.weakAxisShearArea;
        data["areaUnit"] = this.areaUnit;
        data["areaMomentOfInertiaUnit"] = this.areaMomentOfInertiaUnit;
        return data;
    }
}
export class SectionProfileResponse {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.modelId = _data["modelId"];
            this.area = _data["area"];
            this.strongAxisMomentOfInertia = _data["strongAxisMomentOfInertia"];
            this.weakAxisMomentOfInertia = _data["weakAxisMomentOfInertia"];
            this.polarMomentOfInertia = _data["polarMomentOfInertia"];
            this.strongAxisShearArea = _data["strongAxisShearArea"];
            this.weakAxisShearArea = _data["weakAxisShearArea"];
            this.areaUnit = _data["areaUnit"];
            this.areaMomentOfInertiaUnit = _data["areaMomentOfInertiaUnit"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new SectionProfileResponse();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["modelId"] = this.modelId;
        data["area"] = this.area;
        data["strongAxisMomentOfInertia"] = this.strongAxisMomentOfInertia;
        data["weakAxisMomentOfInertia"] = this.weakAxisMomentOfInertia;
        data["polarMomentOfInertia"] = this.polarMomentOfInertia;
        data["strongAxisShearArea"] = this.strongAxisShearArea;
        data["weakAxisShearArea"] = this.weakAxisShearArea;
        data["areaUnit"] = this.areaUnit;
        data["areaMomentOfInertiaUnit"] = this.areaMomentOfInertiaUnit;
        return data;
    }
}
export class SectionProfileResponse2 {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.modelId = _data["modelId"];
            this.area = _data["area"];
            this.strongAxisMomentOfInertia = _data["strongAxisMomentOfInertia"];
            this.weakAxisMomentOfInertia = _data["weakAxisMomentOfInertia"];
            this.polarMomentOfInertia = _data["polarMomentOfInertia"];
            this.strongAxisShearArea = _data["strongAxisShearArea"];
            this.weakAxisShearArea = _data["weakAxisShearArea"];
            this.areaUnit = _data["areaUnit"];
            this.areaMomentOfInertiaUnit = _data["areaMomentOfInertiaUnit"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new SectionProfileResponse2();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["modelId"] = this.modelId;
        data["area"] = this.area;
        data["strongAxisMomentOfInertia"] = this.strongAxisMomentOfInertia;
        data["weakAxisMomentOfInertia"] = this.weakAxisMomentOfInertia;
        data["polarMomentOfInertia"] = this.polarMomentOfInertia;
        data["strongAxisShearArea"] = this.strongAxisShearArea;
        data["weakAxisShearArea"] = this.weakAxisShearArea;
        data["areaUnit"] = this.areaUnit;
        data["areaMomentOfInertiaUnit"] = this.areaMomentOfInertiaUnit;
        return data;
    }
}
export class ShearDiagramResponse {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.globalShearDirection = new Vector3();
            this.elementLength = new Length();
            this.intervals = [];
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.globalShearDirection = _data["globalShearDirection"] ? Vector3.fromJS(_data["globalShearDirection"]) : new Vector3();
            this.lengthUnit = _data["lengthUnit"];
            this.forceUnit = _data["forceUnit"];
            this.elementLength = _data["elementLength"] ? Length.fromJS(_data["elementLength"]) : new Length();
            this.modelId = _data["modelId"];
            this.resultSetId = _data["resultSetId"];
            this.element1dId = _data["element1dId"];
            if (Array.isArray(_data["intervals"])) {
                this.intervals = [];
                for (let item of _data["intervals"])
                    this.intervals.push(DiagramConsistentIntervalResponse.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ShearDiagramResponse();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["globalShearDirection"] = this.globalShearDirection ? this.globalShearDirection.toJSON() : undefined;
        data["lengthUnit"] = this.lengthUnit;
        data["forceUnit"] = this.forceUnit;
        data["elementLength"] = this.elementLength ? this.elementLength.toJSON() : undefined;
        data["modelId"] = this.modelId;
        data["resultSetId"] = this.resultSetId;
        data["element1dId"] = this.element1dId;
        if (Array.isArray(this.intervals)) {
            data["intervals"] = [];
            for (let item of this.intervals)
                data["intervals"].push(item.toJSON());
        }
        return data;
    }
}
export class SpeckleReceiveParameters {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.apiToken = _data["apiToken"];
            this.projectId = _data["projectId"];
            this.objectId = _data["objectId"];
            this.serverUrl = _data["serverUrl"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new SpeckleReceiveParameters();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["apiToken"] = this.apiToken;
        data["projectId"] = this.projectId;
        data["objectId"] = this.objectId;
        data["serverUrl"] = this.serverUrl;
        return data;
    }
}
export class Torque {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.value = _data["value"];
            this.unit = _data["unit"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new Torque();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["value"] = this.value;
        data["unit"] = this.unit;
        return data;
    }
}
export var TorqueUnit;
(function (TorqueUnit) {
    TorqueUnit["Undefined"] = "Undefined";
    TorqueUnit["KilonewtonCentimeter"] = "KilonewtonCentimeter";
    TorqueUnit["KilonewtonMeter"] = "KilonewtonMeter";
    TorqueUnit["KilonewtonMillimeter"] = "KilonewtonMillimeter";
    TorqueUnit["KilopoundForceFoot"] = "KilopoundForceFoot";
    TorqueUnit["KilopoundForceInch"] = "KilopoundForceInch";
    TorqueUnit["NewtonCentimeter"] = "NewtonCentimeter";
    TorqueUnit["NewtonMeter"] = "NewtonMeter";
    TorqueUnit["NewtonMillimeter"] = "NewtonMillimeter";
    TorqueUnit["PoundForceFoot"] = "PoundForceFoot";
    TorqueUnit["PoundForceInch"] = "PoundForceInch";
})(TorqueUnit || (TorqueUnit = {}));
export class UnitSettings {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.lengthUnit = _data["lengthUnit"];
            this.forceUnit = _data["forceUnit"];
            this.angleUnit = _data["angleUnit"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new UnitSettings();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["lengthUnit"] = this.lengthUnit;
        data["forceUnit"] = this.forceUnit;
        data["angleUnit"] = this.angleUnit;
        return data;
    }
}
export class UpdateNodeRequest {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.locationPoint = _data["locationPoint"] ? NullableOfPartialPoint.fromJS(_data["locationPoint"]) : undefined;
            this.restraint = _data["restraint"] ? NullableOfPartialRestraint.fromJS(_data["restraint"]) : undefined;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateNodeRequest();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["locationPoint"] = this.locationPoint ? this.locationPoint.toJSON() : undefined;
        data["restraint"] = this.restraint ? this.restraint.toJSON() : undefined;
        return data;
    }
}
export class Vector3 {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.x = _data["x"];
            this.y = _data["y"];
            this.z = _data["z"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new Vector3();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["x"] = this.x;
        data["y"] = this.y;
        data["z"] = this.z;
        return data;
    }
}
export class ApiException extends Error {
    constructor(message, status, response, headers, result) {
        super();
        this.isApiException = true;
        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }
    static isApiException(obj) {
        return obj.isApiException === true;
    }
}
function throwException(message, status, response, headers, result) {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}
//# sourceMappingURL=StructuralAnalysisApiClientV1.js.map