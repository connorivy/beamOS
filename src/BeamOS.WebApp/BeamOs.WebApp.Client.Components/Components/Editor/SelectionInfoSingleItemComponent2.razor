@using BeamOs.Common.Domain.Models
@using BeamOs.WebApp.Client.Components.Features.StructuralApiClient
@using System.Reflection
@using System.Collections
@using BeamOs.WebApp.Client.Components.Components.Editor.PropertyEnumerators

@if (this.ObjectToDisplay is not null && IsSimpleType(this.ObjectToDisplay.GetType()))
{
    <MudItem xs="4">
        <MudTooltip Text="@ObjectName" RootClass="w-full">
            <MudText Typo="Typo.subtitle2" Class="truncate text-3xs">@ObjectName</MudText>
        </MudTooltip>
    </MudItem>
    <MudItem xs="8">
        <MudTooltip Text="@ObjectToDisplay?.ToString()" RootClass="w-full">
            <MudText Typo="Typo.subtitle2" Class="truncate text-3xs">@ObjectToDisplay</MudText>
        </MudTooltip>
    </MudItem>
}
else if (this.ObjectToDisplay is SimpleFieldTypeMarker fieldTypeMarker)
{
    if (fieldTypeMarker.FieldType == typeof(int))
    {
        <MudTextField @ref="MudTextFieldIntRef" T="int?" Typo="Typo.input" Value="@((int?)fieldTypeMarker.Value)" ValueChanged="(i) => ObjectToDisplayChanged.InvokeAsync(i)" Required="@fieldTypeMarker.IsRequired" Label="@ObjectName" OnlyValidateIfDirty="true" @onfocus="(_) => OnFocus(fieldTypeMarker.FieldNum)" />
    }
    else if (fieldTypeMarker.FieldType == typeof(double))
    {
        <MudTextField @ref="MudTextFieldDoubleRef" T="double?" Typo="Typo.input" Value="@((double?)fieldTypeMarker.Value)" ValueChanged="(i) => ObjectToDisplayChanged.InvokeAsync(i)" Required="@fieldTypeMarker.IsRequired" Label="@ObjectName" OnlyValidateIfDirty="true" @onfocus="(_) => OnFocus(fieldTypeMarker.FieldNum)" />
    }
    else if (fieldTypeMarker.FieldType == typeof(bool))
    {
        <MudTextField @ref="MudTextFieldBoolRef" T="bool?" Typo="Typo.input" Value="@((bool?)fieldTypeMarker.Value)" ValueChanged="(i) => ObjectToDisplayChanged.InvokeAsync(i)" Required="@fieldTypeMarker.IsRequired" Label="@ObjectName" OnlyValidateIfDirty="true" @onfocus="(_) => OnFocus(fieldTypeMarker.FieldNum)" />
    }
    else if (fieldTypeMarker.FieldType.IsEnum)
    {
        <MudSelect T="string" Typo="Typo.input" Value="@(fieldTypeMarker.Value?.ToString())" ValueChanged="(i) => ObjectToDisplayChanged.InvokeAsync(i)" Required="@fieldTypeMarker.IsRequired" Label="@ObjectName" OnlyValidateIfDirty="true" @onfocus="(_) => OnFocus(fieldTypeMarker.FieldNum)">
            @foreach (var val in Enum.GetValues(fieldTypeMarker.FieldType))
            {
                var stringVal = val.ToString();
                if (string.Equals(stringVal, "Undefined"))
                {
                    continue;
                }
                <MudSelectItem Value="stringVal">@stringVal</MudSelectItem>
            }
        </MudSelect>
    }
    else
    {
        <MudTextField @ref="MudTextFieldObjectRef" Typo="Typo.input" Converter="@StringObjectConverter" Value="@fieldTypeMarker.Value" ValueChanged="ObjectToDisplayChanged" Required="@fieldTypeMarker.IsRequired" Label="@ObjectName" OnlyValidateIfDirty="true" @onfocus="(_) => OnFocus(fieldTypeMarker.FieldNum)" />
    }
}
else if (this.ObjectToDisplay is ComplexFieldTypeMarker complex)
{
    @if (!string.IsNullOrEmpty(ObjectName))
    {
        <MudExpansionPanel Expanded="true" Text="@ObjectName" Class="text-nowrap text-clip mud-typography mud-typography-subtitle2">
            <MudGrid Spacing="1">
                @foreach (var key in complex.ValuesWithDisplayInformation.Keys)
                {
                    var obj = complex.Get(key);
                    <SelectionInfoSingleItemComponent2 ObjectName="@key.ToString()" ObjectToDisplayChanged="@((val) => complex.Set(key, val))" ObjectToDisplay="obj" ></SelectionInfoSingleItemComponent2>
                }
            </MudGrid>
        </MudExpansionPanel>
    }
    else
    {
        @foreach (var key in complex.ValuesWithDisplayInformation.Keys)
        {
            var obj = complex.Get(key);
            <SelectionInfoSingleItemComponent2 ObjectName="@key.ToString()" ObjectToDisplayChanged="@((val) => complex.Set(key, val))" ObjectToDisplay="obj" ></SelectionInfoSingleItemComponent2>
        }
    }
}
@* else if (this.propertyEnumerators.TryGetValue(this.ObjectType, out IPropertyEnumerator? propertyEnumerator))
{
    foreach (var propertyPair in propertyEnumerator.GetProps(this.ObjectToDisplay))
    {
        <SelectionInfoSingleItemComponent2 ObjectName="@propertyPair.Item1" ObjectToDisplay="@propertyPair.Item2"></SelectionInfoSingleItemComponent2>
    }
} *@
else if (this.ObjectToDisplay is IDictionary dict)
{
    <MudExpansionPanel Expanded="true" Text="@ObjectName" Class="text-nowrap text-clip mud-typography mud-typography-subtitle2">
        <MudGrid Spacing="1">
            @foreach (DictionaryEntry item in dict)
            {
                <SelectionInfoSingleItemComponent2 ObjectName="@item.Key.ToString()" ObjectToDisplay="@item.Value"></SelectionInfoSingleItemComponent2>
            }
        </MudGrid>
    </MudExpansionPanel>
}
else if (this.ObjectToDisplay is IEnumerable enumerable)
{
    int counter = 0;
    foreach (var item in enumerable)
    {
        <SelectionInfoSingleItemComponent2 ObjectName="@($"{this.ObjectName}-{counter++}")" ObjectToDisplay="@item" ></SelectionInfoSingleItemComponent2>
    }   
}
else
{
    <MudExpansionPanel Expanded="true" Text="@ObjectName" Class="text-nowrap text-clip mud-typography mud-typography-subtitle2">
        <MudGrid Spacing="1">
            @foreach (var propInfo in GetPublicInstanceProps(this.ObjectToDisplay) ?? [])
            {
                var value = propInfo.GetValue(this.ObjectToDisplay);
                <SelectionInfoSingleItemComponent2 ObjectName="@propInfo.Name" ObjectToDisplay="@value" ></SelectionInfoSingleItemComponent2>
            }
        </MudGrid>
    </MudExpansionPanel>
}
