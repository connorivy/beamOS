@page "/test-explorer"
@using BeamOS.Tests.Common.Interfaces
@using BeamOS.Tests.Common.SolvedProblems.Fixtures
@using BeamOS.WebApp.Client.Components
@using BeamOS.WebApp.EditorApi
@using BeamOs.ApiClient
@using BeamOs.Contracts.AnalyticalResults.Model
@using BeamOs.Contracts.Common
@using BeamOs.Contracts.PhysicalModel.Model
@using BeamOs.Contracts.PhysicalModel.Node
@using BeamOs.Domain.Common.ValueObjects
@using BeamOs.Tests.TestRunner

@* @rendermode InteractiveWebAssembly *@

@inject IJSRuntime js
@inject IApiAlphaClient analysisApiClient
@inject EditorApiProxyFactory editorApiAlphaFactory

<PageTitle>Test Explorer</PageTitle>

<MudContainer MaxWidth="MaxWidth.False" Gutters="false" Class="h-full relative">
    <MudDrawer @bind-Open="@open" Elevation="1" ClipMode="DrawerClipMode.Always">
        <MudPaper Elevation="0">
            <MudList T="TestInfo" SelectedValueChanged="OnSelectedTestInfoChanged">
                <MudListSubheader>
                    <MudTextField @bind-Value="@searchTerm" AdornmentIcon="@Icons.Material.Filled.Brush"
                                  Adornment="Adornment.End" Immediate="true" Variant="Variant.Outlined" />
                </MudListSubheader>

                @foreach (var testInfo in testInfos.Where(i => i.MethodInfo.Name.Contains(searchTerm.Trim(), StringComparison.OrdinalIgnoreCase)))
                {
                    <MudListItem Icon="@Icons.Material.Filled.Folder" Value="@testInfo">
                        @testInfo.MethodInfo.Name
                    </MudListItem>
                }
            </MudList>
        </MudPaper>
    </MudDrawer>
    <div class="flex h-full relative">
        <EditorComponent @ref="editorComponent" Class="h-full"/>
        <MudContainer MaxWidth="MaxWidth.False" Class="absolute bottom-0 w-full">
            <MudSpacer></MudSpacer>
            <MudSimpleTable Striped="true" Dense="true" Class="my-4 mx-4">
                <thead class="font-bold">
                    <tr>
                        <th class="font-bold">
                            Calculated Displacement Vector
                        </th>
                        <th>
                            Expected Displacement Vector
                        </th>
                        <th class="font-bold">
                            Difference
                        </th>
                    </tr>
                </thead>
                <tbody>
                    @for (int i = 0; i < @ExpectedDisplacements.Count; i++)
                    {
                        <tr>
                            <td>@CalculatedDisplacements?.ElementAt(i)</td>
                            <td>@ExpectedDisplacements[i]</td>
                            <th>
                                @(@GetDifferenceOrNull(
                                    @ExpectedDisplacements[i],
                                    @CalculatedDisplacements?.ElementAt(i))?
                                    .ToString() ?? "N/A")
                            </th>
                        </tr>
                    }
                </tbody>
            </MudSimpleTable>
            <MudSpacer></MudSpacer>
        </MudContainer>
    </div>

    @* <div class="flex flex-col p-6">
        <div class="flex justify-center items-center pb-2.5">
            <AuthorizeView>
                <Authorized>
                    <button @onclick="Solve" class="bg-indigo-300 hover:bg-indigo-400 text-gray-800 font-bold py-2 px-4 rounded inline-flex items-center">
                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
                            <path stroke-linecap="round" stroke-linejoin="round" d="M15.75 15.75V18m-7.5-6.75h.008v.008H8.25v-.008Zm0 2.25h.008v.008H8.25V13.5Zm0 2.25h.008v.008H8.25v-.008Zm0 2.25h.008v.008H8.25V18Zm2.498-6.75h.007v.008h-.007v-.008Zm0 2.25h.007v.008h-.007V13.5Zm0 2.25h.007v.008h-.007v-.008Zm0 2.25h.007v.008h-.007V18Zm2.504-6.75h.008v.008h-.008v-.008Zm0 2.25h.008v.008h-.008V13.5Zm0 2.25h.008v.008h-.008v-.008Zm0 2.25h.008v.008h-.008V18Zm2.498-6.75h.008v.008h-.008v-.008Zm0 2.25h.008v.008h-.008V13.5ZM8.25 6h7.5v2.25h-7.5V6ZM12 2.25c-1.892 0-3.758.11-5.593.322C5.307 2.7 4.5 3.65 4.5 4.757V19.5a2.25 2.25 0 0 0 2.25 2.25h10.5a2.25 2.25 0 0 0 2.25-2.25V4.757c0-1.108-.806-2.057-1.907-2.185A48.507 48.507 0 0 0 12 2.25Z" />
                        </svg>
                        <span>Solve</span>
                    </button>
                </Authorized>
                <NotAuthorized>
                    <button disabled class="bg-gray-300 text-gray-800 font-bold py-2 px-4 rounded inline-flex items-center">
                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
                            <path stroke-linecap="round" stroke-linejoin="round" d="M15.75 15.75V18m-7.5-6.75h.008v.008H8.25v-.008Zm0 2.25h.008v.008H8.25V13.5Zm0 2.25h.008v.008H8.25v-.008Zm0 2.25h.008v.008H8.25V18Zm2.498-6.75h.007v.008h-.007v-.008Zm0 2.25h.007v.008h-.007V13.5Zm0 2.25h.007v.008h-.007v-.008Zm0 2.25h.007v.008h-.007V18Zm2.504-6.75h.008v.008h-.008v-.008Zm0 2.25h.008v.008h-.008V13.5Zm0 2.25h.008v.008h-.008v-.008Zm0 2.25h.008v.008h-.008V18Zm2.498-6.75h.008v.008h-.008v-.008Zm0 2.25h.008v.008h-.008V13.5ZM8.25 6h7.5v2.25h-7.5V6ZM12 2.25c-1.892 0-3.758.11-5.593.322C5.307 2.7 4.5 3.65 4.5 4.757V19.5a2.25 2.25 0 0 0 2.25 2.25h10.5a2.25 2.25 0 0 0 2.25-2.25V4.757c0-1.108-.806-2.057-1.907-2.185A48.507 48.507 0 0 0 12 2.25Z" />
                        </svg>
                        <span>Solve</span>
                    </button>
                    <div id="alert-border-4" class="flex justify-center items-center p-4 mx-2 text-yellow-800 border-t-4 border-yellow-300 bg-yellow-50 dark:text-yellow-300 dark:bg-gray-800 dark:border-yellow-800" role="alert">
                        <svg class="flex-shrink-0 w-4 h-4" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20">
                            <path d="M10 .5a9.5 9.5 0 1 0 9.5 9.5A9.51 9.51 0 0 0 10 .5ZM9.5 4a1.5 1.5 0 1 1 0 3 1.5 1.5 0 0 1 0-3ZM12 15H8a1 1 0 0 1 0-2h1v-3H8a1 1 0 0 1 0-2h2a1 1 0 0 1 1 1v4h1a1 1 0 0 1 0 2Z" />
                        </svg>
                        <div class="ms-3 text-sm font-medium">
                            You need to login to enable analysis functionality.
                        </div>
                    </div>
                </NotAuthorized>
            </AuthorizeView>
        </div>
    </div> *@
</MudContainer>

@code {
    private bool open = true;
    private IEditorApiAlpha? editorApiAlpha;
    private EditorComponent editorComponent;

    private string loadingText = "Loading beamOS Editor";
    private bool isLoading = true;

    string elementId = "id" + Guid.NewGuid().ToString("N");

    const string physicalModelId = "00000000-0000-0000-0000-000000000000";

    public string[] GetHeaders(string nameOfTestResult)
    {
        return new string[3]
        {
            $"Expected {nameOfTestResult}",
            $"Calculated {nameOfTestResult}",
            "Difference",
        };
    }

    public double[] ExpectedValues { get; set; }
    public double[]? CalculatedValues { get; set; }
    public double?[] Difference
    {
        get
        {
            double?[] vals = [ExpectedValues.Length];
            for (int i = 0; i < ExpectedValues.Length; i++)
            {
                vals[i] = CalculatedValues != null ? ExpectedValues[i] - CalculatedValues[i] : null;
            }
            return vals;
        }
    }
    public List<double>? CalculatedReactions { get; set; }
    public List<double>? CalculatedDisplacements { get; set; }
    public List<double> ExpectedReactions { get; } = [
        0,
    0,
    0,
    -10.064,
    -13.419,
    0,
    0,
    0,
    0,
    126.83,
    0,
    0,
    0,
    -139.94,
    186.58,
    0,
    0,
    0,
    ];

    public List<double> ExpectedDisplacements { get; } = [
        .21552,
    -.13995,
    0,
    0,
    0,
    0
    ];

    private double? GetDifferenceOrNull(double expected, double? calculated)
    {
        if (calculated is not double typedCalculated)
        {
            return null;
        }
        return Math.Round(expected - typedCalculated, 5);
    }

    private async Task Solve()
    {
        // AnalyticalModelResponse response = await analysisApiClient
        //     .RunDirectStiffnessMethodFromModelIdAsync(physicalModelId);
        // CalculatedReactions = response.AnalyticalNodeReactions;
        // CalculatedDisplacements = response.AnalyticalNodeDisplacements;
    }

    string searchTerm = "";
    TestInfo[] testInfos = [];
    TestInfo? selectedTestInfo;
    protected override void OnInitialized()
    {
        testInfos = AssemblyScanning.GetAllTestInfo().ToArray();
        base.OnInitialized();
    }

    private async Task OnSelectedTestInfoChanged(TestInfo? testInfo)
    {
        if (testInfo is null)
        {
            return;
        }

        if (testInfo.GetDisplayable() is ITestFixtureDisplayable displayable)
        {
            await editorComponent.EditorApiAlpha.ClearAsync();
            await displayable.Display(editorComponent.EditorApiAlpha);
        }
    }
}

