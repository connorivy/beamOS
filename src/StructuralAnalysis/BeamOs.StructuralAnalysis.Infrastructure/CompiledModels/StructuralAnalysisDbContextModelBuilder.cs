// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace BeamOs.StructuralAnalysis.Api
{
    public partial class StructuralAnalysisDbContextModel
    {
        private StructuralAnalysisDbContextModel()
            : base(skipDetectChanges: false, modelId: new Guid("3c76fa3d-8eb4-4ae1-a1d5-e07b382f1d44"), entityTypeCount: 27)
        {
        }

        partial void Initialize()
        {
            var envelopeElement1dResult = EnvelopeElement1dResultEntityType.Create(this);
            var envelopeResultSet = EnvelopeResultSetEntityType.Create(this);
            var element1dResult = Element1dResultEntityType.Create(this);
            var nodeResult = NodeResultEntityType.Create(this);
            var resultSet = ResultSetEntityType.Create(this);
            var element1d = Element1dEntityType.Create(this);
            var element1dProposal = Element1dProposalEntityType.Create(this);
            var loadCase = LoadCaseEntityType.Create(this);
            var loadCombination = LoadCombinationEntityType.Create(this);
            var material = MaterialEntityType.Create(this);
            var materialProposal = MaterialProposalEntityType.Create(this);
            var deleteModelEntityProposal = DeleteModelEntityProposalEntityType.Create(this);
            var model = ModelEntityType.Create(this);
            var modelProposal = ModelProposalEntityType.Create(this);
            var proposalIssue = ProposalIssueEntityType.Create(this);
            var momentLoad = MomentLoadEntityType.Create(this);
            var internalNodeProposal = InternalNodeProposalEntityType.Create(this);
            var nodeDefinition = NodeDefinitionEntityType.Create(this);
            var nodeProposal = NodeProposalEntityType.Create(this);
            var pointLoad = PointLoadEntityType.Create(this);
            var sectionProfileInfoBase = SectionProfileInfoBaseEntityType.Create(this);
            var sectionProfileProposal = SectionProfileProposalEntityType.Create(this);
            var sectionProfileProposalFromLibrary = SectionProfileProposalFromLibraryEntityType.Create(this);
            var internalNode = InternalNodeEntityType.Create(this, nodeDefinition);
            var node = NodeEntityType.Create(this, nodeDefinition);
            var sectionProfile = SectionProfileEntityType.Create(this, sectionProfileInfoBase);
            var sectionProfileFromLibrary = SectionProfileFromLibraryEntityType.Create(this, sectionProfileInfoBase);

            EnvelopeElement1dResultEntityType.CreateForeignKey1(envelopeElement1dResult, model);
            EnvelopeElement1dResultEntityType.CreateForeignKey2(envelopeElement1dResult, envelopeResultSet);
            EnvelopeResultSetEntityType.CreateForeignKey1(envelopeResultSet, model);
            Element1dResultEntityType.CreateForeignKey1(element1dResult, model);
            Element1dResultEntityType.CreateForeignKey2(element1dResult, resultSet);
            NodeResultEntityType.CreateForeignKey1(nodeResult, model);
            NodeResultEntityType.CreateForeignKey2(nodeResult, resultSet);
            ResultSetEntityType.CreateForeignKey1(resultSet, model);
            ResultSetEntityType.CreateForeignKey2(resultSet, loadCombination);
            ResultSetEntityType.CreateForeignKey3(resultSet, loadCombination);
            Element1dEntityType.CreateForeignKey1(element1d, model);
            Element1dEntityType.CreateForeignKey2(element1d, nodeDefinition);
            Element1dEntityType.CreateForeignKey3(element1d, material);
            Element1dEntityType.CreateForeignKey4(element1d, sectionProfileInfoBase);
            Element1dEntityType.CreateForeignKey5(element1d, nodeDefinition);
            Element1dProposalEntityType.CreateForeignKey1(element1dProposal, model);
            Element1dProposalEntityType.CreateForeignKey2(element1dProposal, modelProposal);
            LoadCaseEntityType.CreateForeignKey1(loadCase, model);
            LoadCombinationEntityType.CreateForeignKey1(loadCombination, model);
            MaterialEntityType.CreateForeignKey1(material, model);
            MaterialProposalEntityType.CreateForeignKey1(materialProposal, model);
            MaterialProposalEntityType.CreateForeignKey2(materialProposal, modelProposal);
            DeleteModelEntityProposalEntityType.CreateForeignKey1(deleteModelEntityProposal, model);
            DeleteModelEntityProposalEntityType.CreateForeignKey2(deleteModelEntityProposal, modelProposal);
            ModelProposalEntityType.CreateForeignKey1(modelProposal, model);
            ProposalIssueEntityType.CreateForeignKey1(proposalIssue, model);
            ProposalIssueEntityType.CreateForeignKey2(proposalIssue, modelProposal);
            MomentLoadEntityType.CreateForeignKey1(momentLoad, model);
            MomentLoadEntityType.CreateForeignKey2(momentLoad, loadCase);
            MomentLoadEntityType.CreateForeignKey3(momentLoad, nodeDefinition);
            InternalNodeProposalEntityType.CreateForeignKey1(internalNodeProposal, model);
            InternalNodeProposalEntityType.CreateForeignKey2(internalNodeProposal, modelProposal);
            NodeProposalEntityType.CreateForeignKey1(nodeProposal, model);
            NodeProposalEntityType.CreateForeignKey2(nodeProposal, modelProposal);
            PointLoadEntityType.CreateForeignKey1(pointLoad, model);
            PointLoadEntityType.CreateForeignKey2(pointLoad, loadCase);
            PointLoadEntityType.CreateForeignKey3(pointLoad, nodeDefinition);
            SectionProfileProposalEntityType.CreateForeignKey1(sectionProfileProposal, model);
            SectionProfileProposalEntityType.CreateForeignKey2(sectionProfileProposal, modelProposal);
            SectionProfileProposalFromLibraryEntityType.CreateForeignKey1(sectionProfileProposalFromLibrary, model);
            SectionProfileProposalFromLibraryEntityType.CreateForeignKey2(sectionProfileProposalFromLibrary, modelProposal);
            InternalNodeEntityType.CreateForeignKey1(internalNode, model);
            InternalNodeEntityType.CreateForeignKey2(internalNode, element1d);
            NodeEntityType.CreateForeignKey1(node, model);
            SectionProfileEntityType.CreateForeignKey1(sectionProfile, model);
            SectionProfileFromLibraryEntityType.CreateForeignKey1(sectionProfileFromLibrary, model);

            EnvelopeElement1dResultEntityType.CreateAnnotations(envelopeElement1dResult);
            EnvelopeResultSetEntityType.CreateAnnotations(envelopeResultSet);
            Element1dResultEntityType.CreateAnnotations(element1dResult);
            NodeResultEntityType.CreateAnnotations(nodeResult);
            ResultSetEntityType.CreateAnnotations(resultSet);
            Element1dEntityType.CreateAnnotations(element1d);
            Element1dProposalEntityType.CreateAnnotations(element1dProposal);
            LoadCaseEntityType.CreateAnnotations(loadCase);
            LoadCombinationEntityType.CreateAnnotations(loadCombination);
            MaterialEntityType.CreateAnnotations(material);
            MaterialProposalEntityType.CreateAnnotations(materialProposal);
            DeleteModelEntityProposalEntityType.CreateAnnotations(deleteModelEntityProposal);
            ModelEntityType.CreateAnnotations(model);
            ModelProposalEntityType.CreateAnnotations(modelProposal);
            ProposalIssueEntityType.CreateAnnotations(proposalIssue);
            MomentLoadEntityType.CreateAnnotations(momentLoad);
            InternalNodeProposalEntityType.CreateAnnotations(internalNodeProposal);
            NodeDefinitionEntityType.CreateAnnotations(nodeDefinition);
            NodeProposalEntityType.CreateAnnotations(nodeProposal);
            PointLoadEntityType.CreateAnnotations(pointLoad);
            SectionProfileInfoBaseEntityType.CreateAnnotations(sectionProfileInfoBase);
            SectionProfileProposalEntityType.CreateAnnotations(sectionProfileProposal);
            SectionProfileProposalFromLibraryEntityType.CreateAnnotations(sectionProfileProposalFromLibrary);
            InternalNodeEntityType.CreateAnnotations(internalNode);
            NodeEntityType.CreateAnnotations(node);
            SectionProfileEntityType.CreateAnnotations(sectionProfile);
            SectionProfileFromLibraryEntityType.CreateAnnotations(sectionProfileFromLibrary);

            AddAnnotation("ProductVersion", "9.0.6");
        }
    }
}
