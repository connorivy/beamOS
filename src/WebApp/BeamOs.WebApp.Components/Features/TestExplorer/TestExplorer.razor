@page "/test-explorer"
@inherits FluxorComponent
@layout PersistantSidebarLayout

@using BeamOs.Tests.Common
@using BeamOs.WebApp.Components.Features.Editor
@using BeamOs.WebApp.Components.Features.SelectionInfo
@using BeamOs.WebApp.Components.Layout
@using Fluxor
@using Fluxor.Blazor.Web.Components
@using System.Diagnostics
@using MudBlazor

<PageTitle>Test Explorer</PageTitle>

<MudContainer MaxWidth="MaxWidth.False" Gutters="false" Class="h-full relative">
    @{
        var canvasId = EditorComponent.CreateCanvasId();
    }
    @* <MudDrawer Open="true" Width="400px" Elevation="1">
        @if (this.TestExplorerState.Value.SelectedProblemTests is null)
        {
            <ExampleModelSelectorComponent CanvasId="@canvasId" />
        }
        else
        {
            <div class="flex flex-col h-full gap-y-2">
                <BackAndToggleButtonComponent />
                @if (TestExplorerState.Value.ShowProblemSource && @TestExplorerState.Value.SelectedTestInfo?.SourceInfo is SourceInfo sourceInfo2)
                {
                    <div class="w-full point-events-auto">
                        <SourceInfoView SourceInfo="@sourceInfo2" />
                    </div>
                }
                @if (TestExplorerState.Value.ShowTestSelector)
                {
                    <TestSelector />
                }
            </div>
        }
    </MudDrawer> *@
    @* <MudGrid Spacing="0" class="w-full m-0">
        <MudItem xs="12" lg="3" Class="py-0 pl-0 pr-4">
            @if (this.TestExplorerState.Value.SelectedProblemTests is null)
            {
                <ExampleModelSelectorComponent CanvasId="@canvasId" />
            }
            else
            {
                <div class="flex flex-col h-full gap-y-2">
                    <BackAndToggleButtonComponent />
                    @if (TestExplorerState.Value.ShowProblemSource && @TestExplorerState.Value.SelectedTestInfo?.SourceInfo is SourceInfo sourceInfo2)
                    {
                        <div class="w-full point-events-auto">
                            <SourceInfoView SourceInfo="@sourceInfo2" />
                        </div>
                    }
                    @if (TestExplorerState.Value.ShowTestSelector)
                    {
                        <TestSelector />
                    }
                </div>
            }
        </MudItem>
        <MudItem xs="12" lg="9" Class="p-0">
            <div class="flex flex-col h-fit gap-y-2">
                <ReadOnlyEditor @ref="readOnlyEditor" Class="min-h-[600px] h-full w-full z-0" CanvasId="@canvasId" />
                <TestResultDisplayComponent />
            </div>
        </MudItem>
    </MudGrid> *@
    <SectionContent SectionId="@PersistantSidebarLayout.Drawer">
        @if (state.Value.TestResults is not null)
        {
            <SingleTestSelectorComponent CanvasId="@canvasId" TestResults="@state.Value.TestResults" SelectedObjects="@editorState.Value.SelectedObjects" />
        }
        else
        {
            <TestBrowserComponent CanvasId="@canvasId"/>
        }
        @* @if (this.TestExplorerState.Value.SelectedProblemTests is null)
        {
            <ExampleModelSelectorComponent CanvasId="@canvasId" />
        }
        else
        {
            <div class="flex flex-col h-full gap-y-2">
                @if (TestExplorerState.Value.ShowProblemSource && @TestExplorerState.Value.SelectedTestInfo?.SourceInfo is SourceInfo sourceInfo2)
                {
                    <div class="w-full point-events-auto">
                        <SourceInfoView SourceInfo="@sourceInfo2" />
                    </div>
                }
                @if (TestExplorerState.Value.ShowTestSelector)
                {
                    <TestSelector />
                }
            </div>
        } *@
    </SectionContent>
    <div class="flex flex-col h-fit gap-y-2">
        <EditorComponent @ref="editorComponent" Class="min-h-[600px] h-full w-full z-0" IsReadOnly="true" />
        @if (this.editorComponent is not null && editorState.Value.LoadedModelId is Guid modelId)
        {
            <SelectionInfoComponent ModelId="@modelId" SelectedObjects="editorState.Value.SelectedObjects" Class="absolute right-0 top-0 w-1/4 p-4" CanvasId="@editorComponent.CanvasId"></SelectionInfoComponent>
        }
        <TestResultDisplayComponent />
    </div>
    @* <div class="flex flex-col h-fit gap-y-2">
        <ReadOnlyEditor @ref="readOnlyEditor" Class="min-h-[600px] h-full w-full z-0" CanvasId="@canvasId" />
        <TestResultDisplayComponent />
        @if (TestExplorerState.Value.SelectedSourceInfo is SourceInfo source)
        {
            <SourceInfoView SourceInfo="@source" />
        }
    </div>

    @if (this.readOnlyEditor is not null && this.readOnlyEditor.EditorComponentState.SelectedObjects.Length > 0)
    {
        <MudPopover Open="@(readOnlyEditor.EditorComponentState.SelectedObjects.Length > 0)" Fixed="true" AnchorOrigin="Origin.TopRight" TransformOrigin="Origin.TopRight" Elevation="0" Class="w-80 p-2 bg-transparent">
            <SelectionInfoComponent SelectedObjects="@readOnlyEditor.EditorComponentState.SelectedObjects" ModelId="@readOnlyEditor.EditorComponentState.LoadedModelId"></SelectionInfoComponent>
        </MudPopover>
    } *@
    @* <TestExplorerNavigator CanvasId="@canvasId" /> *@
</MudContainer>
