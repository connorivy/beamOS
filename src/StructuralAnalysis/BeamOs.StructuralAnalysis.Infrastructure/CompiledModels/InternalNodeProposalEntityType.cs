// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using BeamOs.Common.Domain.Models;
using BeamOs.StructuralAnalysis.Domain.Common;
using BeamOs.StructuralAnalysis.Domain.PhysicalModel.Element1dAggregate;
using BeamOs.StructuralAnalysis.Domain.PhysicalModel.ModelAggregate;
using BeamOs.StructuralAnalysis.Domain.PhysicalModel.NodeAggregate;
using BeamOs.StructuralAnalysis.Infrastructure.Common;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using UnitsNet;

#pragma warning disable 219, 612, 618
#nullable disable

namespace BeamOs.StructuralAnalysis.Api
{
    [EntityFrameworkInternal]
    public partial class InternalNodeProposalEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "BeamOs.StructuralAnalysis.Domain.PhysicalModel.NodeAggregate.InternalNodeProposal",
                typeof(InternalNodeProposal),
                baseEntityType,
                propertyCount: 5,
                complexPropertyCount: 2,
                navigationCount: 2,
                foreignKeyCount: 2,
                unnamedIndexCount: 2,
                keyCount: 1);

            var id = runtimeEntityType.AddProperty(
                "Id",
                typeof(NodeProposalId),
                propertyInfo: typeof(BeamOsEntity<NodeProposalId>).GetProperty("Id", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(BeamOsEntity<NodeProposalId>).GetField("<Id>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                valueConverter: new NodeProposalIdConverter());
            id.SetSentinelFromProviderValue(0);

            var modelProposalId = runtimeEntityType.AddProperty(
                "ModelProposalId",
                typeof(ModelProposalId),
                propertyInfo: typeof(BeamOsModelProposalEntity<NodeProposalId, NodeId>).GetProperty("ModelProposalId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(BeamOsModelProposalEntity<NodeProposalId, NodeId>).GetField("<ModelProposalId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                afterSaveBehavior: PropertySaveBehavior.Throw,
                valueConverter: new ModelIdProposalConverter());
            modelProposalId.SetSentinelFromProviderValue(0);

            var modelId = runtimeEntityType.AddProperty(
                "ModelId",
                typeof(ModelId),
                propertyInfo: typeof(BeamOsModelProposalEntity<NodeProposalId, NodeId>).GetProperty("ModelId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(BeamOsModelProposalEntity<NodeProposalId, NodeId>).GetField("<ModelId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                afterSaveBehavior: PropertySaveBehavior.Throw,
                valueConverter: new ModelIdConverter());
            modelId.SetSentinelFromProviderValue(new Guid("01995299-f605-7158-ae0a-35071bee482e"));

            var existingId = runtimeEntityType.AddProperty(
                "ExistingId",
                typeof(NodeId?),
                propertyInfo: typeof(BeamOsModelProposalEntity<NodeProposalId, NodeId>).GetProperty("ExistingId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(BeamOsModelProposalEntity<NodeProposalId, NodeId>).GetField("<ExistingId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueConverter: new NodeIdConverter());

            var ratioAlongElement1d = runtimeEntityType.AddProperty(
                "RatioAlongElement1d",
                typeof(Ratio),
                propertyInfo: typeof(InternalNodeProposal).GetProperty("RatioAlongElement1d", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(InternalNodeProposal).GetField("<RatioAlongElement1d>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueConverter: new RatioValueConverter());
            ratioAlongElement1d.SetSentinelFromProviderValue(0.0);

            Element1dIdComplexProperty.Create(runtimeEntityType);
            RestraintComplexProperty.Create(runtimeEntityType);
            var key = runtimeEntityType.AddKey(
                new[] { id, modelProposalId, modelId });
            runtimeEntityType.SetPrimaryKey(key);

            var index = runtimeEntityType.AddIndex(
                new[] { modelId });

            var index0 = runtimeEntityType.AddIndex(
                new[] { modelProposalId, modelId });

            return runtimeEntityType;
        }

        public static class Element1dIdComplexProperty
        {
            public static RuntimeComplexProperty Create(RuntimeEntityType declaringType)
            {
                var complexProperty = declaringType.AddComplexProperty("Element1dId",
                    typeof(ExistingOrProposedElement1dId),
                    "BeamOs.StructuralAnalysis.Domain.PhysicalModel.NodeAggregate.InternalNodeProposal.Element1dId#ExistingOrProposedElement1dId",
                    typeof(ExistingOrProposedElement1dId),
                    propertyInfo: typeof(InternalNodeProposal).GetProperty("Element1dId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    fieldInfo: typeof(InternalNodeProposal).GetField("<Element1dId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    propertyCount: 2);

                var complexType = complexProperty.ComplexType;
                var existingId = complexType.AddProperty(
                    "ExistingId",
                    typeof(Element1dId?),
                    propertyInfo: typeof(ExistingOrProposedId<Element1dId, Element1dProposalId>).GetProperty("ExistingId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    fieldInfo: typeof(ExistingOrProposedId<Element1dId, Element1dProposalId>).GetField("<ExistingId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    nullable: true,
                    valueConverter: new Element1dIdConverter());

                var proposedId = complexType.AddProperty(
                    "ProposedId",
                    typeof(Element1dProposalId?),
                    propertyInfo: typeof(ExistingOrProposedId<Element1dId, Element1dProposalId>).GetProperty("ProposedId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    fieldInfo: typeof(ExistingOrProposedId<Element1dId, Element1dProposalId>).GetField("<ProposedId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    nullable: true,
                    valueConverter: new Element1dProposalIdConverter());

                complexType.AddAnnotation("Relational:FunctionName", null);
                complexType.AddAnnotation("Relational:Schema", null);
                complexType.AddAnnotation("Relational:SqlQuery", null);
                complexType.AddAnnotation("Relational:TableName", "InternalNodeProposal");
                complexType.AddAnnotation("Relational:ViewName", null);
                complexType.AddAnnotation("Relational:ViewSchema", null);
                return complexProperty;
            }
        }

        public static class RestraintComplexProperty
        {
            public static RuntimeComplexProperty Create(RuntimeEntityType declaringType)
            {
                var complexProperty = declaringType.AddComplexProperty("Restraint",
                    typeof(Restraint),
                    "BeamOs.StructuralAnalysis.Domain.PhysicalModel.NodeAggregate.InternalNodeProposal.Restraint#Restraint",
                    typeof(Restraint),
                    propertyInfo: typeof(InternalNodeProposal).GetProperty("Restraint", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    fieldInfo: typeof(InternalNodeProposal).GetField("<Restraint>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    propertyCount: 6);

                var complexType = complexProperty.ComplexType;
                var canRotateAboutX = complexType.AddProperty(
                    "CanRotateAboutX",
                    typeof(bool),
                    propertyInfo: typeof(Restraint).GetProperty("CanRotateAboutX", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    fieldInfo: typeof(Restraint).GetField("<CanRotateAboutX>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    sentinel: false);

                var canRotateAboutY = complexType.AddProperty(
                    "CanRotateAboutY",
                    typeof(bool),
                    propertyInfo: typeof(Restraint).GetProperty("CanRotateAboutY", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    fieldInfo: typeof(Restraint).GetField("<CanRotateAboutY>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    sentinel: false);

                var canRotateAboutZ = complexType.AddProperty(
                    "CanRotateAboutZ",
                    typeof(bool),
                    propertyInfo: typeof(Restraint).GetProperty("CanRotateAboutZ", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    fieldInfo: typeof(Restraint).GetField("<CanRotateAboutZ>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    sentinel: false);

                var canTranslateAlongX = complexType.AddProperty(
                    "CanTranslateAlongX",
                    typeof(bool),
                    propertyInfo: typeof(Restraint).GetProperty("CanTranslateAlongX", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    fieldInfo: typeof(Restraint).GetField("<CanTranslateAlongX>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    sentinel: false);

                var canTranslateAlongY = complexType.AddProperty(
                    "CanTranslateAlongY",
                    typeof(bool),
                    propertyInfo: typeof(Restraint).GetProperty("CanTranslateAlongY", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    fieldInfo: typeof(Restraint).GetField("<CanTranslateAlongY>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    sentinel: false);

                var canTranslateAlongZ = complexType.AddProperty(
                    "CanTranslateAlongZ",
                    typeof(bool),
                    propertyInfo: typeof(Restraint).GetProperty("CanTranslateAlongZ", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    fieldInfo: typeof(Restraint).GetField("<CanTranslateAlongZ>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    sentinel: false);

                complexType.AddAnnotation("Relational:FunctionName", null);
                complexType.AddAnnotation("Relational:Schema", null);
                complexType.AddAnnotation("Relational:SqlQuery", null);
                complexType.AddAnnotation("Relational:TableName", "InternalNodeProposal");
                complexType.AddAnnotation("Relational:ViewName", null);
                complexType.AddAnnotation("Relational:ViewSchema", null);
                return complexProperty;
            }
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ModelId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id") }),
                principalEntityType,
                deleteBehavior: DeleteBehavior.Cascade,
                required: true);

            var model = declaringEntityType.AddNavigation("Model",
                runtimeForeignKey,
                onDependent: true,
                typeof(Model),
                propertyInfo: typeof(BeamOsModelProposalEntity<NodeProposalId, NodeId>).GetProperty("Model", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(BeamOsModelProposalEntity<NodeProposalId, NodeId>).GetField("<Model>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey2(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ModelProposalId"), declaringEntityType.FindProperty("ModelId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id"), principalEntityType.FindProperty("ModelId") }),
                principalEntityType,
                deleteBehavior: DeleteBehavior.Cascade,
                required: true);

            var modelProposal = declaringEntityType.AddNavigation("ModelProposal",
                runtimeForeignKey,
                onDependent: true,
                typeof(ModelProposal),
                propertyInfo: typeof(BeamOsModelProposalEntity<NodeProposalId, NodeId>).GetProperty("ModelProposal", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(BeamOsModelProposalEntity<NodeProposalId, NodeId>).GetField("<ModelProposal>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var internalNodeProposals = principalEntityType.AddNavigation("InternalNodeProposals",
                runtimeForeignKey,
                onDependent: false,
                typeof(List<InternalNodeProposal>),
                propertyInfo: typeof(ModelProposal).GetProperty("InternalNodeProposals", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ModelProposal).GetField("<InternalNodeProposals>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "InternalNodeProposal");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
