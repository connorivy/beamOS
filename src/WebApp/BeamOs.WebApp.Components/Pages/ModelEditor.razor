@page "/models/{ModelId:guid}"

@using BeamOs.CodeGen.EditorApi
@using BeamOs.WebApp.Components.Features.Editor
@using BeamOs.WebApp.Components.Features.SelectionInfo
@using BeamOs.WebApp.Components.Features.StructuralApi
@using BeamOs.WebApp.EditorCommands
@using Fluxor.Blazor.Web.Components
@using MudBlazor
@using BeamOs.WebApp.Components.Features.Editors.ReadOnlyEditor;

@inherits FluxorComponent

<PageTitle>Editor</PageTitle>

<MudContainer MaxWidth="MaxWidth.False" Gutters="false" Class="relative h-full w-full">
    <EditorComponent Class="h-full" @ref="editorComponent" ModelId="@ModelId" IsReadOnly="false"></EditorComponent>
    @if (this.editorComponent is not null && this.editorComponent.StateSelected && this.editorComponent.State.Value.LoadedModelId is Guid modelId)
    {
        <StructuralApiComponent Class="absolute left-0 top-0 w-1/4 p-4" ModelId="@modelId" CanvasId="@editorComponent.CanvasId"></StructuralApiComponent>

        <SelectionInfoComponent ModelId="@modelId" SelectedObjects="this.editorComponent.State.Value.SelectedObjects" Class="absolute right-0 top-0 w-1/4 p-4" CanvasId="@editorComponent.CanvasId"></SelectionInfoComponent>
    }
</MudContainer>

@code {
    [Parameter]
    public Guid ModelId { get; set; }

    private SelectedObject[] selectedObjects = [];

    // private IStateSelection<AllEditorComponentState, EditorComponentState>? State;

    private EditorComponent? editorComponent
    {
        get;
        set
        {
            field = value;
            StateHasChanged();
        }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        this.SubscribeToAction<EditorLoadingEnd>(_ =>
        {
            this.StateHasChanged();
        });
    }
}
