@using BeamOS.Tests.Common.Interfaces
@using BeamOS.Tests.Common.Traits
@using BeamOs.Tests.TestRunner
@inherits FluxorComponent

<div class="flex absolute top-0 bottom-0 left-0 w-1/3 pointer-events-none p-4">
    @if (TestExplorerState.Value.SelectedProblemTests is null)
    {
        <MudPaper Class="w-full pointer-events-auto">
            <MudList T="List<TestInfo>" SelectedValueChanged="OnSelectedExampleProblemChanged">
                @foreach (var testInfoGroup in TestInfoProvider.TestInfos.Values.GroupBy(t => t.SourceInfo?.SourceType ?? FixtureSourceType.Standalone))
                {
                    <MudListItem Icon="@Icons.Material.Filled.Book" Text="@testInfoGroup.Key.ToString()" Expanded="true">
                        <NestedList>
                            @foreach (var testInfoGroupBySourceName in testInfoGroup.GroupBy(t => t.SourceInfo?.SourceName))
                            {
                                <MudListItem Icon="@Icons.Material.Outlined.Build" Text="@testInfoGroupBySourceName.Key" Expanded="true">
                                    <NestedList>
                                        @foreach (var testInfoByModelName in testInfoGroup.GroupBy(t => t.SourceInfo?.ModelName))
                                        {
                                        <MudListItem Icon="@Icons.Material.Outlined.Abc" Text="@testInfoByModelName.Key" Value="@testInfoByModelName.ToList()" ></MudListItem>
                                        }
                                    </NestedList>
                                </MudListItem>
                            }
                        </NestedList>
                    </MudListItem>
                    
                }
            </MudList>
        </MudPaper>
    }
    else
    {
        <div class="flex flex-col w-full pointer-events-auto gap-y-2">
        <MudCard Class="w-full">
            <div class="flex flex-row justify-evenly">
                <MudTooltip Text="Back to All Example Problems">
                    <MudIconButton Icon="@Icons.Material.Filled.ArrowBack" OnClick="GoBack"></MudIconButton>
                </MudTooltip>
                <MudTooltip Text="Toggle Problem Source Info">
                        <MudSwitch @bind-Value="ShowProblemSource" ThumbIcon="@Icons.Material.Filled.Info" ThumbIconColor="Color.Info" Size="Size.Large"></MudSwitch>
                </MudTooltip>
                <MudTooltip Text="Toggle Test Selector">
                    <MudSwitch @bind-Value="ShowTestSelector" ThumbIcon="@Icons.Material.Filled.Book" ThumbIconColor="Color.Info" Size="Size.Large"></MudSwitch>
                </MudTooltip>
                <MudTooltip Text="Toggle Test Results">
                    <MudSwitch @bind-Value="ShowTestResults" ThumbIcon="@Icons.Material.Filled.CheckCircle" ThumbIconColor="Color.Info" Size="Size.Large"></MudSwitch>
                </MudTooltip>
            </div>
        </MudCard>

        @if (TestExplorerState.Value.ShowProblemSource && @TestExplorerState.Value.SelectedTestInfo?.SourceInfo is SourceInfo sourceInfo2)
        {
            <div class="w-full">
                <SourceInfoView SourceInfo="@sourceInfo2" />
            </div>
        }
        @if (TestExplorerState.Value.ShowTestSelector)
        {
            <MudPaper Class="w-full basis-1/3 grow min-h-0">
                <MudList T="TestInfo" SelectedValueChanged="OnSelectedTestInfoChanged" Class="max-h-full overflow-auto">
                    <MudListSubheader Class="px-4 py-2">
                        <MudText Color="Color.Primary">Test Selector</MudText>
                    </MudListSubheader>
                    @* <MudListSubheader>
                        <MudTextField @bind-Value="@searchTerm" AdornmentIcon="@Icons.Material.Filled.Brush"
                                      Adornment="Adornment.End" Immediate="true" Variant="Variant.Outlined" />
                    </MudListSubheader> *@

                        @foreach (var testInfo in this.TestExplorerState.Value.SelectedProblemTests)
                        {
                            <MudListItem Icon="@Icons.Material.Filled.Book" Text="@testInfo.MethodInfo.Name" Expanded="true" Value="@testInfo" />
                        }
                </MudList>
            </MudPaper>
        }
        @if (TestExplorerState.Value.ShowTestResults && SelectedTestHasResults())
        {
            var iconAndCssColor = TestInfoState.Value.GetIconAndCssColorRepresentingTestResult(TestExplorerState.Value.SelectedTestInfo);

                <div class="basis-1/3 min-h-0 max-h-fit grow overflow-scroll">
                @if (@AssertionResultArray is not null)
                {
                    <AssertionResultVectorView AssertionResultArray="@AssertionResultArray" ComparedValueName="@ComparedValueName" />
                }
                else if (@AssertionResultMatrix is not null)
                {
                    <AssertionResultMatrixView AssertionResultMatrix="@AssertionResultMatrix" ComparedValueName="@ComparedValueName" />
                }
            </div>
        }
    </div>
    }
</div>
