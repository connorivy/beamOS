@using BeamOs.CodeGen.Apis.StructuralAnalysisApi
@using System.Reflection
@using BeamOs.WebApp.Client.Components.Features.StructuralApiClient
@using System.Text.Json

<MudDialog>
    <DialogContent>
        <SelectionInfoSingleItemComponent2 ObjectToDisplay="@parameterValues" ObjectName=""></SelectionInfoSingleItemComponent2>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton OnClick="HandleSubmit" Color="Color.Primary">Submit</MudButton>
    </DialogActions>
</MudDialog>

<style>
    .mud-expand-panel-header {
        padding-left: 0px !important;
        padding-right: 0px !important;
        padding-top: 0px !important;
        padding-bottom: 8px !important;
        min-height: 24px !important;
    }

    .mud-expand-panel-content {
        padding-left: 12px !important;
        padding-right: 0px !important;
        padding-top: 0px !important;
        border-style: none;
        height: fit-content;
    }

    .mud-panel-expanded > .mud-expand-panel-header .mud-expand-panel-text {
        color: var(--mud-palette-primary-lighten);
    }

    .mud-expand-panel.mud-panel-expanded {
        margin-top: 0px;
        margin-block: 0px;
    }

    .mud-expand-panel-text {
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
    }

    .mud-input-control {
        margin-top: 0px;
    }

</style>

@code {
    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }

    [Inject]
    private IStructuralAnalysisApiAlphaClient StructuralAnalysisApiAlphaClient { get; init; }

    private ComplexFieldTypeMarker parameterValues = StructuralApiClientComponent.GetParameterProperties(typeof(CreateModelRequest), null, true);

    private static MethodInfo CreateModel { get; } = typeof(IStructuralAnalysisApiAlphaClient)
            .GetMethods(BindingFlags.Public | BindingFlags.Instance)
            .Where(m => m.GetParameters().Length == 1 && m.Name.Equals(nameof(IStructuralAnalysisApiAlphaClient.CreateModelAsync)))
            .First();

    private void Cancel() => MudDialog.Cancel();

    private async Task HandleSubmit()
    {
        var parameterType = typeof(CreateModelRequest);
        object parameterInstance;
        var serialized = JsonSerializer.Serialize(this.parameterValues);
        try
        {
            parameterInstance = JsonSerializer.Deserialize(serialized, parameterType);
        }
        catch (JsonException ex)
        {
            // Handle JSON deserialization error
            Console.WriteLine($"Error deserializing JSON: {ex.Message}");
            return;
        }

        var result = CreateModel
            .Invoke(this.StructuralAnalysisApiAlphaClient, new[] { parameterInstance });

        if (result is Task t)
        {
            await t.ConfigureAwait(false);
        }

        MudDialog.Close(DialogResult.Ok(true));
    }
}
