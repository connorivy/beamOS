@using BeamOs.Tests.TestRunner
@inherits FluxorComponent

<div class="min-h-0 max-h-fit grow overflow-scroll point-events-auto">
    @if (@AssertionResultArray is not null)
    {
        <AssertionResultVectorView AssertionResultArray="@AssertionResultArray" ComparedValueName="@ComparedValueName" ComparedValueNameCollection="@ComparedValueNameCollection" />
    }
    else if (@AssertionResultMatrix is not null)
    {
        <AssertionResultMatrixView AssertionResultMatrix="@AssertionResultMatrix" ComparedValueName="@ComparedValueName" ComparedValueNameCollection="@ComparedValueNameCollection" />
    }
</div>

@code {
    [Inject]
    private IState<TestExplorerState> TestExplorerState { get; init; }

    private bool isLoadingAssertionResults;
    private string? ComparedValueName { get; set; }
    private AssertionResult<double?[]>? AssertionResultArray { get; set; }
    private AssertionResult<double?[,]>? AssertionResultMatrix { get; set; }
    private ICollection<string>? ComparedValueNameCollection { get; set; }

    private void ResetAssertionResults()
    {
        this.AssertionResultArray = null;
        this.AssertionResultMatrix = null;
        this.ComparedValueName = null;
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        this.SubscribeToAction<ExecutionTestAction>(_ => this.isLoadingAssertionResults = true);
        this.SubscribeToAction<ExecutionTestActionResult>(arg =>
        {
            // if (arg.TestId != this.TestExplorerState.Value.SelectedTestInfo?.Id)
            // {
            //     return;
            // }

            switch (arg.Result)
            {
                case TestResult2 testResult2:
                    this.ResetAssertionResults();
                    this.ComparedValueName = testResult2.ComparedValueName;
                    this.ComparedValueNameCollection = testResult2.ComparedValueNameCollection;
                    if (
                        testResult2.CalculatedValue is double[] calDoubArrVal
                        && testResult2.ExpectedValue is double[] expDoubArrVal)
                    {
                        this.AssertionResultArray = new(
                            expDoubArrVal.Cast<double?>().ToArray(),
                            calDoubArrVal.Cast<double?>().ToArray()
                        );
                    }
                    else if (
                        testResult2.CalculatedValue is double?[] calDoubArrValNul
                        && testResult2.ExpectedValue is double?[] expDoubArrValNul)
                    {
                        this.AssertionResultArray = new(
                            expDoubArrValNul,
                            calDoubArrValNul
                        );
                    }
                    else if (
                        testResult2.CalculatedValue is double[,] calDoubMatVal
                        && testResult2.ExpectedValue is double[,] expDoubMatVal)
                    {
                        this.AssertionResultMatrix = new(
                            AssertionResultMatrixView.ToNullable(expDoubMatVal),
                            AssertionResultMatrixView.ToNullable(calDoubMatVal)
                        );
                    }
                    else if (
                        testResult2.CalculatedValue is double?[,] calDoubMatValNul
                        && testResult2.ExpectedValue is double?[,] expDoubMatValNul)
                    {
                        this.AssertionResultMatrix = new(
                            expDoubMatValNul,
                            calDoubMatValNul
                        );
                    }
                    break;
                // case TestResult<double[]> testResultDoubleArray:
                //     this.ResetAssertionResults();
                //     this.AssertionResultArray = new(
                //         testResultDoubleArray.ExpectedValue,
                //         testResultDoubleArray.CalculatedValue
                //     );
                //     this.ComparedValueName = testResultDoubleArray.ComparedValueName;
                //     break;
                // case TestResult<double[,]> testResultDoubleMatrix:
                //     this.ResetAssertionResults();
                //     this.AssertionResultMatrix = new(
                //         testResultDoubleMatrix.ExpectedValue,
                //         testResultDoubleMatrix.CalculatedValue
                //     );
                //     this.ComparedValueName = testResultDoubleMatrix.ComparedValueName;
                //     break;
                default:
                    this.ResetAssertionResults();
                    break;
            }
            this.isLoadingAssertionResults = false;
            this.StateHasChanged();
        });
    }
}
