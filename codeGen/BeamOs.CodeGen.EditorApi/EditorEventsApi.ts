//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export interface IEditorEventsApi {

    /**
     * @return OK
     */
    dispatchChangeSelectionCommand(body: ChangeSelectionCommand): Promise<void>;

    /**
     * @return OK
     */
    dispatchMoveNodeCommand(body: MoveNodeCommand): Promise<void>;

    /**
     * @return OK
     */
    dispatchPutNodeClientCommand(body: PutNodeClientCommand): Promise<void>;
}

export class EditorEventsApi implements IEditorEventsApi {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @return OK
     */
    dispatchChangeSelectionCommand(body: ChangeSelectionCommand): Promise<void> {
        let url_ = this.baseUrl + "/EditorEventsApi/DispatchChangeSelectionCommand";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDispatchChangeSelectionCommand(_response);
        });
    }

    protected processDispatchChangeSelectionCommand(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    dispatchMoveNodeCommand(body: MoveNodeCommand): Promise<void> {
        let url_ = this.baseUrl + "/EditorEventsApi/DispatchMoveNodeCommand";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDispatchMoveNodeCommand(_response);
        });
    }

    protected processDispatchMoveNodeCommand(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    dispatchPutNodeClientCommand(body: PutNodeClientCommand): Promise<void> {
        let url_ = this.baseUrl + "/EditorEventsApi/DispatchPutNodeClientCommand";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDispatchPutNodeClientCommand(_response);
        });
    }

    protected processDispatchPutNodeClientCommand(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }
}

export class ChangeSelectionCommand implements IChangeSelectionCommand {
    canvasId!: string;
    selectedObjects!: SelectedObject[];

    constructor(data?: IChangeSelectionCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.selectedObjects = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.canvasId = _data["canvasId"];
            if (Array.isArray(_data["selectedObjects"])) {
                this.selectedObjects = [] as any;
                for (let item of _data["selectedObjects"])
                    this.selectedObjects!.push(SelectedObject.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ChangeSelectionCommand {
        data = typeof data === 'object' ? data : {};
        let result = new ChangeSelectionCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["canvasId"] = this.canvasId;
        if (Array.isArray(this.selectedObjects)) {
            data["selectedObjects"] = [];
            for (let item of this.selectedObjects)
                data["selectedObjects"].push(item.toJSON());
        }
        return data;
    }
}

export interface IChangeSelectionCommand {
    canvasId: string;
    selectedObjects: SelectedObject[];
}

export class Coordinate3D implements ICoordinate3D {
    x!: number;
    y!: number;
    z!: number;

    constructor(data?: ICoordinate3D) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.x = _data["x"];
            this.y = _data["y"];
            this.z = _data["z"];
        }
    }

    static fromJS(data: any): Coordinate3D {
        data = typeof data === 'object' ? data : {};
        let result = new Coordinate3D();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["x"] = this.x;
        data["y"] = this.y;
        data["z"] = this.z;
        return data;
    }
}

export interface ICoordinate3D {
    x: number;
    y: number;
    z: number;
}

export enum LengthUnit {
    _0 = 0,
    _1 = 1,
    _2 = 2,
    _3 = 3,
    _4 = 4,
    _5 = 5,
}

export class MoveNodeCommand implements IMoveNodeCommand {
    canvasId!: string;
    nodeId!: number;
    previousLocation!: Coordinate3D;
    newLocation!: Coordinate3D;
    handledByEditor!: boolean;
    handledByBlazor!: boolean;
    handledByServer!: boolean;

    constructor(data?: IMoveNodeCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.previousLocation = new Coordinate3D();
            this.newLocation = new Coordinate3D();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.canvasId = _data["canvasId"];
            this.nodeId = _data["nodeId"];
            this.previousLocation = _data["previousLocation"] ? Coordinate3D.fromJS(_data["previousLocation"]) : new Coordinate3D();
            this.newLocation = _data["newLocation"] ? Coordinate3D.fromJS(_data["newLocation"]) : new Coordinate3D();
            this.handledByEditor = _data["handledByEditor"];
            this.handledByBlazor = _data["handledByBlazor"];
            this.handledByServer = _data["handledByServer"];
        }
    }

    static fromJS(data: any): MoveNodeCommand {
        data = typeof data === 'object' ? data : {};
        let result = new MoveNodeCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["canvasId"] = this.canvasId;
        data["nodeId"] = this.nodeId;
        data["previousLocation"] = this.previousLocation ? this.previousLocation.toJSON() : <any>undefined;
        data["newLocation"] = this.newLocation ? this.newLocation.toJSON() : <any>undefined;
        data["handledByEditor"] = this.handledByEditor;
        data["handledByBlazor"] = this.handledByBlazor;
        data["handledByServer"] = this.handledByServer;
        return data;
    }
}

export interface IMoveNodeCommand {
    canvasId: string;
    nodeId: number;
    previousLocation: Coordinate3D;
    newLocation: Coordinate3D;
    handledByEditor: boolean;
    handledByBlazor: boolean;
    handledByServer: boolean;
}

export class NodeResponse implements INodeResponse {
    id!: number;
    modelId!: string;
    locationPoint!: Point;
    restraint!: Restraint;

    constructor(data?: INodeResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.locationPoint = new Point();
            this.restraint = new Restraint();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.modelId = _data["modelId"];
            this.locationPoint = _data["locationPoint"] ? Point.fromJS(_data["locationPoint"]) : new Point();
            this.restraint = _data["restraint"] ? Restraint.fromJS(_data["restraint"]) : new Restraint();
        }
    }

    static fromJS(data: any): NodeResponse {
        data = typeof data === 'object' ? data : {};
        let result = new NodeResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["modelId"] = this.modelId;
        data["locationPoint"] = this.locationPoint ? this.locationPoint.toJSON() : <any>undefined;
        data["restraint"] = this.restraint ? this.restraint.toJSON() : <any>undefined;
        return data;
    }
}

export interface INodeResponse {
    id: number;
    modelId: string;
    locationPoint: Point;
    restraint: Restraint;
}

export class Point implements IPoint {
    x!: number;
    y!: number;
    z!: number;
    lengthUnit!: LengthUnit;

    constructor(data?: IPoint) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.x = _data["x"];
            this.y = _data["y"];
            this.z = _data["z"];
            this.lengthUnit = _data["lengthUnit"];
        }
    }

    static fromJS(data: any): Point {
        data = typeof data === 'object' ? data : {};
        let result = new Point();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["x"] = this.x;
        data["y"] = this.y;
        data["z"] = this.z;
        data["lengthUnit"] = this.lengthUnit;
        return data;
    }
}

export interface IPoint {
    x: number;
    y: number;
    z: number;
    lengthUnit: LengthUnit;
}

export class PutNodeClientCommand implements IPutNodeClientCommand {
    previous!: NodeResponse;
    new!: NodeResponse;
    readonly id!: string;
    handledByEditor!: boolean;
    handledByBlazor!: boolean;
    handledByServer!: boolean;

    constructor(data?: IPutNodeClientCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.previous = new NodeResponse();
            this.new = new NodeResponse();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.previous = _data["previous"] ? NodeResponse.fromJS(_data["previous"]) : new NodeResponse();
            this.new = _data["new"] ? NodeResponse.fromJS(_data["new"]) : new NodeResponse();
            (<any>this).id = _data["id"];
            this.handledByEditor = _data["handledByEditor"];
            this.handledByBlazor = _data["handledByBlazor"];
            this.handledByServer = _data["handledByServer"];
        }
    }

    static fromJS(data: any): PutNodeClientCommand {
        data = typeof data === 'object' ? data : {};
        let result = new PutNodeClientCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["previous"] = this.previous ? this.previous.toJSON() : <any>undefined;
        data["new"] = this.new ? this.new.toJSON() : <any>undefined;
        data["id"] = this.id;
        data["handledByEditor"] = this.handledByEditor;
        data["handledByBlazor"] = this.handledByBlazor;
        data["handledByServer"] = this.handledByServer;
        return data;
    }
}

export interface IPutNodeClientCommand {
    previous: NodeResponse;
    new: NodeResponse;
    id: string;
    handledByEditor: boolean;
    handledByBlazor: boolean;
    handledByServer: boolean;
}

export class Restraint implements IRestraint {
    canTranslateAlongX!: boolean;
    canTranslateAlongY!: boolean;
    canTranslateAlongZ!: boolean;
    canRotateAboutX!: boolean;
    canRotateAboutY!: boolean;
    canRotateAboutZ!: boolean;

    constructor(data?: IRestraint) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.canTranslateAlongX = _data["canTranslateAlongX"];
            this.canTranslateAlongY = _data["canTranslateAlongY"];
            this.canTranslateAlongZ = _data["canTranslateAlongZ"];
            this.canRotateAboutX = _data["canRotateAboutX"];
            this.canRotateAboutY = _data["canRotateAboutY"];
            this.canRotateAboutZ = _data["canRotateAboutZ"];
        }
    }

    static fromJS(data: any): Restraint {
        data = typeof data === 'object' ? data : {};
        let result = new Restraint();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["canTranslateAlongX"] = this.canTranslateAlongX;
        data["canTranslateAlongY"] = this.canTranslateAlongY;
        data["canTranslateAlongZ"] = this.canTranslateAlongZ;
        data["canRotateAboutX"] = this.canRotateAboutX;
        data["canRotateAboutY"] = this.canRotateAboutY;
        data["canRotateAboutZ"] = this.canRotateAboutZ;
        return data;
    }
}

export interface IRestraint {
    canTranslateAlongX: boolean;
    canTranslateAlongY: boolean;
    canTranslateAlongZ: boolean;
    canRotateAboutX: boolean;
    canRotateAboutY: boolean;
    canRotateAboutZ: boolean;
}

export class SelectedObject implements ISelectedObject {
    id!: number;
    typeName!: string;

    constructor(data?: ISelectedObject) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.typeName = _data["typeName"];
        }
    }

    static fromJS(data: any): SelectedObject {
        data = typeof data === 'object' ? data : {};
        let result = new SelectedObject();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["typeName"] = this.typeName;
        return data;
    }
}

export interface ISelectedObject {
    id: number;
    typeName: string;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}