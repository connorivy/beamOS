// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using BeamOs.Common.Domain.Models;
using BeamOs.StructuralAnalysis.Domain.Common;
using BeamOs.StructuralAnalysis.Domain.PhysicalModel.ModelAggregate;
using BeamOs.StructuralAnalysis.Infrastructure.Common;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using UnitsNet.Units;

#pragma warning disable 219, 612, 618
#nullable disable

namespace BeamOs.StructuralAnalysis.Api
{
    [EntityFrameworkInternal]
    public partial class ModelProposalEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "BeamOs.StructuralAnalysis.Domain.PhysicalModel.ModelAggregate.ModelProposal",
                typeof(ModelProposal),
                baseEntityType,
                propertyCount: 5,
                complexPropertyCount: 1,
                navigationCount: 9,
                foreignKeyCount: 1,
                unnamedIndexCount: 1,
                keyCount: 1);

            var id = runtimeEntityType.AddProperty(
                "Id",
                typeof(ModelProposalId),
                propertyInfo: typeof(BeamOsEntity<ModelProposalId>).GetProperty("Id", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(BeamOsEntity<ModelProposalId>).GetField("<Id>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                valueConverter: new ModelIdProposalConverter());
            id.SetSentinelFromProviderValue(0);

            var modelId = runtimeEntityType.AddProperty(
                "ModelId",
                typeof(ModelId),
                propertyInfo: typeof(BeamOsModelEntity<ModelProposalId>).GetProperty("ModelId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(BeamOsModelEntity<ModelProposalId>).GetField("<ModelId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                afterSaveBehavior: PropertySaveBehavior.Throw,
                valueConverter: new ModelIdConverter());
            modelId.SetSentinelFromProviderValue(new Guid("01995299-f5ff-7541-9207-5384463d1e89"));

            var description = runtimeEntityType.AddProperty(
                "Description",
                typeof(string),
                propertyInfo: typeof(ModelProposal).GetProperty("Description", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ModelProposal).GetField("<Description>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var lastModified = runtimeEntityType.AddProperty(
                "LastModified",
                typeof(DateTimeOffset),
                propertyInfo: typeof(ModelProposal).GetProperty("LastModified", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ModelProposal).GetField("<LastModified>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)));

            var name = runtimeEntityType.AddProperty(
                "Name",
                typeof(string),
                propertyInfo: typeof(ModelProposal).GetProperty("Name", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ModelProposal).GetField("<Name>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            SettingsComplexProperty.Create(runtimeEntityType);
            var key = runtimeEntityType.AddKey(
                new[] { id, modelId });
            runtimeEntityType.SetPrimaryKey(key);

            var index = runtimeEntityType.AddIndex(
                new[] { modelId });

            return runtimeEntityType;
        }

        public static class SettingsComplexProperty
        {
            public static RuntimeComplexProperty Create(RuntimeEntityType declaringType)
            {
                var complexProperty = declaringType.AddComplexProperty("Settings",
                    typeof(ModelSettings),
                    "BeamOs.StructuralAnalysis.Domain.PhysicalModel.ModelAggregate.ModelProposal.Settings#ModelSettings",
                    typeof(ModelSettings),
                    propertyInfo: typeof(ModelProposal).GetProperty("Settings", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    fieldInfo: typeof(ModelProposal).GetField("<Settings>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    propertyCount: 1,
                    complexPropertyCount: 2);

                var complexType = complexProperty.ComplexType;
                var yAxisUp = complexType.AddProperty(
                    "YAxisUp",
                    typeof(bool),
                    propertyInfo: typeof(ModelSettings).GetProperty("YAxisUp", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    fieldInfo: typeof(ModelSettings).GetField("<YAxisUp>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    sentinel: false);

                AnalysisSettingsComplexProperty.Create(complexType);
                UnitSettingsComplexProperty.Create(complexType);
                complexType.AddAnnotation("Relational:FunctionName", null);
                complexType.AddAnnotation("Relational:Schema", null);
                complexType.AddAnnotation("Relational:SqlQuery", null);
                complexType.AddAnnotation("Relational:TableName", "ModelProposals");
                complexType.AddAnnotation("Relational:ViewName", null);
                complexType.AddAnnotation("Relational:ViewSchema", null);
                return complexProperty;
            }

            public static class AnalysisSettingsComplexProperty
            {
                public static RuntimeComplexProperty Create(RuntimeComplexType declaringType)
                {
                    var complexProperty = declaringType.AddComplexProperty("AnalysisSettings",
                        typeof(AnalysisSettings),
                        "BeamOs.StructuralAnalysis.Domain.PhysicalModel.ModelAggregate.ModelProposal.Settings#ModelSettings.AnalysisSettings#AnalysisSettings",
                        typeof(AnalysisSettings),
                        propertyInfo: typeof(ModelSettings).GetProperty("AnalysisSettings", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                        fieldInfo: typeof(ModelSettings).GetField("<AnalysisSettings>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                        propertyCount: 1);

                    var complexType = complexProperty.ComplexType;
                    var element1DAnalysisType = complexType.AddProperty(
                        "Element1DAnalysisType",
                        typeof(Element1dAnalysisType),
                        propertyInfo: typeof(AnalysisSettings).GetProperty("Element1DAnalysisType", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                        fieldInfo: typeof(AnalysisSettings).GetField("<Element1DAnalysisType>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
                    element1DAnalysisType.SetSentinelFromProviderValue(0);

                    complexType.AddAnnotation("Relational:FunctionName", null);
                    complexType.AddAnnotation("Relational:Schema", null);
                    complexType.AddAnnotation("Relational:SqlQuery", null);
                    complexType.AddAnnotation("Relational:TableName", "ModelProposals");
                    complexType.AddAnnotation("Relational:ViewName", null);
                    complexType.AddAnnotation("Relational:ViewSchema", null);
                    return complexProperty;
                }
            }

            public static class UnitSettingsComplexProperty
            {
                public static RuntimeComplexProperty Create(RuntimeComplexType declaringType)
                {
                    var complexProperty = declaringType.AddComplexProperty("UnitSettings",
                        typeof(UnitSettings),
                        "BeamOs.StructuralAnalysis.Domain.PhysicalModel.ModelAggregate.ModelProposal.Settings#ModelSettings.UnitSettings#UnitSettings",
                        typeof(UnitSettings),
                        propertyInfo: typeof(ModelSettings).GetProperty("UnitSettings", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                        fieldInfo: typeof(ModelSettings).GetField("<UnitSettings>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                        propertyCount: 9);

                    var complexType = complexProperty.ComplexType;
                    var angleUnit = complexType.AddProperty(
                        "AngleUnit",
                        typeof(AngleUnit),
                        propertyInfo: typeof(UnitSettings).GetProperty("AngleUnit", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                        fieldInfo: typeof(UnitSettings).GetField("<AngleUnit>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
                    angleUnit.SetSentinelFromProviderValue(0);

                    var areaMomentOfInertiaUnit = complexType.AddProperty(
                        "AreaMomentOfInertiaUnit",
                        typeof(AreaMomentOfInertiaUnit),
                        propertyInfo: typeof(UnitSettings).GetProperty("AreaMomentOfInertiaUnit", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                        fieldInfo: typeof(UnitSettings).GetField("<AreaMomentOfInertiaUnit>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
                    areaMomentOfInertiaUnit.SetSentinelFromProviderValue(0);

                    var areaUnit = complexType.AddProperty(
                        "AreaUnit",
                        typeof(AreaUnit),
                        propertyInfo: typeof(UnitSettings).GetProperty("AreaUnit", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                        fieldInfo: typeof(UnitSettings).GetField("<AreaUnit>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
                    areaUnit.SetSentinelFromProviderValue(0);

                    var forcePerLengthUnit = complexType.AddProperty(
                        "ForcePerLengthUnit",
                        typeof(ForcePerLengthUnit),
                        propertyInfo: typeof(UnitSettings).GetProperty("ForcePerLengthUnit", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                        fieldInfo: typeof(UnitSettings).GetField("<ForcePerLengthUnit>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
                    forcePerLengthUnit.SetSentinelFromProviderValue(0);

                    var forceUnit = complexType.AddProperty(
                        "ForceUnit",
                        typeof(ForceUnit),
                        propertyInfo: typeof(UnitSettings).GetProperty("ForceUnit", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                        fieldInfo: typeof(UnitSettings).GetField("<ForceUnit>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
                    forceUnit.SetSentinelFromProviderValue(0);

                    var lengthUnit = complexType.AddProperty(
                        "LengthUnit",
                        typeof(LengthUnit),
                        propertyInfo: typeof(UnitSettings).GetProperty("LengthUnit", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                        fieldInfo: typeof(UnitSettings).GetField("<LengthUnit>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
                    lengthUnit.SetSentinelFromProviderValue(0);

                    var pressureUnit = complexType.AddProperty(
                        "PressureUnit",
                        typeof(PressureUnit),
                        propertyInfo: typeof(UnitSettings).GetProperty("PressureUnit", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                        fieldInfo: typeof(UnitSettings).GetField("<PressureUnit>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
                    pressureUnit.SetSentinelFromProviderValue(0);

                    var torqueUnit = complexType.AddProperty(
                        "TorqueUnit",
                        typeof(TorqueUnit),
                        propertyInfo: typeof(UnitSettings).GetProperty("TorqueUnit", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                        fieldInfo: typeof(UnitSettings).GetField("<TorqueUnit>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
                    torqueUnit.SetSentinelFromProviderValue(0);

                    var volumeUnit = complexType.AddProperty(
                        "VolumeUnit",
                        typeof(VolumeUnit),
                        propertyInfo: typeof(UnitSettings).GetProperty("VolumeUnit", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                        fieldInfo: typeof(UnitSettings).GetField("<VolumeUnit>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
                    volumeUnit.SetSentinelFromProviderValue(0);

                    complexType.AddAnnotation("Relational:FunctionName", null);
                    complexType.AddAnnotation("Relational:Schema", null);
                    complexType.AddAnnotation("Relational:SqlQuery", null);
                    complexType.AddAnnotation("Relational:TableName", "ModelProposals");
                    complexType.AddAnnotation("Relational:ViewName", null);
                    complexType.AddAnnotation("Relational:ViewSchema", null);
                    return complexProperty;
                }
            }
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ModelId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id") }),
                principalEntityType,
                deleteBehavior: DeleteBehavior.Cascade,
                required: true);

            var model = declaringEntityType.AddNavigation("Model",
                runtimeForeignKey,
                onDependent: true,
                typeof(Model),
                propertyInfo: typeof(BeamOsModelEntity<ModelProposalId>).GetProperty("Model", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(BeamOsModelEntity<ModelProposalId>).GetField("<Model>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var modelProposals = principalEntityType.AddNavigation("ModelProposals",
                runtimeForeignKey,
                onDependent: false,
                typeof(IList<ModelProposal>),
                propertyInfo: typeof(Model).GetProperty("ModelProposals", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Model).GetField("<ModelProposals>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "ModelProposals");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
