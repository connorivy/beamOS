@using MudBlazor
@inherits FluxorComponent

<MudContainer Gutters="false" Class=@($"rounded h-full pointer-events-none {@Class}")>
    <MudPaper Class="p-4 max-h-full overflow-auto pointer-events-auto">
        <MudText Typo="Typo.h6">Selection Info</MudText>
        <MudDivider Class="my-2" />
        <MudExpansionPanels MultiExpansion="true" Outlined="false" Elevation="0" Dense="true">
            @foreach (var selectedObjectInfo in this.SelectedObjects)
            {
                var objectToDisplay = GetBeamOsObjectByIdAndTypeName(selectedObjectInfo.Id, selectedObjectInfo.TypeName);
                if (objectToDisplay is not null)
                {
                    <SelectionInfoSingleItemComponent CanvasId="@CanvasId" ObjectToDisplay="@objectToDisplay"></SelectionInfoSingleItemComponent>
                }
            }
        </MudExpansionPanels>
    </MudPaper>
</MudContainer>

<style>
    .mud-expand-panel-header {
        padding-left: 0px !important;
        padding-right: 0px !important;
        padding-top: 0px !important;
        padding-bottom: 8px !important;
        min-height: 24px !important;
    }

    .mud-expand-panel-content {
        padding-left: 12px !important;
        padding-right: 0px !important;
        padding-top: 0px !important;
        border-style: none;
        height: fit-content;
    }

    .mud-panel-expanded > .mud-expand-panel-header .mud-expand-panel-text {
        color: var(--mud-palette-primary-lighten);
    }

    .mud-expand-panel.mud-panel-expanded {
        margin-top: 0px;
        margin-block: 0px;
    }

    .mud-expand-panel-text {
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
    }

    .mud-input-control {
        margin-top: 0px;
    }

</style>

@* @code { *@
@*     [Parameter] *@
@*     public required SelectedObject[] SelectedObjects { get; init; } *@

@*     [Parameter] *@
@*     public required string ModelId { get; init; } *@

@*     [Inject] *@
@*     private AllStructuralAnalysisModelCaches AllStructuralAnalysisModelCaches { get; init; } *@

@*     private object GetBeamOsObjectByIdAndTypeName(string id, string typeName) *@
@*     { *@
@*         return this.AllStructuralAnalysisModelCaches.GetByModelId(this.ModelId).GetById<BeamOsEntityContractBase>(id); *@
@*     } *@

@*     private object GetAdditionalObjectInfo(string id, string typeName) *@
@*     { *@
@*         return this.AllStructuralAnalysisModelCaches.GetByModelId(this.ModelId).GetById<BeamOsEntityContractBase>(NodeResultResponseEntity.ResultId(id)); *@
@*     } *@
@* } *@
