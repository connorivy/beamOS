//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export interface IStructuralAnalysisApiClientV1 {

    /**
     * @return OK
     */
    createSectionProfile(modelId: string, body: CreateSectionProfileRequest): Promise<ResultOfSectionProfileResponse>;

    /**
     * @return OK
     */
    batchPutSectionProfile(modelId: string, body: PutSectionProfileRequest[]): Promise<ResultOfBatchResponse>;

    /**
     * @return OK
     */
    deleteSectionProfile(modelId: string, id: number): Promise<ResultOfModelEntityResponse>;

    /**
     * @return OK
     */
    putSectionProfile(id: number, modelId: string, body: SectionProfileData): Promise<ResultOfSectionProfileResponse>;

    /**
     * @return OK
     */
    createPointLoad(modelId: string, body: CreatePointLoadRequest): Promise<ResultOfPointLoadResponse>;

    /**
     * @return OK
     */
    batchPutPointLoad(modelId: string, body: PutPointLoadRequest[]): Promise<ResultOfBatchResponse>;

    /**
     * @return OK
     */
    putPointLoad(id: number, modelId: string, body: PointLoadRequestData): Promise<ResultOfPointLoadResponse>;

    /**
     * @return OK
     */
    createNode(modelId: string, body: CreateNodeRequest): Promise<ResultOfNodeResponse>;

    /**
     * @return OK
     */
    updateNode(modelId: string, body: UpdateNodeRequest): Promise<ResultOfNodeResponse>;

    /**
     * @return OK
     */
    batchPutNode(modelId: string, body: PutNodeRequest[]): Promise<ResultOfBatchResponse>;

    /**
     * @return OK
     */
    deleteNode(modelId: string, id: number): Promise<ResultOfModelEntityResponse>;

    /**
     * @return OK
     */
    putNode(id: number, modelId: string, body: NodeData): Promise<ResultOfNodeResponse>;

    /**
     * @return OK
     */
    createMomentLoad(modelId: string, body: CreateMomentLoadRequest): Promise<ResultOfMomentLoadResponse>;

    /**
     * @return OK
     */
    batchPutMomentLoad(modelId: string, body: PutMomentLoadRequest[]): Promise<ResultOfBatchResponse>;

    /**
     * @return OK
     */
    putMomentLoad(id: number, modelId: string, body: MomentLoadRequestData): Promise<ResultOfMomentLoadResponse>;

    /**
     * @param body (optional) 
     * @return OK
     */
    createModel(body: CreateModelRequest | undefined): Promise<ResultOfModelResponse>;

    /**
     * @return OK
     */
    getModels(): Promise<ResultOfListOfModelInfoResponse>;

    /**
     * @return OK
     */
    getModel(modelId: string): Promise<ResultOfModelResponse>;

    /**
     * @return OK
     */
    createMaterial(modelId: string, body: CreateMaterialRequest): Promise<ResultOfMaterialResponse>;

    /**
     * @return OK
     */
    batchPutMaterial(modelId: string, body: PutMaterialRequest[]): Promise<ResultOfBatchResponse>;

    /**
     * @return OK
     */
    putMaterial(id: number, modelId: string, body: MaterialRequestData): Promise<ResultOfMaterialResponse>;

    /**
     * @return OK
     */
    createElement1d(modelId: string, body: CreateElement1dRequest): Promise<ResultOfElement1dResponse>;

    /**
     * @return OK
     */
    batchPutElement1d(modelId: string, body: PutElement1dRequest[]): Promise<ResultOfBatchResponse>;

    /**
     * @return OK
     */
    deleteElement1d(modelId: string, id: number): Promise<ResultOfModelEntityResponse>;

    /**
     * @return OK
     */
    getElement1d(modelId: string, id: number): Promise<ResultOfElement1dResponse>;

    /**
     * @return OK
     */
    putElement1d(id: number, modelId: string, body: Element1dData): Promise<ResultOfElement1dResponse>;

    /**
     * @param unitsOverride (optional) 
     * @return OK
     */
    runOpenSeesAnalysis(modelId: string, unitsOverride: string | undefined): Promise<ResultOfAnalyticalResultsResponse>;

    /**
     * @param unitsOverride (optional) 
     * @return OK
     */
    runDirectStiffnessMethod(modelId: string, unitsOverride: string | undefined): Promise<ResultOfAnalyticalResultsResponse>;

    /**
     * @return OK
     */
    deleteAllResultSets(modelId: string): Promise<ResultOfint>;

    /**
     * @param unitsOverride (optional) 
     * @return OK
     */
    getDiagrams(modelId: string, id: number, unitsOverride: string | undefined): Promise<ResultOfAnalyticalResultsResponse>;

    /**
     * @return OK
     */
    getNodeResult(modelId: string, resultSetId: number, id: number): Promise<ResultOfNodeResultResponse>;

    /**
     * @return OK
     */
    getResultSet(modelId: string, id: number): Promise<ResultOfResultSetResponse>;

    /**
     * @param body (optional) 
     * @return OK
     */
    convertToBeamOs(body: SpeckleReceiveParameters | undefined): Promise<ResultOfBeamOsModelBuilderDto>;
}

export class StructuralAnalysisApiClientV1 implements IStructuralAnalysisApiClientV1 {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "https://localhost:7060";
    }

    /**
     * @return OK
     */
    createSectionProfile(modelId: string, body: CreateSectionProfileRequest): Promise<ResultOfSectionProfileResponse> {
        let url_ = this.baseUrl + "/api/models/{modelId}/section-profiles";
        if (modelId === undefined || modelId === null)
            throw new Error("The parameter 'modelId' must be defined.");
        url_ = url_.replace("{modelId}", encodeURIComponent("" + modelId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateSectionProfile(_response);
        });
    }

    protected processCreateSectionProfile(response: Response): Promise<ResultOfSectionProfileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultOfSectionProfileResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultOfSectionProfileResponse>(null as any);
    }

    /**
     * @return OK
     */
    batchPutSectionProfile(modelId: string, body: PutSectionProfileRequest[]): Promise<ResultOfBatchResponse> {
        let url_ = this.baseUrl + "/api/models/{modelId}/section-profiles";
        if (modelId === undefined || modelId === null)
            throw new Error("The parameter 'modelId' must be defined.");
        url_ = url_.replace("{modelId}", encodeURIComponent("" + modelId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBatchPutSectionProfile(_response);
        });
    }

    protected processBatchPutSectionProfile(response: Response): Promise<ResultOfBatchResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultOfBatchResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultOfBatchResponse>(null as any);
    }

    /**
     * @return OK
     */
    deleteSectionProfile(modelId: string, id: number): Promise<ResultOfModelEntityResponse> {
        let url_ = this.baseUrl + "/api/models/{modelId}/section-profiles/{id}";
        if (modelId === undefined || modelId === null)
            throw new Error("The parameter 'modelId' must be defined.");
        url_ = url_.replace("{modelId}", encodeURIComponent("" + modelId));
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteSectionProfile(_response);
        });
    }

    protected processDeleteSectionProfile(response: Response): Promise<ResultOfModelEntityResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultOfModelEntityResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultOfModelEntityResponse>(null as any);
    }

    /**
     * @return OK
     */
    putSectionProfile(id: number, modelId: string, body: SectionProfileData): Promise<ResultOfSectionProfileResponse> {
        let url_ = this.baseUrl + "/api/models/{modelId}/section-profiles/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (modelId === undefined || modelId === null)
            throw new Error("The parameter 'modelId' must be defined.");
        url_ = url_.replace("{modelId}", encodeURIComponent("" + modelId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPutSectionProfile(_response);
        });
    }

    protected processPutSectionProfile(response: Response): Promise<ResultOfSectionProfileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultOfSectionProfileResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultOfSectionProfileResponse>(null as any);
    }

    /**
     * @return OK
     */
    createPointLoad(modelId: string, body: CreatePointLoadRequest): Promise<ResultOfPointLoadResponse> {
        let url_ = this.baseUrl + "/api/models/{modelId}/point-loads";
        if (modelId === undefined || modelId === null)
            throw new Error("The parameter 'modelId' must be defined.");
        url_ = url_.replace("{modelId}", encodeURIComponent("" + modelId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreatePointLoad(_response);
        });
    }

    protected processCreatePointLoad(response: Response): Promise<ResultOfPointLoadResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultOfPointLoadResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultOfPointLoadResponse>(null as any);
    }

    /**
     * @return OK
     */
    batchPutPointLoad(modelId: string, body: PutPointLoadRequest[]): Promise<ResultOfBatchResponse> {
        let url_ = this.baseUrl + "/api/models/{modelId}/point-loads";
        if (modelId === undefined || modelId === null)
            throw new Error("The parameter 'modelId' must be defined.");
        url_ = url_.replace("{modelId}", encodeURIComponent("" + modelId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBatchPutPointLoad(_response);
        });
    }

    protected processBatchPutPointLoad(response: Response): Promise<ResultOfBatchResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultOfBatchResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultOfBatchResponse>(null as any);
    }

    /**
     * @return OK
     */
    putPointLoad(id: number, modelId: string, body: PointLoadRequestData): Promise<ResultOfPointLoadResponse> {
        let url_ = this.baseUrl + "/api/models/{modelId}/point-loads/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (modelId === undefined || modelId === null)
            throw new Error("The parameter 'modelId' must be defined.");
        url_ = url_.replace("{modelId}", encodeURIComponent("" + modelId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPutPointLoad(_response);
        });
    }

    protected processPutPointLoad(response: Response): Promise<ResultOfPointLoadResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultOfPointLoadResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultOfPointLoadResponse>(null as any);
    }

    /**
     * @return OK
     */
    createNode(modelId: string, body: CreateNodeRequest): Promise<ResultOfNodeResponse> {
        let url_ = this.baseUrl + "/api/models/{modelId}/nodes";
        if (modelId === undefined || modelId === null)
            throw new Error("The parameter 'modelId' must be defined.");
        url_ = url_.replace("{modelId}", encodeURIComponent("" + modelId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateNode(_response);
        });
    }

    protected processCreateNode(response: Response): Promise<ResultOfNodeResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultOfNodeResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultOfNodeResponse>(null as any);
    }

    /**
     * @return OK
     */
    updateNode(modelId: string, body: UpdateNodeRequest): Promise<ResultOfNodeResponse> {
        let url_ = this.baseUrl + "/api/models/{modelId}/nodes";
        if (modelId === undefined || modelId === null)
            throw new Error("The parameter 'modelId' must be defined.");
        url_ = url_.replace("{modelId}", encodeURIComponent("" + modelId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PATCH",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateNode(_response);
        });
    }

    protected processUpdateNode(response: Response): Promise<ResultOfNodeResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultOfNodeResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultOfNodeResponse>(null as any);
    }

    /**
     * @return OK
     */
    batchPutNode(modelId: string, body: PutNodeRequest[]): Promise<ResultOfBatchResponse> {
        let url_ = this.baseUrl + "/api/models/{modelId}/nodes";
        if (modelId === undefined || modelId === null)
            throw new Error("The parameter 'modelId' must be defined.");
        url_ = url_.replace("{modelId}", encodeURIComponent("" + modelId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBatchPutNode(_response);
        });
    }

    protected processBatchPutNode(response: Response): Promise<ResultOfBatchResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultOfBatchResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultOfBatchResponse>(null as any);
    }

    /**
     * @return OK
     */
    deleteNode(modelId: string, id: number): Promise<ResultOfModelEntityResponse> {
        let url_ = this.baseUrl + "/api/models/{modelId}/nodes/{id}";
        if (modelId === undefined || modelId === null)
            throw new Error("The parameter 'modelId' must be defined.");
        url_ = url_.replace("{modelId}", encodeURIComponent("" + modelId));
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteNode(_response);
        });
    }

    protected processDeleteNode(response: Response): Promise<ResultOfModelEntityResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultOfModelEntityResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultOfModelEntityResponse>(null as any);
    }

    /**
     * @return OK
     */
    putNode(id: number, modelId: string, body: NodeData): Promise<ResultOfNodeResponse> {
        let url_ = this.baseUrl + "/api/models/{modelId}/nodes/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (modelId === undefined || modelId === null)
            throw new Error("The parameter 'modelId' must be defined.");
        url_ = url_.replace("{modelId}", encodeURIComponent("" + modelId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPutNode(_response);
        });
    }

    protected processPutNode(response: Response): Promise<ResultOfNodeResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultOfNodeResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultOfNodeResponse>(null as any);
    }

    /**
     * @return OK
     */
    createMomentLoad(modelId: string, body: CreateMomentLoadRequest): Promise<ResultOfMomentLoadResponse> {
        let url_ = this.baseUrl + "/api/models/{modelId}/moment-loads";
        if (modelId === undefined || modelId === null)
            throw new Error("The parameter 'modelId' must be defined.");
        url_ = url_.replace("{modelId}", encodeURIComponent("" + modelId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateMomentLoad(_response);
        });
    }

    protected processCreateMomentLoad(response: Response): Promise<ResultOfMomentLoadResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultOfMomentLoadResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultOfMomentLoadResponse>(null as any);
    }

    /**
     * @return OK
     */
    batchPutMomentLoad(modelId: string, body: PutMomentLoadRequest[]): Promise<ResultOfBatchResponse> {
        let url_ = this.baseUrl + "/api/models/{modelId}/moment-loads";
        if (modelId === undefined || modelId === null)
            throw new Error("The parameter 'modelId' must be defined.");
        url_ = url_.replace("{modelId}", encodeURIComponent("" + modelId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBatchPutMomentLoad(_response);
        });
    }

    protected processBatchPutMomentLoad(response: Response): Promise<ResultOfBatchResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultOfBatchResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultOfBatchResponse>(null as any);
    }

    /**
     * @return OK
     */
    putMomentLoad(id: number, modelId: string, body: MomentLoadRequestData): Promise<ResultOfMomentLoadResponse> {
        let url_ = this.baseUrl + "/api/models/{modelId}/moment-loads/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (modelId === undefined || modelId === null)
            throw new Error("The parameter 'modelId' must be defined.");
        url_ = url_.replace("{modelId}", encodeURIComponent("" + modelId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPutMomentLoad(_response);
        });
    }

    protected processPutMomentLoad(response: Response): Promise<ResultOfMomentLoadResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultOfMomentLoadResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultOfMomentLoadResponse>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    createModel(body: CreateModelRequest | undefined): Promise<ResultOfModelResponse> {
        let url_ = this.baseUrl + "/api/models";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateModel(_response);
        });
    }

    protected processCreateModel(response: Response): Promise<ResultOfModelResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultOfModelResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultOfModelResponse>(null as any);
    }

    /**
     * @return OK
     */
    getModels(): Promise<ResultOfListOfModelInfoResponse> {
        let url_ = this.baseUrl + "/api/models";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetModels(_response);
        });
    }

    protected processGetModels(response: Response): Promise<ResultOfListOfModelInfoResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultOfListOfModelInfoResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultOfListOfModelInfoResponse>(null as any);
    }

    /**
     * @return OK
     */
    getModel(modelId: string): Promise<ResultOfModelResponse> {
        let url_ = this.baseUrl + "/api/models/{modelId}";
        if (modelId === undefined || modelId === null)
            throw new Error("The parameter 'modelId' must be defined.");
        url_ = url_.replace("{modelId}", encodeURIComponent("" + modelId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetModel(_response);
        });
    }

    protected processGetModel(response: Response): Promise<ResultOfModelResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultOfModelResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultOfModelResponse>(null as any);
    }

    /**
     * @return OK
     */
    createMaterial(modelId: string, body: CreateMaterialRequest): Promise<ResultOfMaterialResponse> {
        let url_ = this.baseUrl + "/api/models/{modelId}/materials";
        if (modelId === undefined || modelId === null)
            throw new Error("The parameter 'modelId' must be defined.");
        url_ = url_.replace("{modelId}", encodeURIComponent("" + modelId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateMaterial(_response);
        });
    }

    protected processCreateMaterial(response: Response): Promise<ResultOfMaterialResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultOfMaterialResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultOfMaterialResponse>(null as any);
    }

    /**
     * @return OK
     */
    batchPutMaterial(modelId: string, body: PutMaterialRequest[]): Promise<ResultOfBatchResponse> {
        let url_ = this.baseUrl + "/api/models/{modelId}/materials";
        if (modelId === undefined || modelId === null)
            throw new Error("The parameter 'modelId' must be defined.");
        url_ = url_.replace("{modelId}", encodeURIComponent("" + modelId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBatchPutMaterial(_response);
        });
    }

    protected processBatchPutMaterial(response: Response): Promise<ResultOfBatchResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultOfBatchResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultOfBatchResponse>(null as any);
    }

    /**
     * @return OK
     */
    putMaterial(id: number, modelId: string, body: MaterialRequestData): Promise<ResultOfMaterialResponse> {
        let url_ = this.baseUrl + "/api/models/{modelId}/materials/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (modelId === undefined || modelId === null)
            throw new Error("The parameter 'modelId' must be defined.");
        url_ = url_.replace("{modelId}", encodeURIComponent("" + modelId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPutMaterial(_response);
        });
    }

    protected processPutMaterial(response: Response): Promise<ResultOfMaterialResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultOfMaterialResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultOfMaterialResponse>(null as any);
    }

    /**
     * @return OK
     */
    createElement1d(modelId: string, body: CreateElement1dRequest): Promise<ResultOfElement1dResponse> {
        let url_ = this.baseUrl + "/api/models/{modelId}/element1ds";
        if (modelId === undefined || modelId === null)
            throw new Error("The parameter 'modelId' must be defined.");
        url_ = url_.replace("{modelId}", encodeURIComponent("" + modelId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateElement1d(_response);
        });
    }

    protected processCreateElement1d(response: Response): Promise<ResultOfElement1dResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultOfElement1dResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultOfElement1dResponse>(null as any);
    }

    /**
     * @return OK
     */
    batchPutElement1d(modelId: string, body: PutElement1dRequest[]): Promise<ResultOfBatchResponse> {
        let url_ = this.baseUrl + "/api/models/{modelId}/element1ds";
        if (modelId === undefined || modelId === null)
            throw new Error("The parameter 'modelId' must be defined.");
        url_ = url_.replace("{modelId}", encodeURIComponent("" + modelId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBatchPutElement1d(_response);
        });
    }

    protected processBatchPutElement1d(response: Response): Promise<ResultOfBatchResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultOfBatchResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultOfBatchResponse>(null as any);
    }

    /**
     * @return OK
     */
    deleteElement1d(modelId: string, id: number): Promise<ResultOfModelEntityResponse> {
        let url_ = this.baseUrl + "/api/models/{modelId}/element1ds/{id}";
        if (modelId === undefined || modelId === null)
            throw new Error("The parameter 'modelId' must be defined.");
        url_ = url_.replace("{modelId}", encodeURIComponent("" + modelId));
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteElement1d(_response);
        });
    }

    protected processDeleteElement1d(response: Response): Promise<ResultOfModelEntityResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultOfModelEntityResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultOfModelEntityResponse>(null as any);
    }

    /**
     * @return OK
     */
    getElement1d(modelId: string, id: number): Promise<ResultOfElement1dResponse> {
        let url_ = this.baseUrl + "/api/models/{modelId}/element1ds/{id}";
        if (modelId === undefined || modelId === null)
            throw new Error("The parameter 'modelId' must be defined.");
        url_ = url_.replace("{modelId}", encodeURIComponent("" + modelId));
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetElement1d(_response);
        });
    }

    protected processGetElement1d(response: Response): Promise<ResultOfElement1dResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultOfElement1dResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultOfElement1dResponse>(null as any);
    }

    /**
     * @return OK
     */
    putElement1d(id: number, modelId: string, body: Element1dData): Promise<ResultOfElement1dResponse> {
        let url_ = this.baseUrl + "/api/models/{modelId}/element1ds/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (modelId === undefined || modelId === null)
            throw new Error("The parameter 'modelId' must be defined.");
        url_ = url_.replace("{modelId}", encodeURIComponent("" + modelId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPutElement1d(_response);
        });
    }

    protected processPutElement1d(response: Response): Promise<ResultOfElement1dResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultOfElement1dResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultOfElement1dResponse>(null as any);
    }

    /**
     * @param unitsOverride (optional) 
     * @return OK
     */
    runOpenSeesAnalysis(modelId: string, unitsOverride: string | undefined): Promise<ResultOfAnalyticalResultsResponse> {
        let url_ = this.baseUrl + "/api/models/{modelId}/analyze/opensees?";
        if (modelId === undefined || modelId === null)
            throw new Error("The parameter 'modelId' must be defined.");
        url_ = url_.replace("{modelId}", encodeURIComponent("" + modelId));
        if (unitsOverride === null)
            throw new Error("The parameter 'unitsOverride' cannot be null.");
        else if (unitsOverride !== undefined)
            url_ += "UnitsOverride=" + encodeURIComponent("" + unitsOverride) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRunOpenSeesAnalysis(_response);
        });
    }

    protected processRunOpenSeesAnalysis(response: Response): Promise<ResultOfAnalyticalResultsResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultOfAnalyticalResultsResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultOfAnalyticalResultsResponse>(null as any);
    }

    /**
     * @param unitsOverride (optional) 
     * @return OK
     */
    runDirectStiffnessMethod(modelId: string, unitsOverride: string | undefined): Promise<ResultOfAnalyticalResultsResponse> {
        let url_ = this.baseUrl + "/api/models/{modelId}/analyze/dsm?";
        if (modelId === undefined || modelId === null)
            throw new Error("The parameter 'modelId' must be defined.");
        url_ = url_.replace("{modelId}", encodeURIComponent("" + modelId));
        if (unitsOverride === null)
            throw new Error("The parameter 'unitsOverride' cannot be null.");
        else if (unitsOverride !== undefined)
            url_ += "UnitsOverride=" + encodeURIComponent("" + unitsOverride) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRunDirectStiffnessMethod(_response);
        });
    }

    protected processRunDirectStiffnessMethod(response: Response): Promise<ResultOfAnalyticalResultsResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultOfAnalyticalResultsResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultOfAnalyticalResultsResponse>(null as any);
    }

    /**
     * @return OK
     */
    deleteAllResultSets(modelId: string): Promise<ResultOfint> {
        let url_ = this.baseUrl + "/api/models/{modelId}/result-sets";
        if (modelId === undefined || modelId === null)
            throw new Error("The parameter 'modelId' must be defined.");
        url_ = url_.replace("{modelId}", encodeURIComponent("" + modelId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteAllResultSets(_response);
        });
    }

    protected processDeleteAllResultSets(response: Response): Promise<ResultOfint> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultOfint.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultOfint>(null as any);
    }

    /**
     * @param unitsOverride (optional) 
     * @return OK
     */
    getDiagrams(modelId: string, id: number, unitsOverride: string | undefined): Promise<ResultOfAnalyticalResultsResponse> {
        let url_ = this.baseUrl + "/api/models/{modelId}/result-sets/{id}/diagrams?";
        if (modelId === undefined || modelId === null)
            throw new Error("The parameter 'modelId' must be defined.");
        url_ = url_.replace("{modelId}", encodeURIComponent("" + modelId));
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (unitsOverride === null)
            throw new Error("The parameter 'unitsOverride' cannot be null.");
        else if (unitsOverride !== undefined)
            url_ += "UnitsOverride=" + encodeURIComponent("" + unitsOverride) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetDiagrams(_response);
        });
    }

    protected processGetDiagrams(response: Response): Promise<ResultOfAnalyticalResultsResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultOfAnalyticalResultsResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultOfAnalyticalResultsResponse>(null as any);
    }

    /**
     * @return OK
     */
    getNodeResult(modelId: string, resultSetId: number, id: number): Promise<ResultOfNodeResultResponse> {
        let url_ = this.baseUrl + "/api/models/{modelId}/result-sets/{resultSetId}/node-results/{id}";
        if (modelId === undefined || modelId === null)
            throw new Error("The parameter 'modelId' must be defined.");
        url_ = url_.replace("{modelId}", encodeURIComponent("" + modelId));
        if (resultSetId === undefined || resultSetId === null)
            throw new Error("The parameter 'resultSetId' must be defined.");
        url_ = url_.replace("{resultSetId}", encodeURIComponent("" + resultSetId));
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetNodeResult(_response);
        });
    }

    protected processGetNodeResult(response: Response): Promise<ResultOfNodeResultResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultOfNodeResultResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultOfNodeResultResponse>(null as any);
    }

    /**
     * @return OK
     */
    getResultSet(modelId: string, id: number): Promise<ResultOfResultSetResponse> {
        let url_ = this.baseUrl + "/api/models/{modelId}/result-sets/{id}";
        if (modelId === undefined || modelId === null)
            throw new Error("The parameter 'modelId' must be defined.");
        url_ = url_.replace("{modelId}", encodeURIComponent("" + modelId));
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetResultSet(_response);
        });
    }

    protected processGetResultSet(response: Response): Promise<ResultOfResultSetResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultOfResultSetResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultOfResultSetResponse>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    convertToBeamOs(body: SpeckleReceiveParameters | undefined): Promise<ResultOfBeamOsModelBuilderDto> {
        let url_ = this.baseUrl + "/api/speckle-receive";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processConvertToBeamOs(_response);
        });
    }

    protected processConvertToBeamOs(response: Response): Promise<ResultOfBeamOsModelBuilderDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultOfBeamOsModelBuilderDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultOfBeamOsModelBuilderDto>(null as any);
    }
}

export class AnalysisSettings implements IAnalysisSettings {
    element1DAnalysisType?: Element1dAnalysisType;

    [key: string]: any;

    constructor(data?: IAnalysisSettings) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.element1DAnalysisType = _data["element1DAnalysisType"];
        }
    }

    static fromJS(data: any): AnalysisSettings {
        data = typeof data === 'object' ? data : {};
        let result = new AnalysisSettings();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["element1DAnalysisType"] = this.element1DAnalysisType;
        return data;
    }
}

export interface IAnalysisSettings {
    element1DAnalysisType?: Element1dAnalysisType;

    [key: string]: any;
}

export class AnalyticalResultsResponse implements IAnalyticalResultsResponse {
    shearDiagrams?: ShearDiagramResponse[];
    momentDiagrams?: MomentDiagramResponse[];
    deflectionDiagrams?: DeflectionDiagramResponse[];
    globalStresses?: GlobalStresses;
    id!: number;
    modelId!: string;

    [key: string]: any;

    constructor(data?: IAnalyticalResultsResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            if (Array.isArray(_data["shearDiagrams"])) {
                this.shearDiagrams = [] as any;
                for (let item of _data["shearDiagrams"])
                    this.shearDiagrams!.push(ShearDiagramResponse.fromJS(item));
            }
            if (Array.isArray(_data["momentDiagrams"])) {
                this.momentDiagrams = [] as any;
                for (let item of _data["momentDiagrams"])
                    this.momentDiagrams!.push(MomentDiagramResponse.fromJS(item));
            }
            if (Array.isArray(_data["deflectionDiagrams"])) {
                this.deflectionDiagrams = [] as any;
                for (let item of _data["deflectionDiagrams"])
                    this.deflectionDiagrams!.push(DeflectionDiagramResponse.fromJS(item));
            }
            this.globalStresses = _data["globalStresses"] ? GlobalStresses.fromJS(_data["globalStresses"]) : <any>undefined;
            this.id = _data["id"];
            this.modelId = _data["modelId"];
        }
    }

    static fromJS(data: any): AnalyticalResultsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new AnalyticalResultsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        if (Array.isArray(this.shearDiagrams)) {
            data["shearDiagrams"] = [];
            for (let item of this.shearDiagrams)
                data["shearDiagrams"].push(item.toJSON());
        }
        if (Array.isArray(this.momentDiagrams)) {
            data["momentDiagrams"] = [];
            for (let item of this.momentDiagrams)
                data["momentDiagrams"].push(item.toJSON());
        }
        if (Array.isArray(this.deflectionDiagrams)) {
            data["deflectionDiagrams"] = [];
            for (let item of this.deflectionDiagrams)
                data["deflectionDiagrams"].push(item.toJSON());
        }
        data["globalStresses"] = this.globalStresses ? this.globalStresses.toJSON() : <any>undefined;
        data["id"] = this.id;
        data["modelId"] = this.modelId;
        return data;
    }
}

export interface IAnalyticalResultsResponse {
    shearDiagrams?: ShearDiagramResponse[];
    momentDiagrams?: MomentDiagramResponse[];
    deflectionDiagrams?: DeflectionDiagramResponse[];
    globalStresses?: GlobalStresses;
    id: number;
    modelId: string;

    [key: string]: any;
}

export class Angle implements IAngle {
    value!: number;
    unit!: AngleUnit;

    [key: string]: any;

    constructor(data?: IAngle) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.value = _data["value"];
            this.unit = _data["unit"];
        }
    }

    static fromJS(data: any): Angle {
        data = typeof data === 'object' ? data : {};
        let result = new Angle();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["value"] = this.value;
        data["unit"] = this.unit;
        return data;
    }
}

export interface IAngle {
    value: number;
    unit: AngleUnit;

    [key: string]: any;
}

export enum AngleUnit {
    Undefined = "Undefined",
    Degree = "Degree",
    Radian = "Radian",
}

export enum AreaMomentOfInertiaUnit {
    Undefined = "Undefined",
    CentimeterToTheFourth = "CentimeterToTheFourth",
    FootToTheFourth = "FootToTheFourth",
    InchToTheFourth = "InchToTheFourth",
    MeterToTheFourth = "MeterToTheFourth",
    MillimeterToTheFourth = "MillimeterToTheFourth",
}

export enum AreaUnit {
    Undefined = "Undefined",
    SquareCentimeter = "SquareCentimeter",
    SquareFoot = "SquareFoot",
    SquareInch = "SquareInch",
    SquareMeter = "SquareMeter",
    SquareMillimeter = "SquareMillimeter",
}

export class BatchResponse implements IBatchResponse {
    created?: number;
    updated?: number;
    deleted?: number;
    errors?: number;
    entityStatuses?: EntityStatus[];

    [key: string]: any;

    constructor(data?: IBatchResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.created = _data["created"];
            this.updated = _data["updated"];
            this.deleted = _data["deleted"];
            this.errors = _data["errors"];
            if (Array.isArray(_data["entityStatuses"])) {
                this.entityStatuses = [] as any;
                for (let item of _data["entityStatuses"])
                    this.entityStatuses!.push(EntityStatus.fromJS(item));
            }
        }
    }

    static fromJS(data: any): BatchResponse {
        data = typeof data === 'object' ? data : {};
        let result = new BatchResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["created"] = this.created;
        data["updated"] = this.updated;
        data["deleted"] = this.deleted;
        data["errors"] = this.errors;
        if (Array.isArray(this.entityStatuses)) {
            data["entityStatuses"] = [];
            for (let item of this.entityStatuses)
                data["entityStatuses"].push(item.toJSON());
        }
        return data;
    }
}

export interface IBatchResponse {
    created?: number;
    updated?: number;
    deleted?: number;
    errors?: number;
    entityStatuses?: EntityStatus[];

    [key: string]: any;
}

export class BeamOsError implements IBeamOsError {
    code!: string;
    description!: string;
    type!: ErrorType;
    numericType?: number;
    metadata!: { [key: string]: string; } | undefined;

    [key: string]: any;

    constructor(data?: IBeamOsError) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.code = _data["code"];
            this.description = _data["description"];
            this.type = _data["type"];
            this.numericType = _data["numericType"];
            if (_data["metadata"]) {
                this.metadata = {} as any;
                for (let key in _data["metadata"]) {
                    if (_data["metadata"].hasOwnProperty(key))
                        (<any>this.metadata)![key] = _data["metadata"][key];
                }
            }
        }
    }

    static fromJS(data: any): BeamOsError {
        data = typeof data === 'object' ? data : {};
        let result = new BeamOsError();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["code"] = this.code;
        data["description"] = this.description;
        data["type"] = this.type;
        data["numericType"] = this.numericType;
        if (this.metadata) {
            data["metadata"] = {};
            for (let key in this.metadata) {
                if (this.metadata.hasOwnProperty(key))
                    (<any>data["metadata"])[key] = (<any>this.metadata)[key];
            }
        }
        return data;
    }
}

export interface IBeamOsError {
    code: string;
    description: string;
    type: ErrorType;
    numericType?: number;
    metadata: { [key: string]: string; } | undefined;

    [key: string]: any;
}

export class BeamOsModelBuilderDto implements IBeamOsModelBuilderDto {
    name?: string;
    description?: string;
    settings?: ModelSettings;
    guidString?: string;
    nodes?: PutNodeRequest[];
    materials?: PutMaterialRequest[];
    sectionProfiles?: PutSectionProfileRequest[];
    element1ds?: PutElement1dRequest[];
    pointLoads?: PutPointLoadRequest[];
    momentLoads?: PutMomentLoadRequest[];

    [key: string]: any;

    constructor(data?: IBeamOsModelBuilderDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.name = _data["name"];
            this.description = _data["description"];
            this.settings = _data["settings"] ? ModelSettings.fromJS(_data["settings"]) : <any>undefined;
            this.guidString = _data["guidString"];
            if (Array.isArray(_data["nodes"])) {
                this.nodes = [] as any;
                for (let item of _data["nodes"])
                    this.nodes!.push(PutNodeRequest.fromJS(item));
            }
            if (Array.isArray(_data["materials"])) {
                this.materials = [] as any;
                for (let item of _data["materials"])
                    this.materials!.push(PutMaterialRequest.fromJS(item));
            }
            if (Array.isArray(_data["sectionProfiles"])) {
                this.sectionProfiles = [] as any;
                for (let item of _data["sectionProfiles"])
                    this.sectionProfiles!.push(PutSectionProfileRequest.fromJS(item));
            }
            if (Array.isArray(_data["element1ds"])) {
                this.element1ds = [] as any;
                for (let item of _data["element1ds"])
                    this.element1ds!.push(PutElement1dRequest.fromJS(item));
            }
            if (Array.isArray(_data["pointLoads"])) {
                this.pointLoads = [] as any;
                for (let item of _data["pointLoads"])
                    this.pointLoads!.push(PutPointLoadRequest.fromJS(item));
            }
            if (Array.isArray(_data["momentLoads"])) {
                this.momentLoads = [] as any;
                for (let item of _data["momentLoads"])
                    this.momentLoads!.push(PutMomentLoadRequest.fromJS(item));
            }
        }
    }

    static fromJS(data: any): BeamOsModelBuilderDto {
        data = typeof data === 'object' ? data : {};
        let result = new BeamOsModelBuilderDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["name"] = this.name;
        data["description"] = this.description;
        data["settings"] = this.settings ? this.settings.toJSON() : <any>undefined;
        data["guidString"] = this.guidString;
        if (Array.isArray(this.nodes)) {
            data["nodes"] = [];
            for (let item of this.nodes)
                data["nodes"].push(item.toJSON());
        }
        if (Array.isArray(this.materials)) {
            data["materials"] = [];
            for (let item of this.materials)
                data["materials"].push(item.toJSON());
        }
        if (Array.isArray(this.sectionProfiles)) {
            data["sectionProfiles"] = [];
            for (let item of this.sectionProfiles)
                data["sectionProfiles"].push(item.toJSON());
        }
        if (Array.isArray(this.element1ds)) {
            data["element1ds"] = [];
            for (let item of this.element1ds)
                data["element1ds"].push(item.toJSON());
        }
        if (Array.isArray(this.pointLoads)) {
            data["pointLoads"] = [];
            for (let item of this.pointLoads)
                data["pointLoads"].push(item.toJSON());
        }
        if (Array.isArray(this.momentLoads)) {
            data["momentLoads"] = [];
            for (let item of this.momentLoads)
                data["momentLoads"].push(item.toJSON());
        }
        return data;
    }
}

export interface IBeamOsModelBuilderDto {
    name?: string;
    description?: string;
    settings?: ModelSettings;
    guidString?: string;
    nodes?: PutNodeRequest[];
    materials?: PutMaterialRequest[];
    sectionProfiles?: PutSectionProfileRequest[];
    element1ds?: PutElement1dRequest[];
    pointLoads?: PutPointLoadRequest[];
    momentLoads?: PutMomentLoadRequest[];

    [key: string]: any;
}

export class CreateElement1dRequest implements ICreateElement1dRequest {
    startNodeId!: number;
    endNodeId!: number;
    materialId!: number;
    sectionProfileId!: number;
    sectionProfileRotation?: NullableOfAngle | undefined;
    id?: number | undefined;
    metadata?: { [key: string]: string; } | undefined;

    [key: string]: any;

    constructor(data?: ICreateElement1dRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.startNodeId = _data["startNodeId"];
            this.endNodeId = _data["endNodeId"];
            this.materialId = _data["materialId"];
            this.sectionProfileId = _data["sectionProfileId"];
            this.sectionProfileRotation = _data["sectionProfileRotation"] ? NullableOfAngle.fromJS(_data["sectionProfileRotation"]) : <any>undefined;
            this.id = _data["id"];
            if (_data["metadata"]) {
                this.metadata = {} as any;
                for (let key in _data["metadata"]) {
                    if (_data["metadata"].hasOwnProperty(key))
                        (<any>this.metadata)![key] = _data["metadata"][key];
                }
            }
        }
    }

    static fromJS(data: any): CreateElement1dRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CreateElement1dRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["startNodeId"] = this.startNodeId;
        data["endNodeId"] = this.endNodeId;
        data["materialId"] = this.materialId;
        data["sectionProfileId"] = this.sectionProfileId;
        data["sectionProfileRotation"] = this.sectionProfileRotation ? this.sectionProfileRotation.toJSON() : <any>undefined;
        data["id"] = this.id;
        if (this.metadata) {
            data["metadata"] = {};
            for (let key in this.metadata) {
                if (this.metadata.hasOwnProperty(key))
                    (<any>data["metadata"])[key] = (<any>this.metadata)[key];
            }
        }
        return data;
    }
}

export interface ICreateElement1dRequest {
    startNodeId: number;
    endNodeId: number;
    materialId: number;
    sectionProfileId: number;
    sectionProfileRotation?: NullableOfAngle | undefined;
    id?: number | undefined;
    metadata?: { [key: string]: string; } | undefined;

    [key: string]: any;
}

export class CreateMaterialRequest implements ICreateMaterialRequest {
    id?: number | undefined;
    modulusOfElasticity!: number;
    modulusOfRigidity!: number;
    pressureUnit!: PressureUnit;

    [key: string]: any;

    constructor(data?: ICreateMaterialRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.modulusOfElasticity = _data["modulusOfElasticity"];
            this.modulusOfRigidity = _data["modulusOfRigidity"];
            this.pressureUnit = _data["pressureUnit"];
        }
    }

    static fromJS(data: any): CreateMaterialRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CreateMaterialRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["modulusOfElasticity"] = this.modulusOfElasticity;
        data["modulusOfRigidity"] = this.modulusOfRigidity;
        data["pressureUnit"] = this.pressureUnit;
        return data;
    }
}

export interface ICreateMaterialRequest {
    id?: number | undefined;
    modulusOfElasticity: number;
    modulusOfRigidity: number;
    pressureUnit: PressureUnit;

    [key: string]: any;
}

export class CreateModelRequest implements ICreateModelRequest {
    name!: string;
    description!: string;
    settings!: ModelSettings;
    id?: string | undefined;

    [key: string]: any;

    constructor(data?: ICreateModelRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.settings = new ModelSettings();
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.name = _data["name"];
            this.description = _data["description"];
            this.settings = _data["settings"] ? ModelSettings.fromJS(_data["settings"]) : new ModelSettings();
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): CreateModelRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CreateModelRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["name"] = this.name;
        data["description"] = this.description;
        data["settings"] = this.settings ? this.settings.toJSON() : <any>undefined;
        data["id"] = this.id;
        return data;
    }
}

export interface ICreateModelRequest {
    name: string;
    description: string;
    settings: ModelSettings;
    id?: string | undefined;

    [key: string]: any;
}

export class CreateMomentLoadRequest implements ICreateMomentLoadRequest {
    nodeId!: number;
    torque!: Torque;
    axisDirection!: Vector3;
    id?: number | undefined;

    [key: string]: any;

    constructor(data?: ICreateMomentLoadRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.torque = new Torque();
            this.axisDirection = new Vector3();
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.nodeId = _data["nodeId"];
            this.torque = _data["torque"] ? Torque.fromJS(_data["torque"]) : new Torque();
            this.axisDirection = _data["axisDirection"] ? Vector3.fromJS(_data["axisDirection"]) : new Vector3();
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): CreateMomentLoadRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CreateMomentLoadRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["nodeId"] = this.nodeId;
        data["torque"] = this.torque ? this.torque.toJSON() : <any>undefined;
        data["axisDirection"] = this.axisDirection ? this.axisDirection.toJSON() : <any>undefined;
        data["id"] = this.id;
        return data;
    }
}

export interface ICreateMomentLoadRequest {
    nodeId: number;
    torque: Torque;
    axisDirection: Vector3;
    id?: number | undefined;

    [key: string]: any;
}

export class CreateNodeRequest implements ICreateNodeRequest {
    id?: number | undefined;
    locationPoint!: Point;
    restraint!: Restraint;
    metadata?: { [key: string]: string; } | undefined;

    [key: string]: any;

    constructor(data?: ICreateNodeRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.locationPoint = new Point();
            this.restraint = new Restraint();
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.locationPoint = _data["locationPoint"] ? Point.fromJS(_data["locationPoint"]) : new Point();
            this.restraint = _data["restraint"] ? Restraint.fromJS(_data["restraint"]) : new Restraint();
            if (_data["metadata"]) {
                this.metadata = {} as any;
                for (let key in _data["metadata"]) {
                    if (_data["metadata"].hasOwnProperty(key))
                        (<any>this.metadata)![key] = _data["metadata"][key];
                }
            }
        }
    }

    static fromJS(data: any): CreateNodeRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CreateNodeRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["locationPoint"] = this.locationPoint ? this.locationPoint.toJSON() : <any>undefined;
        data["restraint"] = this.restraint ? this.restraint.toJSON() : <any>undefined;
        if (this.metadata) {
            data["metadata"] = {};
            for (let key in this.metadata) {
                if (this.metadata.hasOwnProperty(key))
                    (<any>data["metadata"])[key] = (<any>this.metadata)[key];
            }
        }
        return data;
    }
}

export interface ICreateNodeRequest {
    id?: number | undefined;
    locationPoint: Point;
    restraint: Restraint;
    metadata?: { [key: string]: string; } | undefined;

    [key: string]: any;
}

export class CreatePointLoadRequest implements ICreatePointLoadRequest {
    nodeId!: number;
    force!: Force;
    direction!: Vector3;
    id?: number | undefined;

    [key: string]: any;

    constructor(data?: ICreatePointLoadRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.force = new Force();
            this.direction = new Vector3();
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.nodeId = _data["nodeId"];
            this.force = _data["force"] ? Force.fromJS(_data["force"]) : new Force();
            this.direction = _data["direction"] ? Vector3.fromJS(_data["direction"]) : new Vector3();
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): CreatePointLoadRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CreatePointLoadRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["nodeId"] = this.nodeId;
        data["force"] = this.force ? this.force.toJSON() : <any>undefined;
        data["direction"] = this.direction ? this.direction.toJSON() : <any>undefined;
        data["id"] = this.id;
        return data;
    }
}

export interface ICreatePointLoadRequest {
    nodeId: number;
    force: Force;
    direction: Vector3;
    id?: number | undefined;

    [key: string]: any;
}

export class CreateSectionProfileRequest implements ICreateSectionProfileRequest {
    id?: number | undefined;
    area!: number;
    strongAxisMomentOfInertia!: number;
    weakAxisMomentOfInertia!: number;
    polarMomentOfInertia!: number;
    strongAxisShearArea!: number;
    weakAxisShearArea!: number;
    areaUnit?: AreaUnit;
    areaMomentOfInertiaUnit?: AreaMomentOfInertiaUnit;

    [key: string]: any;

    constructor(data?: ICreateSectionProfileRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.area = _data["area"];
            this.strongAxisMomentOfInertia = _data["strongAxisMomentOfInertia"];
            this.weakAxisMomentOfInertia = _data["weakAxisMomentOfInertia"];
            this.polarMomentOfInertia = _data["polarMomentOfInertia"];
            this.strongAxisShearArea = _data["strongAxisShearArea"];
            this.weakAxisShearArea = _data["weakAxisShearArea"];
            this.areaUnit = _data["areaUnit"];
            this.areaMomentOfInertiaUnit = _data["areaMomentOfInertiaUnit"];
        }
    }

    static fromJS(data: any): CreateSectionProfileRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CreateSectionProfileRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["area"] = this.area;
        data["strongAxisMomentOfInertia"] = this.strongAxisMomentOfInertia;
        data["weakAxisMomentOfInertia"] = this.weakAxisMomentOfInertia;
        data["polarMomentOfInertia"] = this.polarMomentOfInertia;
        data["strongAxisShearArea"] = this.strongAxisShearArea;
        data["weakAxisShearArea"] = this.weakAxisShearArea;
        data["areaUnit"] = this.areaUnit;
        data["areaMomentOfInertiaUnit"] = this.areaMomentOfInertiaUnit;
        return data;
    }
}

export interface ICreateSectionProfileRequest {
    id?: number | undefined;
    area: number;
    strongAxisMomentOfInertia: number;
    weakAxisMomentOfInertia: number;
    polarMomentOfInertia: number;
    strongAxisShearArea: number;
    weakAxisShearArea: number;
    areaUnit?: AreaUnit;
    areaMomentOfInertiaUnit?: AreaMomentOfInertiaUnit;

    [key: string]: any;
}

export class DeflectionDiagramResponse implements IDeflectionDiagramResponse {
    element1dId!: number;
    numSteps!: number;
    offsets!: number[];

    [key: string]: any;

    constructor(data?: IDeflectionDiagramResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.offsets = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.element1dId = _data["element1dId"];
            this.numSteps = _data["numSteps"];
            if (Array.isArray(_data["offsets"])) {
                this.offsets = [] as any;
                for (let item of _data["offsets"])
                    this.offsets!.push(item);
            }
        }
    }

    static fromJS(data: any): DeflectionDiagramResponse {
        data = typeof data === 'object' ? data : {};
        let result = new DeflectionDiagramResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["element1dId"] = this.element1dId;
        data["numSteps"] = this.numSteps;
        if (Array.isArray(this.offsets)) {
            data["offsets"] = [];
            for (let item of this.offsets)
                data["offsets"].push(item);
        }
        return data;
    }
}

export interface IDeflectionDiagramResponse {
    element1dId: number;
    numSteps: number;
    offsets: number[];

    [key: string]: any;
}

export class DiagramConsistentIntervalResponse implements IDiagramConsistentIntervalResponse {
    startLocation!: Length;
    endLocation!: Length;
    polynomialCoefficients!: number[];

    [key: string]: any;

    constructor(data?: IDiagramConsistentIntervalResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.startLocation = new Length();
            this.endLocation = new Length();
            this.polynomialCoefficients = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.startLocation = _data["startLocation"] ? Length.fromJS(_data["startLocation"]) : new Length();
            this.endLocation = _data["endLocation"] ? Length.fromJS(_data["endLocation"]) : new Length();
            if (Array.isArray(_data["polynomialCoefficients"])) {
                this.polynomialCoefficients = [] as any;
                for (let item of _data["polynomialCoefficients"])
                    this.polynomialCoefficients!.push(item);
            }
        }
    }

    static fromJS(data: any): DiagramConsistentIntervalResponse {
        data = typeof data === 'object' ? data : {};
        let result = new DiagramConsistentIntervalResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["startLocation"] = this.startLocation ? this.startLocation.toJSON() : <any>undefined;
        data["endLocation"] = this.endLocation ? this.endLocation.toJSON() : <any>undefined;
        if (Array.isArray(this.polynomialCoefficients)) {
            data["polynomialCoefficients"] = [];
            for (let item of this.polynomialCoefficients)
                data["polynomialCoefficients"].push(item);
        }
        return data;
    }
}

export interface IDiagramConsistentIntervalResponse {
    startLocation: Length;
    endLocation: Length;
    polynomialCoefficients: number[];

    [key: string]: any;
}

export class DiagramConsistentIntervalResponse2 implements IDiagramConsistentIntervalResponse2 {
    startLocation!: Length;
    endLocation!: Length;
    polynomialCoefficients!: number[];

    [key: string]: any;

    constructor(data?: IDiagramConsistentIntervalResponse2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.startLocation = new Length();
            this.endLocation = new Length();
            this.polynomialCoefficients = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.startLocation = _data["startLocation"] ? Length.fromJS(_data["startLocation"]) : new Length();
            this.endLocation = _data["endLocation"] ? Length.fromJS(_data["endLocation"]) : new Length();
            if (Array.isArray(_data["polynomialCoefficients"])) {
                this.polynomialCoefficients = [] as any;
                for (let item of _data["polynomialCoefficients"])
                    this.polynomialCoefficients!.push(item);
            }
        }
    }

    static fromJS(data: any): DiagramConsistentIntervalResponse2 {
        data = typeof data === 'object' ? data : {};
        let result = new DiagramConsistentIntervalResponse2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["startLocation"] = this.startLocation ? this.startLocation.toJSON() : <any>undefined;
        data["endLocation"] = this.endLocation ? this.endLocation.toJSON() : <any>undefined;
        if (Array.isArray(this.polynomialCoefficients)) {
            data["polynomialCoefficients"] = [];
            for (let item of this.polynomialCoefficients)
                data["polynomialCoefficients"].push(item);
        }
        return data;
    }
}

export interface IDiagramConsistentIntervalResponse2 {
    startLocation: Length;
    endLocation: Length;
    polynomialCoefficients: number[];

    [key: string]: any;
}

export class DisplacementsResponse implements IDisplacementsResponse {
    displacementAlongX!: Length;
    displacementAlongY!: Length;
    displacementAlongZ!: Length;
    rotationAboutX!: Angle;
    rotationAboutY!: Angle;
    rotationAboutZ!: Angle;

    [key: string]: any;

    constructor(data?: IDisplacementsResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.displacementAlongX = new Length();
            this.displacementAlongY = new Length();
            this.displacementAlongZ = new Length();
            this.rotationAboutX = new Angle();
            this.rotationAboutY = new Angle();
            this.rotationAboutZ = new Angle();
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.displacementAlongX = _data["displacementAlongX"] ? Length.fromJS(_data["displacementAlongX"]) : new Length();
            this.displacementAlongY = _data["displacementAlongY"] ? Length.fromJS(_data["displacementAlongY"]) : new Length();
            this.displacementAlongZ = _data["displacementAlongZ"] ? Length.fromJS(_data["displacementAlongZ"]) : new Length();
            this.rotationAboutX = _data["rotationAboutX"] ? Angle.fromJS(_data["rotationAboutX"]) : new Angle();
            this.rotationAboutY = _data["rotationAboutY"] ? Angle.fromJS(_data["rotationAboutY"]) : new Angle();
            this.rotationAboutZ = _data["rotationAboutZ"] ? Angle.fromJS(_data["rotationAboutZ"]) : new Angle();
        }
    }

    static fromJS(data: any): DisplacementsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new DisplacementsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["displacementAlongX"] = this.displacementAlongX ? this.displacementAlongX.toJSON() : <any>undefined;
        data["displacementAlongY"] = this.displacementAlongY ? this.displacementAlongY.toJSON() : <any>undefined;
        data["displacementAlongZ"] = this.displacementAlongZ ? this.displacementAlongZ.toJSON() : <any>undefined;
        data["rotationAboutX"] = this.rotationAboutX ? this.rotationAboutX.toJSON() : <any>undefined;
        data["rotationAboutY"] = this.rotationAboutY ? this.rotationAboutY.toJSON() : <any>undefined;
        data["rotationAboutZ"] = this.rotationAboutZ ? this.rotationAboutZ.toJSON() : <any>undefined;
        return data;
    }
}

export interface IDisplacementsResponse {
    displacementAlongX: Length;
    displacementAlongY: Length;
    displacementAlongZ: Length;
    rotationAboutX: Angle;
    rotationAboutY: Angle;
    rotationAboutZ: Angle;

    [key: string]: any;
}

export enum Element1dAnalysisType {
    Undefined = "Undefined",
    Euler = "Euler",
    Timoshenko = "Timoshenko",
}

export class Element1dData implements IElement1dData {
    startNodeId!: number;
    endNodeId!: number;
    materialId!: number;
    sectionProfileId!: number;
    sectionProfileRotation?: NullableOfAngle | undefined;
    metadata?: { [key: string]: string; } | undefined;

    [key: string]: any;

    constructor(data?: IElement1dData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.startNodeId = _data["startNodeId"];
            this.endNodeId = _data["endNodeId"];
            this.materialId = _data["materialId"];
            this.sectionProfileId = _data["sectionProfileId"];
            this.sectionProfileRotation = _data["sectionProfileRotation"] ? NullableOfAngle.fromJS(_data["sectionProfileRotation"]) : <any>undefined;
            if (_data["metadata"]) {
                this.metadata = {} as any;
                for (let key in _data["metadata"]) {
                    if (_data["metadata"].hasOwnProperty(key))
                        (<any>this.metadata)![key] = _data["metadata"][key];
                }
            }
        }
    }

    static fromJS(data: any): Element1dData {
        data = typeof data === 'object' ? data : {};
        let result = new Element1dData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["startNodeId"] = this.startNodeId;
        data["endNodeId"] = this.endNodeId;
        data["materialId"] = this.materialId;
        data["sectionProfileId"] = this.sectionProfileId;
        data["sectionProfileRotation"] = this.sectionProfileRotation ? this.sectionProfileRotation.toJSON() : <any>undefined;
        if (this.metadata) {
            data["metadata"] = {};
            for (let key in this.metadata) {
                if (this.metadata.hasOwnProperty(key))
                    (<any>data["metadata"])[key] = (<any>this.metadata)[key];
            }
        }
        return data;
    }
}

export interface IElement1dData {
    startNodeId: number;
    endNodeId: number;
    materialId: number;
    sectionProfileId: number;
    sectionProfileRotation?: NullableOfAngle | undefined;
    metadata?: { [key: string]: string; } | undefined;

    [key: string]: any;
}

export class Element1dResponse implements IElement1dResponse {
    id!: number;
    modelId!: string;
    startNodeId!: number;
    endNodeId!: number;
    materialId!: number;
    sectionProfileId!: number;
    sectionProfileRotation!: Angle;
    metadata?: { [key: string]: string; } | undefined;

    [key: string]: any;

    constructor(data?: IElement1dResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.sectionProfileRotation = new Angle();
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.modelId = _data["modelId"];
            this.startNodeId = _data["startNodeId"];
            this.endNodeId = _data["endNodeId"];
            this.materialId = _data["materialId"];
            this.sectionProfileId = _data["sectionProfileId"];
            this.sectionProfileRotation = _data["sectionProfileRotation"] ? Angle.fromJS(_data["sectionProfileRotation"]) : new Angle();
            if (_data["metadata"]) {
                this.metadata = {} as any;
                for (let key in _data["metadata"]) {
                    if (_data["metadata"].hasOwnProperty(key))
                        (<any>this.metadata)![key] = _data["metadata"][key];
                }
            }
        }
    }

    static fromJS(data: any): Element1dResponse {
        data = typeof data === 'object' ? data : {};
        let result = new Element1dResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["modelId"] = this.modelId;
        data["startNodeId"] = this.startNodeId;
        data["endNodeId"] = this.endNodeId;
        data["materialId"] = this.materialId;
        data["sectionProfileId"] = this.sectionProfileId;
        data["sectionProfileRotation"] = this.sectionProfileRotation ? this.sectionProfileRotation.toJSON() : <any>undefined;
        if (this.metadata) {
            data["metadata"] = {};
            for (let key in this.metadata) {
                if (this.metadata.hasOwnProperty(key))
                    (<any>data["metadata"])[key] = (<any>this.metadata)[key];
            }
        }
        return data;
    }
}

export interface IElement1dResponse {
    id: number;
    modelId: string;
    startNodeId: number;
    endNodeId: number;
    materialId: number;
    sectionProfileId: number;
    sectionProfileRotation: Angle;
    metadata?: { [key: string]: string; } | undefined;

    [key: string]: any;
}

export class Element1dResponse2 implements IElement1dResponse2 {
    id!: number;
    modelId!: string;
    startNodeId!: number;
    endNodeId!: number;
    materialId!: number;
    sectionProfileId!: number;
    sectionProfileRotation!: Angle;
    metadata?: { [key: string]: string; } | undefined;

    [key: string]: any;

    constructor(data?: IElement1dResponse2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.sectionProfileRotation = new Angle();
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.modelId = _data["modelId"];
            this.startNodeId = _data["startNodeId"];
            this.endNodeId = _data["endNodeId"];
            this.materialId = _data["materialId"];
            this.sectionProfileId = _data["sectionProfileId"];
            this.sectionProfileRotation = _data["sectionProfileRotation"] ? Angle.fromJS(_data["sectionProfileRotation"]) : new Angle();
            if (_data["metadata"]) {
                this.metadata = {} as any;
                for (let key in _data["metadata"]) {
                    if (_data["metadata"].hasOwnProperty(key))
                        (<any>this.metadata)![key] = _data["metadata"][key];
                }
            }
        }
    }

    static fromJS(data: any): Element1dResponse2 {
        data = typeof data === 'object' ? data : {};
        let result = new Element1dResponse2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["modelId"] = this.modelId;
        data["startNodeId"] = this.startNodeId;
        data["endNodeId"] = this.endNodeId;
        data["materialId"] = this.materialId;
        data["sectionProfileId"] = this.sectionProfileId;
        data["sectionProfileRotation"] = this.sectionProfileRotation ? this.sectionProfileRotation.toJSON() : <any>undefined;
        if (this.metadata) {
            data["metadata"] = {};
            for (let key in this.metadata) {
                if (this.metadata.hasOwnProperty(key))
                    (<any>data["metadata"])[key] = (<any>this.metadata)[key];
            }
        }
        return data;
    }
}

export interface IElement1dResponse2 {
    id: number;
    modelId: string;
    startNodeId: number;
    endNodeId: number;
    materialId: number;
    sectionProfileId: number;
    sectionProfileRotation: Angle;
    metadata?: { [key: string]: string; } | undefined;

    [key: string]: any;
}

export class Element1dResultResponse implements IElement1dResultResponse {
    modelId!: string;
    resultSetId!: number;
    element1dId!: number;
    minShear!: Length;
    maxShear!: Length;
    minMoment!: Torque;
    maxMoment!: Torque;
    minDisplacement!: Length;
    maxDisplacement!: Length;

    [key: string]: any;

    constructor(data?: IElement1dResultResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.minShear = new Length();
            this.maxShear = new Length();
            this.minMoment = new Torque();
            this.maxMoment = new Torque();
            this.minDisplacement = new Length();
            this.maxDisplacement = new Length();
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.modelId = _data["modelId"];
            this.resultSetId = _data["resultSetId"];
            this.element1dId = _data["element1dId"];
            this.minShear = _data["minShear"] ? Length.fromJS(_data["minShear"]) : new Length();
            this.maxShear = _data["maxShear"] ? Length.fromJS(_data["maxShear"]) : new Length();
            this.minMoment = _data["minMoment"] ? Torque.fromJS(_data["minMoment"]) : new Torque();
            this.maxMoment = _data["maxMoment"] ? Torque.fromJS(_data["maxMoment"]) : new Torque();
            this.minDisplacement = _data["minDisplacement"] ? Length.fromJS(_data["minDisplacement"]) : new Length();
            this.maxDisplacement = _data["maxDisplacement"] ? Length.fromJS(_data["maxDisplacement"]) : new Length();
        }
    }

    static fromJS(data: any): Element1dResultResponse {
        data = typeof data === 'object' ? data : {};
        let result = new Element1dResultResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["modelId"] = this.modelId;
        data["resultSetId"] = this.resultSetId;
        data["element1dId"] = this.element1dId;
        data["minShear"] = this.minShear ? this.minShear.toJSON() : <any>undefined;
        data["maxShear"] = this.maxShear ? this.maxShear.toJSON() : <any>undefined;
        data["minMoment"] = this.minMoment ? this.minMoment.toJSON() : <any>undefined;
        data["maxMoment"] = this.maxMoment ? this.maxMoment.toJSON() : <any>undefined;
        data["minDisplacement"] = this.minDisplacement ? this.minDisplacement.toJSON() : <any>undefined;
        data["maxDisplacement"] = this.maxDisplacement ? this.maxDisplacement.toJSON() : <any>undefined;
        return data;
    }
}

export interface IElement1dResultResponse {
    modelId: string;
    resultSetId: number;
    element1dId: number;
    minShear: Length;
    maxShear: Length;
    minMoment: Torque;
    maxMoment: Torque;
    minDisplacement: Length;
    maxDisplacement: Length;

    [key: string]: any;
}

export enum EntityOperationStatus {
    Undefined = "Undefined",
    Created = "Created",
    Updated = "Updated",
    Deleted = "Deleted",
    Error = "Error",
}

export class EntityStatus implements IEntityStatus {
    id!: number;
    entityOperationStatus!: EntityOperationStatus;
    errorMessage?: string;

    [key: string]: any;

    constructor(data?: IEntityStatus) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.entityOperationStatus = _data["entityOperationStatus"];
            this.errorMessage = _data["errorMessage"];
        }
    }

    static fromJS(data: any): EntityStatus {
        data = typeof data === 'object' ? data : {};
        let result = new EntityStatus();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["entityOperationStatus"] = this.entityOperationStatus;
        data["errorMessage"] = this.errorMessage;
        return data;
    }
}

export interface IEntityStatus {
    id: number;
    entityOperationStatus: EntityOperationStatus;
    errorMessage?: string;

    [key: string]: any;
}

export enum ErrorType {
    None = "None",
    Failure = "Failure",
    Unexpected = "Unexpected",
    Validation = "Validation",
    Conflict = "Conflict",
    NotFound = "NotFound",
    Unauthorized = "Unauthorized",
    Forbidden = "Forbidden",
}

export class Force implements IForce {
    value!: number;
    unit!: ForceUnit;

    [key: string]: any;

    constructor(data?: IForce) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.value = _data["value"];
            this.unit = _data["unit"];
        }
    }

    static fromJS(data: any): Force {
        data = typeof data === 'object' ? data : {};
        let result = new Force();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["value"] = this.value;
        data["unit"] = this.unit;
        return data;
    }
}

export interface IForce {
    value: number;
    unit: ForceUnit;

    [key: string]: any;
}

export class ForcesResponse implements IForcesResponse {
    forceAlongX!: Force;
    forceAlongY!: Force;
    forceAlongZ!: Force;
    momentAboutX!: Torque;
    momentAboutY!: Torque;
    momentAboutZ!: Torque;

    [key: string]: any;

    constructor(data?: IForcesResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.forceAlongX = new Force();
            this.forceAlongY = new Force();
            this.forceAlongZ = new Force();
            this.momentAboutX = new Torque();
            this.momentAboutY = new Torque();
            this.momentAboutZ = new Torque();
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.forceAlongX = _data["forceAlongX"] ? Force.fromJS(_data["forceAlongX"]) : new Force();
            this.forceAlongY = _data["forceAlongY"] ? Force.fromJS(_data["forceAlongY"]) : new Force();
            this.forceAlongZ = _data["forceAlongZ"] ? Force.fromJS(_data["forceAlongZ"]) : new Force();
            this.momentAboutX = _data["momentAboutX"] ? Torque.fromJS(_data["momentAboutX"]) : new Torque();
            this.momentAboutY = _data["momentAboutY"] ? Torque.fromJS(_data["momentAboutY"]) : new Torque();
            this.momentAboutZ = _data["momentAboutZ"] ? Torque.fromJS(_data["momentAboutZ"]) : new Torque();
        }
    }

    static fromJS(data: any): ForcesResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ForcesResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["forceAlongX"] = this.forceAlongX ? this.forceAlongX.toJSON() : <any>undefined;
        data["forceAlongY"] = this.forceAlongY ? this.forceAlongY.toJSON() : <any>undefined;
        data["forceAlongZ"] = this.forceAlongZ ? this.forceAlongZ.toJSON() : <any>undefined;
        data["momentAboutX"] = this.momentAboutX ? this.momentAboutX.toJSON() : <any>undefined;
        data["momentAboutY"] = this.momentAboutY ? this.momentAboutY.toJSON() : <any>undefined;
        data["momentAboutZ"] = this.momentAboutZ ? this.momentAboutZ.toJSON() : <any>undefined;
        return data;
    }
}

export interface IForcesResponse {
    forceAlongX: Force;
    forceAlongY: Force;
    forceAlongZ: Force;
    momentAboutX: Torque;
    momentAboutY: Torque;
    momentAboutZ: Torque;

    [key: string]: any;
}

export enum ForceUnit {
    Undefined = "Undefined",
    Kilonewton = "Kilonewton",
    KilopoundForce = "KilopoundForce",
    Newton = "Newton",
    PoundForce = "PoundForce",
}

export class GlobalStresses implements IGlobalStresses {
    maxShear!: Force;
    minShear!: Force;
    maxMoment!: Torque;
    minMoment!: Torque;

    [key: string]: any;

    constructor(data?: IGlobalStresses) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.maxShear = new Force();
            this.minShear = new Force();
            this.maxMoment = new Torque();
            this.minMoment = new Torque();
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.maxShear = _data["maxShear"] ? Force.fromJS(_data["maxShear"]) : new Force();
            this.minShear = _data["minShear"] ? Force.fromJS(_data["minShear"]) : new Force();
            this.maxMoment = _data["maxMoment"] ? Torque.fromJS(_data["maxMoment"]) : new Torque();
            this.minMoment = _data["minMoment"] ? Torque.fromJS(_data["minMoment"]) : new Torque();
        }
    }

    static fromJS(data: any): GlobalStresses {
        data = typeof data === 'object' ? data : {};
        let result = new GlobalStresses();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["maxShear"] = this.maxShear ? this.maxShear.toJSON() : <any>undefined;
        data["minShear"] = this.minShear ? this.minShear.toJSON() : <any>undefined;
        data["maxMoment"] = this.maxMoment ? this.maxMoment.toJSON() : <any>undefined;
        data["minMoment"] = this.minMoment ? this.minMoment.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGlobalStresses {
    maxShear: Force;
    minShear: Force;
    maxMoment: Torque;
    minMoment: Torque;

    [key: string]: any;
}

export class Length implements ILength {
    value!: number;
    unit!: LengthUnit;

    [key: string]: any;

    constructor(data?: ILength) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.value = _data["value"];
            this.unit = _data["unit"];
        }
    }

    static fromJS(data: any): Length {
        data = typeof data === 'object' ? data : {};
        let result = new Length();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["value"] = this.value;
        data["unit"] = this.unit;
        return data;
    }
}

export interface ILength {
    value: number;
    unit: LengthUnit;

    [key: string]: any;
}

export enum LengthUnit {
    Undefined = "Undefined",
    Centimeter = "Centimeter",
    Foot = "Foot",
    Inch = "Inch",
    Meter = "Meter",
    Millimeter = "Millimeter",
}

export class MaterialRequestData implements IMaterialRequestData {
    modulusOfElasticity!: number;
    modulusOfRigidity!: number;
    pressureUnit!: PressureUnit;

    [key: string]: any;

    constructor(data?: IMaterialRequestData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.modulusOfElasticity = _data["modulusOfElasticity"];
            this.modulusOfRigidity = _data["modulusOfRigidity"];
            this.pressureUnit = _data["pressureUnit"];
        }
    }

    static fromJS(data: any): MaterialRequestData {
        data = typeof data === 'object' ? data : {};
        let result = new MaterialRequestData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["modulusOfElasticity"] = this.modulusOfElasticity;
        data["modulusOfRigidity"] = this.modulusOfRigidity;
        data["pressureUnit"] = this.pressureUnit;
        return data;
    }
}

export interface IMaterialRequestData {
    modulusOfElasticity: number;
    modulusOfRigidity: number;
    pressureUnit: PressureUnit;

    [key: string]: any;
}

export class MaterialResponse implements IMaterialResponse {
    id!: number;
    modelId!: string;
    modulusOfElasticity!: number;
    modulusOfRigidity!: number;
    pressureUnit!: PressureUnit;

    [key: string]: any;

    constructor(data?: IMaterialResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.modelId = _data["modelId"];
            this.modulusOfElasticity = _data["modulusOfElasticity"];
            this.modulusOfRigidity = _data["modulusOfRigidity"];
            this.pressureUnit = _data["pressureUnit"];
        }
    }

    static fromJS(data: any): MaterialResponse {
        data = typeof data === 'object' ? data : {};
        let result = new MaterialResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["modelId"] = this.modelId;
        data["modulusOfElasticity"] = this.modulusOfElasticity;
        data["modulusOfRigidity"] = this.modulusOfRigidity;
        data["pressureUnit"] = this.pressureUnit;
        return data;
    }
}

export interface IMaterialResponse {
    id: number;
    modelId: string;
    modulusOfElasticity: number;
    modulusOfRigidity: number;
    pressureUnit: PressureUnit;

    [key: string]: any;
}

export class MaterialResponse2 implements IMaterialResponse2 {
    id!: number;
    modelId!: string;
    modulusOfElasticity!: number;
    modulusOfRigidity!: number;
    pressureUnit!: PressureUnit;

    [key: string]: any;

    constructor(data?: IMaterialResponse2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.modelId = _data["modelId"];
            this.modulusOfElasticity = _data["modulusOfElasticity"];
            this.modulusOfRigidity = _data["modulusOfRigidity"];
            this.pressureUnit = _data["pressureUnit"];
        }
    }

    static fromJS(data: any): MaterialResponse2 {
        data = typeof data === 'object' ? data : {};
        let result = new MaterialResponse2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["modelId"] = this.modelId;
        data["modulusOfElasticity"] = this.modulusOfElasticity;
        data["modulusOfRigidity"] = this.modulusOfRigidity;
        data["pressureUnit"] = this.pressureUnit;
        return data;
    }
}

export interface IMaterialResponse2 {
    id: number;
    modelId: string;
    modulusOfElasticity: number;
    modulusOfRigidity: number;
    pressureUnit: PressureUnit;

    [key: string]: any;
}

export class ModelEntityResponse implements IModelEntityResponse {
    id!: number;
    modelId!: string;

    [key: string]: any;

    constructor(data?: IModelEntityResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.modelId = _data["modelId"];
        }
    }

    static fromJS(data: any): ModelEntityResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ModelEntityResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["modelId"] = this.modelId;
        return data;
    }
}

export interface IModelEntityResponse {
    id: number;
    modelId: string;

    [key: string]: any;
}

export class ModelInfoResponse implements IModelInfoResponse {
    id!: string;
    name!: string;
    description!: string;
    settings!: ModelSettings;
    lastModified!: Date;
    role!: string;

    [key: string]: any;

    constructor(data?: IModelInfoResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.settings = new ModelSettings();
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.name = _data["name"];
            this.description = _data["description"];
            this.settings = _data["settings"] ? ModelSettings.fromJS(_data["settings"]) : new ModelSettings();
            this.lastModified = _data["lastModified"] ? new Date(_data["lastModified"].toString()) : <any>undefined;
            this.role = _data["role"];
        }
    }

    static fromJS(data: any): ModelInfoResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ModelInfoResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["name"] = this.name;
        data["description"] = this.description;
        data["settings"] = this.settings ? this.settings.toJSON() : <any>undefined;
        data["lastModified"] = this.lastModified ? this.lastModified.toISOString() : <any>undefined;
        data["role"] = this.role;
        return data;
    }
}

export interface IModelInfoResponse {
    id: string;
    name: string;
    description: string;
    settings: ModelSettings;
    lastModified: Date;
    role: string;

    [key: string]: any;
}

export class ModelResponse implements IModelResponse {
    id!: string;
    name!: string;
    description!: string;
    settings!: ModelSettings;
    lastModified!: Date;
    nodes?: NodeResponse2[] | undefined;
    element1ds?: Element1dResponse[] | undefined;
    materials?: MaterialResponse[] | undefined;
    sectionProfiles?: SectionProfileResponse2[] | undefined;
    pointLoads?: PointLoadResponse2[] | undefined;
    momentLoads?: MomentLoadResponse2[] | undefined;
    resultSets?: ResultSetResponse[] | undefined;

    [key: string]: any;

    constructor(data?: IModelResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.settings = new ModelSettings();
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.name = _data["name"];
            this.description = _data["description"];
            this.settings = _data["settings"] ? ModelSettings.fromJS(_data["settings"]) : new ModelSettings();
            this.lastModified = _data["lastModified"] ? new Date(_data["lastModified"].toString()) : <any>undefined;
            if (Array.isArray(_data["nodes"])) {
                this.nodes = [] as any;
                for (let item of _data["nodes"])
                    this.nodes!.push(NodeResponse2.fromJS(item));
            }
            if (Array.isArray(_data["element1ds"])) {
                this.element1ds = [] as any;
                for (let item of _data["element1ds"])
                    this.element1ds!.push(Element1dResponse.fromJS(item));
            }
            if (Array.isArray(_data["materials"])) {
                this.materials = [] as any;
                for (let item of _data["materials"])
                    this.materials!.push(MaterialResponse.fromJS(item));
            }
            if (Array.isArray(_data["sectionProfiles"])) {
                this.sectionProfiles = [] as any;
                for (let item of _data["sectionProfiles"])
                    this.sectionProfiles!.push(SectionProfileResponse2.fromJS(item));
            }
            if (Array.isArray(_data["pointLoads"])) {
                this.pointLoads = [] as any;
                for (let item of _data["pointLoads"])
                    this.pointLoads!.push(PointLoadResponse2.fromJS(item));
            }
            if (Array.isArray(_data["momentLoads"])) {
                this.momentLoads = [] as any;
                for (let item of _data["momentLoads"])
                    this.momentLoads!.push(MomentLoadResponse2.fromJS(item));
            }
            if (Array.isArray(_data["resultSets"])) {
                this.resultSets = [] as any;
                for (let item of _data["resultSets"])
                    this.resultSets!.push(ResultSetResponse.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ModelResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ModelResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["name"] = this.name;
        data["description"] = this.description;
        data["settings"] = this.settings ? this.settings.toJSON() : <any>undefined;
        data["lastModified"] = this.lastModified ? this.lastModified.toISOString() : <any>undefined;
        if (Array.isArray(this.nodes)) {
            data["nodes"] = [];
            for (let item of this.nodes)
                data["nodes"].push(item.toJSON());
        }
        if (Array.isArray(this.element1ds)) {
            data["element1ds"] = [];
            for (let item of this.element1ds)
                data["element1ds"].push(item.toJSON());
        }
        if (Array.isArray(this.materials)) {
            data["materials"] = [];
            for (let item of this.materials)
                data["materials"].push(item.toJSON());
        }
        if (Array.isArray(this.sectionProfiles)) {
            data["sectionProfiles"] = [];
            for (let item of this.sectionProfiles)
                data["sectionProfiles"].push(item.toJSON());
        }
        if (Array.isArray(this.pointLoads)) {
            data["pointLoads"] = [];
            for (let item of this.pointLoads)
                data["pointLoads"].push(item.toJSON());
        }
        if (Array.isArray(this.momentLoads)) {
            data["momentLoads"] = [];
            for (let item of this.momentLoads)
                data["momentLoads"].push(item.toJSON());
        }
        if (Array.isArray(this.resultSets)) {
            data["resultSets"] = [];
            for (let item of this.resultSets)
                data["resultSets"].push(item.toJSON());
        }
        return data;
    }
}

export interface IModelResponse {
    id: string;
    name: string;
    description: string;
    settings: ModelSettings;
    lastModified: Date;
    nodes?: NodeResponse2[] | undefined;
    element1ds?: Element1dResponse[] | undefined;
    materials?: MaterialResponse[] | undefined;
    sectionProfiles?: SectionProfileResponse2[] | undefined;
    pointLoads?: PointLoadResponse2[] | undefined;
    momentLoads?: MomentLoadResponse2[] | undefined;
    resultSets?: ResultSetResponse[] | undefined;

    [key: string]: any;
}

export class ModelSettings implements IModelSettings {
    unitSettings!: UnitSettings;
    analysisSettings?: AnalysisSettings | undefined;
    yAxisUp?: boolean;

    [key: string]: any;

    constructor(data?: IModelSettings) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.unitSettings = new UnitSettings();
            this.yAxisUp = true;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.unitSettings = _data["unitSettings"] ? UnitSettings.fromJS(_data["unitSettings"]) : new UnitSettings();
            this.analysisSettings = _data["analysisSettings"] ? AnalysisSettings.fromJS(_data["analysisSettings"]) : <any>undefined;
            this.yAxisUp = _data["yAxisUp"] !== undefined ? _data["yAxisUp"] : true;
        }
    }

    static fromJS(data: any): ModelSettings {
        data = typeof data === 'object' ? data : {};
        let result = new ModelSettings();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["unitSettings"] = this.unitSettings ? this.unitSettings.toJSON() : <any>undefined;
        data["analysisSettings"] = this.analysisSettings ? this.analysisSettings.toJSON() : <any>undefined;
        data["yAxisUp"] = this.yAxisUp;
        return data;
    }
}

export interface IModelSettings {
    unitSettings: UnitSettings;
    analysisSettings?: AnalysisSettings | undefined;
    yAxisUp?: boolean;

    [key: string]: any;
}

export class MomentDiagramResponse implements IMomentDiagramResponse {
    modelId!: string;
    resultSetId!: number;
    element1dId!: number;
    lengthUnit!: LengthUnit;
    torqueUnit!: TorqueUnit;
    elementLength!: Length;
    intervals!: DiagramConsistentIntervalResponse2[];

    [key: string]: any;

    constructor(data?: IMomentDiagramResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.elementLength = new Length();
            this.intervals = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.modelId = _data["modelId"];
            this.resultSetId = _data["resultSetId"];
            this.element1dId = _data["element1dId"];
            this.lengthUnit = _data["lengthUnit"];
            this.torqueUnit = _data["torqueUnit"];
            this.elementLength = _data["elementLength"] ? Length.fromJS(_data["elementLength"]) : new Length();
            if (Array.isArray(_data["intervals"])) {
                this.intervals = [] as any;
                for (let item of _data["intervals"])
                    this.intervals!.push(DiagramConsistentIntervalResponse2.fromJS(item));
            }
        }
    }

    static fromJS(data: any): MomentDiagramResponse {
        data = typeof data === 'object' ? data : {};
        let result = new MomentDiagramResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["modelId"] = this.modelId;
        data["resultSetId"] = this.resultSetId;
        data["element1dId"] = this.element1dId;
        data["lengthUnit"] = this.lengthUnit;
        data["torqueUnit"] = this.torqueUnit;
        data["elementLength"] = this.elementLength ? this.elementLength.toJSON() : <any>undefined;
        if (Array.isArray(this.intervals)) {
            data["intervals"] = [];
            for (let item of this.intervals)
                data["intervals"].push(item.toJSON());
        }
        return data;
    }
}

export interface IMomentDiagramResponse {
    modelId: string;
    resultSetId: number;
    element1dId: number;
    lengthUnit: LengthUnit;
    torqueUnit: TorqueUnit;
    elementLength: Length;
    intervals: DiagramConsistentIntervalResponse2[];

    [key: string]: any;
}

export class MomentLoadRequestData implements IMomentLoadRequestData {
    nodeId!: number;
    torque!: Torque;
    axisDirection!: Vector3;

    [key: string]: any;

    constructor(data?: IMomentLoadRequestData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.torque = new Torque();
            this.axisDirection = new Vector3();
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.nodeId = _data["nodeId"];
            this.torque = _data["torque"] ? Torque.fromJS(_data["torque"]) : new Torque();
            this.axisDirection = _data["axisDirection"] ? Vector3.fromJS(_data["axisDirection"]) : new Vector3();
        }
    }

    static fromJS(data: any): MomentLoadRequestData {
        data = typeof data === 'object' ? data : {};
        let result = new MomentLoadRequestData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["nodeId"] = this.nodeId;
        data["torque"] = this.torque ? this.torque.toJSON() : <any>undefined;
        data["axisDirection"] = this.axisDirection ? this.axisDirection.toJSON() : <any>undefined;
        return data;
    }
}

export interface IMomentLoadRequestData {
    nodeId: number;
    torque: Torque;
    axisDirection: Vector3;

    [key: string]: any;
}

export class MomentLoadResponse implements IMomentLoadResponse {
    id!: number;
    nodeId!: number;
    modelId!: string;
    torque!: Torque;
    axisDirection!: Vector3;

    [key: string]: any;

    constructor(data?: IMomentLoadResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.torque = new Torque();
            this.axisDirection = new Vector3();
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.nodeId = _data["nodeId"];
            this.modelId = _data["modelId"];
            this.torque = _data["torque"] ? Torque.fromJS(_data["torque"]) : new Torque();
            this.axisDirection = _data["axisDirection"] ? Vector3.fromJS(_data["axisDirection"]) : new Vector3();
        }
    }

    static fromJS(data: any): MomentLoadResponse {
        data = typeof data === 'object' ? data : {};
        let result = new MomentLoadResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["nodeId"] = this.nodeId;
        data["modelId"] = this.modelId;
        data["torque"] = this.torque ? this.torque.toJSON() : <any>undefined;
        data["axisDirection"] = this.axisDirection ? this.axisDirection.toJSON() : <any>undefined;
        return data;
    }
}

export interface IMomentLoadResponse {
    id: number;
    nodeId: number;
    modelId: string;
    torque: Torque;
    axisDirection: Vector3;

    [key: string]: any;
}

export class MomentLoadResponse2 implements IMomentLoadResponse2 {
    id!: number;
    nodeId!: number;
    modelId!: string;
    torque!: Torque;
    axisDirection!: Vector3;

    [key: string]: any;

    constructor(data?: IMomentLoadResponse2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.torque = new Torque();
            this.axisDirection = new Vector3();
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.nodeId = _data["nodeId"];
            this.modelId = _data["modelId"];
            this.torque = _data["torque"] ? Torque.fromJS(_data["torque"]) : new Torque();
            this.axisDirection = _data["axisDirection"] ? Vector3.fromJS(_data["axisDirection"]) : new Vector3();
        }
    }

    static fromJS(data: any): MomentLoadResponse2 {
        data = typeof data === 'object' ? data : {};
        let result = new MomentLoadResponse2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["nodeId"] = this.nodeId;
        data["modelId"] = this.modelId;
        data["torque"] = this.torque ? this.torque.toJSON() : <any>undefined;
        data["axisDirection"] = this.axisDirection ? this.axisDirection.toJSON() : <any>undefined;
        return data;
    }
}

export interface IMomentLoadResponse2 {
    id: number;
    nodeId: number;
    modelId: string;
    torque: Torque;
    axisDirection: Vector3;

    [key: string]: any;
}

export class NodeData implements INodeData {
    locationPoint!: Point;
    restraint!: Restraint;
    metadata?: { [key: string]: string; } | undefined;

    [key: string]: any;

    constructor(data?: INodeData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.locationPoint = new Point();
            this.restraint = new Restraint();
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.locationPoint = _data["locationPoint"] ? Point.fromJS(_data["locationPoint"]) : new Point();
            this.restraint = _data["restraint"] ? Restraint.fromJS(_data["restraint"]) : new Restraint();
            if (_data["metadata"]) {
                this.metadata = {} as any;
                for (let key in _data["metadata"]) {
                    if (_data["metadata"].hasOwnProperty(key))
                        (<any>this.metadata)![key] = _data["metadata"][key];
                }
            }
        }
    }

    static fromJS(data: any): NodeData {
        data = typeof data === 'object' ? data : {};
        let result = new NodeData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["locationPoint"] = this.locationPoint ? this.locationPoint.toJSON() : <any>undefined;
        data["restraint"] = this.restraint ? this.restraint.toJSON() : <any>undefined;
        if (this.metadata) {
            data["metadata"] = {};
            for (let key in this.metadata) {
                if (this.metadata.hasOwnProperty(key))
                    (<any>data["metadata"])[key] = (<any>this.metadata)[key];
            }
        }
        return data;
    }
}

export interface INodeData {
    locationPoint: Point;
    restraint: Restraint;
    metadata?: { [key: string]: string; } | undefined;

    [key: string]: any;
}

export class NodeResponse implements INodeResponse {
    id!: number;
    modelId!: string;
    locationPoint!: Point;
    restraint!: Restraint;

    [key: string]: any;

    constructor(data?: INodeResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.locationPoint = new Point();
            this.restraint = new Restraint();
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.modelId = _data["modelId"];
            this.locationPoint = _data["locationPoint"] ? Point.fromJS(_data["locationPoint"]) : new Point();
            this.restraint = _data["restraint"] ? Restraint.fromJS(_data["restraint"]) : new Restraint();
        }
    }

    static fromJS(data: any): NodeResponse {
        data = typeof data === 'object' ? data : {};
        let result = new NodeResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["modelId"] = this.modelId;
        data["locationPoint"] = this.locationPoint ? this.locationPoint.toJSON() : <any>undefined;
        data["restraint"] = this.restraint ? this.restraint.toJSON() : <any>undefined;
        return data;
    }
}

export interface INodeResponse {
    id: number;
    modelId: string;
    locationPoint: Point;
    restraint: Restraint;

    [key: string]: any;
}

export class NodeResponse2 implements INodeResponse2 {
    id!: number;
    modelId!: string;
    locationPoint!: Point;
    restraint!: Restraint;

    [key: string]: any;

    constructor(data?: INodeResponse2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.locationPoint = new Point();
            this.restraint = new Restraint();
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.modelId = _data["modelId"];
            this.locationPoint = _data["locationPoint"] ? Point.fromJS(_data["locationPoint"]) : new Point();
            this.restraint = _data["restraint"] ? Restraint.fromJS(_data["restraint"]) : new Restraint();
        }
    }

    static fromJS(data: any): NodeResponse2 {
        data = typeof data === 'object' ? data : {};
        let result = new NodeResponse2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["modelId"] = this.modelId;
        data["locationPoint"] = this.locationPoint ? this.locationPoint.toJSON() : <any>undefined;
        data["restraint"] = this.restraint ? this.restraint.toJSON() : <any>undefined;
        return data;
    }
}

export interface INodeResponse2 {
    id: number;
    modelId: string;
    locationPoint: Point;
    restraint: Restraint;

    [key: string]: any;
}

export class NodeResultResponse implements INodeResultResponse {
    modelId!: string;
    resultSetId!: number;
    nodeId!: number;
    forces!: ForcesResponse;
    displacements!: DisplacementsResponse;

    [key: string]: any;

    constructor(data?: INodeResultResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.forces = new ForcesResponse();
            this.displacements = new DisplacementsResponse();
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.modelId = _data["modelId"];
            this.resultSetId = _data["resultSetId"];
            this.nodeId = _data["nodeId"];
            this.forces = _data["forces"] ? ForcesResponse.fromJS(_data["forces"]) : new ForcesResponse();
            this.displacements = _data["displacements"] ? DisplacementsResponse.fromJS(_data["displacements"]) : new DisplacementsResponse();
        }
    }

    static fromJS(data: any): NodeResultResponse {
        data = typeof data === 'object' ? data : {};
        let result = new NodeResultResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["modelId"] = this.modelId;
        data["resultSetId"] = this.resultSetId;
        data["nodeId"] = this.nodeId;
        data["forces"] = this.forces ? this.forces.toJSON() : <any>undefined;
        data["displacements"] = this.displacements ? this.displacements.toJSON() : <any>undefined;
        return data;
    }
}

export interface INodeResultResponse {
    modelId: string;
    resultSetId: number;
    nodeId: number;
    forces: ForcesResponse;
    displacements: DisplacementsResponse;

    [key: string]: any;
}

export class NodeResultResponse2 implements INodeResultResponse2 {
    modelId!: string;
    resultSetId!: number;
    nodeId!: number;
    forces!: ForcesResponse;
    displacements!: DisplacementsResponse;

    [key: string]: any;

    constructor(data?: INodeResultResponse2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.forces = new ForcesResponse();
            this.displacements = new DisplacementsResponse();
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.modelId = _data["modelId"];
            this.resultSetId = _data["resultSetId"];
            this.nodeId = _data["nodeId"];
            this.forces = _data["forces"] ? ForcesResponse.fromJS(_data["forces"]) : new ForcesResponse();
            this.displacements = _data["displacements"] ? DisplacementsResponse.fromJS(_data["displacements"]) : new DisplacementsResponse();
        }
    }

    static fromJS(data: any): NodeResultResponse2 {
        data = typeof data === 'object' ? data : {};
        let result = new NodeResultResponse2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["modelId"] = this.modelId;
        data["resultSetId"] = this.resultSetId;
        data["nodeId"] = this.nodeId;
        data["forces"] = this.forces ? this.forces.toJSON() : <any>undefined;
        data["displacements"] = this.displacements ? this.displacements.toJSON() : <any>undefined;
        return data;
    }
}

export interface INodeResultResponse2 {
    modelId: string;
    resultSetId: number;
    nodeId: number;
    forces: ForcesResponse;
    displacements: DisplacementsResponse;

    [key: string]: any;
}

export class NullableOfAngle implements INullableOfAngle {
    value!: number;
    unit!: AngleUnit;

    [key: string]: any;

    constructor(data?: INullableOfAngle) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.value = _data["value"];
            this.unit = _data["unit"];
        }
    }

    static fromJS(data: any): NullableOfAngle {
        data = typeof data === 'object' ? data : {};
        let result = new NullableOfAngle();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["value"] = this.value;
        data["unit"] = this.unit;
        return data;
    }
}

export interface INullableOfAngle {
    value: number;
    unit: AngleUnit;

    [key: string]: any;
}

export class NullableOfPartialPoint implements INullableOfPartialPoint {
    x?: number | undefined;
    y?: number | undefined;
    z?: number | undefined;
    lengthUnit!: LengthUnit;

    [key: string]: any;

    constructor(data?: INullableOfPartialPoint) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.x = _data["x"];
            this.y = _data["y"];
            this.z = _data["z"];
            this.lengthUnit = _data["lengthUnit"];
        }
    }

    static fromJS(data: any): NullableOfPartialPoint {
        data = typeof data === 'object' ? data : {};
        let result = new NullableOfPartialPoint();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["x"] = this.x;
        data["y"] = this.y;
        data["z"] = this.z;
        data["lengthUnit"] = this.lengthUnit;
        return data;
    }
}

export interface INullableOfPartialPoint {
    x?: number | undefined;
    y?: number | undefined;
    z?: number | undefined;
    lengthUnit: LengthUnit;

    [key: string]: any;
}

export class NullableOfPartialRestraint implements INullableOfPartialRestraint {
    canTranslateAlongX?: boolean | undefined;
    canTranslateAlongY?: boolean | undefined;
    canTranslateAlongZ?: boolean | undefined;
    canRotateAboutX?: boolean | undefined;
    canRotateAboutY?: boolean | undefined;
    canRotateAboutZ?: boolean | undefined;

    [key: string]: any;

    constructor(data?: INullableOfPartialRestraint) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.canTranslateAlongX = _data["canTranslateAlongX"];
            this.canTranslateAlongY = _data["canTranslateAlongY"];
            this.canTranslateAlongZ = _data["canTranslateAlongZ"];
            this.canRotateAboutX = _data["canRotateAboutX"];
            this.canRotateAboutY = _data["canRotateAboutY"];
            this.canRotateAboutZ = _data["canRotateAboutZ"];
        }
    }

    static fromJS(data: any): NullableOfPartialRestraint {
        data = typeof data === 'object' ? data : {};
        let result = new NullableOfPartialRestraint();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["canTranslateAlongX"] = this.canTranslateAlongX;
        data["canTranslateAlongY"] = this.canTranslateAlongY;
        data["canTranslateAlongZ"] = this.canTranslateAlongZ;
        data["canRotateAboutX"] = this.canRotateAboutX;
        data["canRotateAboutY"] = this.canRotateAboutY;
        data["canRotateAboutZ"] = this.canRotateAboutZ;
        return data;
    }
}

export interface INullableOfPartialRestraint {
    canTranslateAlongX?: boolean | undefined;
    canTranslateAlongY?: boolean | undefined;
    canTranslateAlongZ?: boolean | undefined;
    canRotateAboutX?: boolean | undefined;
    canRotateAboutY?: boolean | undefined;
    canRotateAboutZ?: boolean | undefined;

    [key: string]: any;
}

export class Point implements IPoint {
    x!: number;
    y!: number;
    z!: number;
    lengthUnit!: LengthUnit;

    [key: string]: any;

    constructor(data?: IPoint) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.x = _data["x"];
            this.y = _data["y"];
            this.z = _data["z"];
            this.lengthUnit = _data["lengthUnit"];
        }
    }

    static fromJS(data: any): Point {
        data = typeof data === 'object' ? data : {};
        let result = new Point();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["x"] = this.x;
        data["y"] = this.y;
        data["z"] = this.z;
        data["lengthUnit"] = this.lengthUnit;
        return data;
    }
}

export interface IPoint {
    x: number;
    y: number;
    z: number;
    lengthUnit: LengthUnit;

    [key: string]: any;
}

export class PointLoadRequestData implements IPointLoadRequestData {
    nodeId!: number;
    force!: Force;
    direction!: Vector3;

    [key: string]: any;

    constructor(data?: IPointLoadRequestData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.force = new Force();
            this.direction = new Vector3();
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.nodeId = _data["nodeId"];
            this.force = _data["force"] ? Force.fromJS(_data["force"]) : new Force();
            this.direction = _data["direction"] ? Vector3.fromJS(_data["direction"]) : new Vector3();
        }
    }

    static fromJS(data: any): PointLoadRequestData {
        data = typeof data === 'object' ? data : {};
        let result = new PointLoadRequestData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["nodeId"] = this.nodeId;
        data["force"] = this.force ? this.force.toJSON() : <any>undefined;
        data["direction"] = this.direction ? this.direction.toJSON() : <any>undefined;
        return data;
    }
}

export interface IPointLoadRequestData {
    nodeId: number;
    force: Force;
    direction: Vector3;

    [key: string]: any;
}

export class PointLoadResponse implements IPointLoadResponse {
    id!: number;
    nodeId!: number;
    modelId!: string;
    force!: Force;
    direction!: Vector3;

    [key: string]: any;

    constructor(data?: IPointLoadResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.force = new Force();
            this.direction = new Vector3();
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.nodeId = _data["nodeId"];
            this.modelId = _data["modelId"];
            this.force = _data["force"] ? Force.fromJS(_data["force"]) : new Force();
            this.direction = _data["direction"] ? Vector3.fromJS(_data["direction"]) : new Vector3();
        }
    }

    static fromJS(data: any): PointLoadResponse {
        data = typeof data === 'object' ? data : {};
        let result = new PointLoadResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["nodeId"] = this.nodeId;
        data["modelId"] = this.modelId;
        data["force"] = this.force ? this.force.toJSON() : <any>undefined;
        data["direction"] = this.direction ? this.direction.toJSON() : <any>undefined;
        return data;
    }
}

export interface IPointLoadResponse {
    id: number;
    nodeId: number;
    modelId: string;
    force: Force;
    direction: Vector3;

    [key: string]: any;
}

export class PointLoadResponse2 implements IPointLoadResponse2 {
    id!: number;
    nodeId!: number;
    modelId!: string;
    force!: Force;
    direction!: Vector3;

    [key: string]: any;

    constructor(data?: IPointLoadResponse2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.force = new Force();
            this.direction = new Vector3();
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.nodeId = _data["nodeId"];
            this.modelId = _data["modelId"];
            this.force = _data["force"] ? Force.fromJS(_data["force"]) : new Force();
            this.direction = _data["direction"] ? Vector3.fromJS(_data["direction"]) : new Vector3();
        }
    }

    static fromJS(data: any): PointLoadResponse2 {
        data = typeof data === 'object' ? data : {};
        let result = new PointLoadResponse2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["nodeId"] = this.nodeId;
        data["modelId"] = this.modelId;
        data["force"] = this.force ? this.force.toJSON() : <any>undefined;
        data["direction"] = this.direction ? this.direction.toJSON() : <any>undefined;
        return data;
    }
}

export interface IPointLoadResponse2 {
    id: number;
    nodeId: number;
    modelId: string;
    force: Force;
    direction: Vector3;

    [key: string]: any;
}

export enum PressureUnit {
    Undefined = "Undefined",
    KilonewtonPerSquareCentimeter = "KilonewtonPerSquareCentimeter",
    KilonewtonPerSquareMeter = "KilonewtonPerSquareMeter",
    KilonewtonPerSquareMillimeter = "KilonewtonPerSquareMillimeter",
    KilopoundForcePerSquareFoot = "KilopoundForcePerSquareFoot",
    KilopoundForcePerSquareInch = "KilopoundForcePerSquareInch",
    NewtonPerSquareCentimeter = "NewtonPerSquareCentimeter",
    NewtonPerSquareMeter = "NewtonPerSquareMeter",
    NewtonPerSquareMillimeter = "NewtonPerSquareMillimeter",
    PoundForcePerSquareFoot = "PoundForcePerSquareFoot",
    PoundForcePerSquareInch = "PoundForcePerSquareInch",
}

export class PutElement1dRequest implements IPutElement1dRequest {
    id!: number;
    startNodeId!: number;
    endNodeId!: number;
    materialId!: number;
    sectionProfileId!: number;
    sectionProfileRotation?: NullableOfAngle | undefined;
    metadata?: { [key: string]: string; } | undefined;

    [key: string]: any;

    constructor(data?: IPutElement1dRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.startNodeId = _data["startNodeId"];
            this.endNodeId = _data["endNodeId"];
            this.materialId = _data["materialId"];
            this.sectionProfileId = _data["sectionProfileId"];
            this.sectionProfileRotation = _data["sectionProfileRotation"] ? NullableOfAngle.fromJS(_data["sectionProfileRotation"]) : <any>undefined;
            if (_data["metadata"]) {
                this.metadata = {} as any;
                for (let key in _data["metadata"]) {
                    if (_data["metadata"].hasOwnProperty(key))
                        (<any>this.metadata)![key] = _data["metadata"][key];
                }
            }
        }
    }

    static fromJS(data: any): PutElement1dRequest {
        data = typeof data === 'object' ? data : {};
        let result = new PutElement1dRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["startNodeId"] = this.startNodeId;
        data["endNodeId"] = this.endNodeId;
        data["materialId"] = this.materialId;
        data["sectionProfileId"] = this.sectionProfileId;
        data["sectionProfileRotation"] = this.sectionProfileRotation ? this.sectionProfileRotation.toJSON() : <any>undefined;
        if (this.metadata) {
            data["metadata"] = {};
            for (let key in this.metadata) {
                if (this.metadata.hasOwnProperty(key))
                    (<any>data["metadata"])[key] = (<any>this.metadata)[key];
            }
        }
        return data;
    }
}

export interface IPutElement1dRequest {
    id: number;
    startNodeId: number;
    endNodeId: number;
    materialId: number;
    sectionProfileId: number;
    sectionProfileRotation?: NullableOfAngle | undefined;
    metadata?: { [key: string]: string; } | undefined;

    [key: string]: any;
}

export class PutMaterialRequest implements IPutMaterialRequest {
    id?: number;
    modulusOfElasticity!: number;
    modulusOfRigidity!: number;
    pressureUnit!: PressureUnit;

    [key: string]: any;

    constructor(data?: IPutMaterialRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.modulusOfElasticity = _data["modulusOfElasticity"];
            this.modulusOfRigidity = _data["modulusOfRigidity"];
            this.pressureUnit = _data["pressureUnit"];
        }
    }

    static fromJS(data: any): PutMaterialRequest {
        data = typeof data === 'object' ? data : {};
        let result = new PutMaterialRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["modulusOfElasticity"] = this.modulusOfElasticity;
        data["modulusOfRigidity"] = this.modulusOfRigidity;
        data["pressureUnit"] = this.pressureUnit;
        return data;
    }
}

export interface IPutMaterialRequest {
    id?: number;
    modulusOfElasticity: number;
    modulusOfRigidity: number;
    pressureUnit: PressureUnit;

    [key: string]: any;
}

export class PutMomentLoadRequest implements IPutMomentLoadRequest {
    id?: number;
    nodeId!: number;
    torque!: Torque;
    axisDirection!: Vector3;

    [key: string]: any;

    constructor(data?: IPutMomentLoadRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.torque = new Torque();
            this.axisDirection = new Vector3();
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.nodeId = _data["nodeId"];
            this.torque = _data["torque"] ? Torque.fromJS(_data["torque"]) : new Torque();
            this.axisDirection = _data["axisDirection"] ? Vector3.fromJS(_data["axisDirection"]) : new Vector3();
        }
    }

    static fromJS(data: any): PutMomentLoadRequest {
        data = typeof data === 'object' ? data : {};
        let result = new PutMomentLoadRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["nodeId"] = this.nodeId;
        data["torque"] = this.torque ? this.torque.toJSON() : <any>undefined;
        data["axisDirection"] = this.axisDirection ? this.axisDirection.toJSON() : <any>undefined;
        return data;
    }
}

export interface IPutMomentLoadRequest {
    id?: number;
    nodeId: number;
    torque: Torque;
    axisDirection: Vector3;

    [key: string]: any;
}

export class PutNodeRequest implements IPutNodeRequest {
    id!: number;
    locationPoint!: Point;
    restraint!: Restraint;
    metadata?: { [key: string]: string; } | undefined;

    [key: string]: any;

    constructor(data?: IPutNodeRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.locationPoint = new Point();
            this.restraint = new Restraint();
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.locationPoint = _data["locationPoint"] ? Point.fromJS(_data["locationPoint"]) : new Point();
            this.restraint = _data["restraint"] ? Restraint.fromJS(_data["restraint"]) : new Restraint();
            if (_data["metadata"]) {
                this.metadata = {} as any;
                for (let key in _data["metadata"]) {
                    if (_data["metadata"].hasOwnProperty(key))
                        (<any>this.metadata)![key] = _data["metadata"][key];
                }
            }
        }
    }

    static fromJS(data: any): PutNodeRequest {
        data = typeof data === 'object' ? data : {};
        let result = new PutNodeRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["locationPoint"] = this.locationPoint ? this.locationPoint.toJSON() : <any>undefined;
        data["restraint"] = this.restraint ? this.restraint.toJSON() : <any>undefined;
        if (this.metadata) {
            data["metadata"] = {};
            for (let key in this.metadata) {
                if (this.metadata.hasOwnProperty(key))
                    (<any>data["metadata"])[key] = (<any>this.metadata)[key];
            }
        }
        return data;
    }
}

export interface IPutNodeRequest {
    id: number;
    locationPoint: Point;
    restraint: Restraint;
    metadata?: { [key: string]: string; } | undefined;

    [key: string]: any;
}

export class PutPointLoadRequest implements IPutPointLoadRequest {
    id!: number;
    nodeId!: number;
    force!: Force;
    direction!: Vector3;

    [key: string]: any;

    constructor(data?: IPutPointLoadRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.force = new Force();
            this.direction = new Vector3();
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.nodeId = _data["nodeId"];
            this.force = _data["force"] ? Force.fromJS(_data["force"]) : new Force();
            this.direction = _data["direction"] ? Vector3.fromJS(_data["direction"]) : new Vector3();
        }
    }

    static fromJS(data: any): PutPointLoadRequest {
        data = typeof data === 'object' ? data : {};
        let result = new PutPointLoadRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["nodeId"] = this.nodeId;
        data["force"] = this.force ? this.force.toJSON() : <any>undefined;
        data["direction"] = this.direction ? this.direction.toJSON() : <any>undefined;
        return data;
    }
}

export interface IPutPointLoadRequest {
    id: number;
    nodeId: number;
    force: Force;
    direction: Vector3;

    [key: string]: any;
}

export class PutSectionProfileRequest implements IPutSectionProfileRequest {
    id!: number;
    area!: number;
    strongAxisMomentOfInertia!: number;
    weakAxisMomentOfInertia!: number;
    polarMomentOfInertia!: number;
    strongAxisShearArea!: number;
    weakAxisShearArea!: number;
    areaUnit?: AreaUnit;
    areaMomentOfInertiaUnit?: AreaMomentOfInertiaUnit;

    [key: string]: any;

    constructor(data?: IPutSectionProfileRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.area = _data["area"];
            this.strongAxisMomentOfInertia = _data["strongAxisMomentOfInertia"];
            this.weakAxisMomentOfInertia = _data["weakAxisMomentOfInertia"];
            this.polarMomentOfInertia = _data["polarMomentOfInertia"];
            this.strongAxisShearArea = _data["strongAxisShearArea"];
            this.weakAxisShearArea = _data["weakAxisShearArea"];
            this.areaUnit = _data["areaUnit"];
            this.areaMomentOfInertiaUnit = _data["areaMomentOfInertiaUnit"];
        }
    }

    static fromJS(data: any): PutSectionProfileRequest {
        data = typeof data === 'object' ? data : {};
        let result = new PutSectionProfileRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["area"] = this.area;
        data["strongAxisMomentOfInertia"] = this.strongAxisMomentOfInertia;
        data["weakAxisMomentOfInertia"] = this.weakAxisMomentOfInertia;
        data["polarMomentOfInertia"] = this.polarMomentOfInertia;
        data["strongAxisShearArea"] = this.strongAxisShearArea;
        data["weakAxisShearArea"] = this.weakAxisShearArea;
        data["areaUnit"] = this.areaUnit;
        data["areaMomentOfInertiaUnit"] = this.areaMomentOfInertiaUnit;
        return data;
    }
}

export interface IPutSectionProfileRequest {
    id: number;
    area: number;
    strongAxisMomentOfInertia: number;
    weakAxisMomentOfInertia: number;
    polarMomentOfInertia: number;
    strongAxisShearArea: number;
    weakAxisShearArea: number;
    areaUnit?: AreaUnit;
    areaMomentOfInertiaUnit?: AreaMomentOfInertiaUnit;

    [key: string]: any;
}

export class Restraint implements IRestraint {
    canTranslateAlongX!: boolean;
    canTranslateAlongY!: boolean;
    canTranslateAlongZ!: boolean;
    canRotateAboutX!: boolean;
    canRotateAboutY!: boolean;
    canRotateAboutZ!: boolean;

    [key: string]: any;

    constructor(data?: IRestraint) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.canTranslateAlongX = _data["canTranslateAlongX"];
            this.canTranslateAlongY = _data["canTranslateAlongY"];
            this.canTranslateAlongZ = _data["canTranslateAlongZ"];
            this.canRotateAboutX = _data["canRotateAboutX"];
            this.canRotateAboutY = _data["canRotateAboutY"];
            this.canRotateAboutZ = _data["canRotateAboutZ"];
        }
    }

    static fromJS(data: any): Restraint {
        data = typeof data === 'object' ? data : {};
        let result = new Restraint();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["canTranslateAlongX"] = this.canTranslateAlongX;
        data["canTranslateAlongY"] = this.canTranslateAlongY;
        data["canTranslateAlongZ"] = this.canTranslateAlongZ;
        data["canRotateAboutX"] = this.canRotateAboutX;
        data["canRotateAboutY"] = this.canRotateAboutY;
        data["canRotateAboutZ"] = this.canRotateAboutZ;
        return data;
    }
}

export interface IRestraint {
    canTranslateAlongX: boolean;
    canTranslateAlongY: boolean;
    canTranslateAlongZ: boolean;
    canRotateAboutX: boolean;
    canRotateAboutY: boolean;
    canRotateAboutZ: boolean;

    [key: string]: any;
}

export class ResultOfAnalyticalResultsResponse implements IResultOfAnalyticalResultsResponse {
    value!: AnalyticalResultsResponse | undefined;
    error!: BeamOsError | undefined;
    isError!: boolean;

    [key: string]: any;

    constructor(data?: IResultOfAnalyticalResultsResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.value = _data["value"] ? AnalyticalResultsResponse.fromJS(_data["value"]) : <any>undefined;
            this.error = _data["error"] ? BeamOsError.fromJS(_data["error"]) : <any>undefined;
            this.isError = _data["isError"];
        }
    }

    static fromJS(data: any): ResultOfAnalyticalResultsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ResultOfAnalyticalResultsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["value"] = this.value ? this.value.toJSON() : <any>undefined;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["isError"] = this.isError;
        return data;
    }
}

export interface IResultOfAnalyticalResultsResponse {
    value: AnalyticalResultsResponse | undefined;
    error: BeamOsError | undefined;
    isError: boolean;

    [key: string]: any;
}

export class ResultOfBatchResponse implements IResultOfBatchResponse {
    value!: BatchResponse | undefined;
    error!: BeamOsError | undefined;
    isError!: boolean;

    [key: string]: any;

    constructor(data?: IResultOfBatchResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.value = _data["value"] ? BatchResponse.fromJS(_data["value"]) : <any>undefined;
            this.error = _data["error"] ? BeamOsError.fromJS(_data["error"]) : <any>undefined;
            this.isError = _data["isError"];
        }
    }

    static fromJS(data: any): ResultOfBatchResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ResultOfBatchResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["value"] = this.value ? this.value.toJSON() : <any>undefined;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["isError"] = this.isError;
        return data;
    }
}

export interface IResultOfBatchResponse {
    value: BatchResponse | undefined;
    error: BeamOsError | undefined;
    isError: boolean;

    [key: string]: any;
}

export class ResultOfBeamOsModelBuilderDto implements IResultOfBeamOsModelBuilderDto {
    value!: BeamOsModelBuilderDto | undefined;
    error!: BeamOsError | undefined;
    isError!: boolean;

    [key: string]: any;

    constructor(data?: IResultOfBeamOsModelBuilderDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.value = _data["value"] ? BeamOsModelBuilderDto.fromJS(_data["value"]) : <any>undefined;
            this.error = _data["error"] ? BeamOsError.fromJS(_data["error"]) : <any>undefined;
            this.isError = _data["isError"];
        }
    }

    static fromJS(data: any): ResultOfBeamOsModelBuilderDto {
        data = typeof data === 'object' ? data : {};
        let result = new ResultOfBeamOsModelBuilderDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["value"] = this.value ? this.value.toJSON() : <any>undefined;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["isError"] = this.isError;
        return data;
    }
}

export interface IResultOfBeamOsModelBuilderDto {
    value: BeamOsModelBuilderDto | undefined;
    error: BeamOsError | undefined;
    isError: boolean;

    [key: string]: any;
}

export class ResultOfElement1dResponse implements IResultOfElement1dResponse {
    value!: Element1dResponse2 | undefined;
    error!: BeamOsError | undefined;
    isError!: boolean;

    [key: string]: any;

    constructor(data?: IResultOfElement1dResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.value = _data["value"] ? Element1dResponse2.fromJS(_data["value"]) : <any>undefined;
            this.error = _data["error"] ? BeamOsError.fromJS(_data["error"]) : <any>undefined;
            this.isError = _data["isError"];
        }
    }

    static fromJS(data: any): ResultOfElement1dResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ResultOfElement1dResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["value"] = this.value ? this.value.toJSON() : <any>undefined;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["isError"] = this.isError;
        return data;
    }
}

export interface IResultOfElement1dResponse {
    value: Element1dResponse2 | undefined;
    error: BeamOsError | undefined;
    isError: boolean;

    [key: string]: any;
}

export class ResultOfint implements IResultOfint {
    value!: number;
    error!: BeamOsError | undefined;
    isError!: boolean;

    [key: string]: any;

    constructor(data?: IResultOfint) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.value = _data["value"];
            this.error = _data["error"] ? BeamOsError.fromJS(_data["error"]) : <any>undefined;
            this.isError = _data["isError"];
        }
    }

    static fromJS(data: any): ResultOfint {
        data = typeof data === 'object' ? data : {};
        let result = new ResultOfint();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["value"] = this.value;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["isError"] = this.isError;
        return data;
    }
}

export interface IResultOfint {
    value: number;
    error: BeamOsError | undefined;
    isError: boolean;

    [key: string]: any;
}

export class ResultOfListOfModelInfoResponse implements IResultOfListOfModelInfoResponse {
    value!: ModelInfoResponse[] | undefined;
    error!: BeamOsError | undefined;
    isError!: boolean;

    [key: string]: any;

    constructor(data?: IResultOfListOfModelInfoResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            if (Array.isArray(_data["value"])) {
                this.value = [] as any;
                for (let item of _data["value"])
                    this.value!.push(ModelInfoResponse.fromJS(item));
            }
            this.error = _data["error"] ? BeamOsError.fromJS(_data["error"]) : <any>undefined;
            this.isError = _data["isError"];
        }
    }

    static fromJS(data: any): ResultOfListOfModelInfoResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ResultOfListOfModelInfoResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        if (Array.isArray(this.value)) {
            data["value"] = [];
            for (let item of this.value)
                data["value"].push(item.toJSON());
        }
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["isError"] = this.isError;
        return data;
    }
}

export interface IResultOfListOfModelInfoResponse {
    value: ModelInfoResponse[] | undefined;
    error: BeamOsError | undefined;
    isError: boolean;

    [key: string]: any;
}

export class ResultOfMaterialResponse implements IResultOfMaterialResponse {
    value!: MaterialResponse2 | undefined;
    error!: BeamOsError | undefined;
    isError!: boolean;

    [key: string]: any;

    constructor(data?: IResultOfMaterialResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.value = _data["value"] ? MaterialResponse2.fromJS(_data["value"]) : <any>undefined;
            this.error = _data["error"] ? BeamOsError.fromJS(_data["error"]) : <any>undefined;
            this.isError = _data["isError"];
        }
    }

    static fromJS(data: any): ResultOfMaterialResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ResultOfMaterialResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["value"] = this.value ? this.value.toJSON() : <any>undefined;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["isError"] = this.isError;
        return data;
    }
}

export interface IResultOfMaterialResponse {
    value: MaterialResponse2 | undefined;
    error: BeamOsError | undefined;
    isError: boolean;

    [key: string]: any;
}

export class ResultOfModelEntityResponse implements IResultOfModelEntityResponse {
    value!: ModelEntityResponse | undefined;
    error!: BeamOsError | undefined;
    isError!: boolean;

    [key: string]: any;

    constructor(data?: IResultOfModelEntityResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.value = _data["value"] ? ModelEntityResponse.fromJS(_data["value"]) : <any>undefined;
            this.error = _data["error"] ? BeamOsError.fromJS(_data["error"]) : <any>undefined;
            this.isError = _data["isError"];
        }
    }

    static fromJS(data: any): ResultOfModelEntityResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ResultOfModelEntityResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["value"] = this.value ? this.value.toJSON() : <any>undefined;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["isError"] = this.isError;
        return data;
    }
}

export interface IResultOfModelEntityResponse {
    value: ModelEntityResponse | undefined;
    error: BeamOsError | undefined;
    isError: boolean;

    [key: string]: any;
}

export class ResultOfModelResponse implements IResultOfModelResponse {
    value!: ModelResponse | undefined;
    error!: BeamOsError | undefined;
    isError!: boolean;

    [key: string]: any;

    constructor(data?: IResultOfModelResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.value = _data["value"] ? ModelResponse.fromJS(_data["value"]) : <any>undefined;
            this.error = _data["error"] ? BeamOsError.fromJS(_data["error"]) : <any>undefined;
            this.isError = _data["isError"];
        }
    }

    static fromJS(data: any): ResultOfModelResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ResultOfModelResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["value"] = this.value ? this.value.toJSON() : <any>undefined;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["isError"] = this.isError;
        return data;
    }
}

export interface IResultOfModelResponse {
    value: ModelResponse | undefined;
    error: BeamOsError | undefined;
    isError: boolean;

    [key: string]: any;
}

export class ResultOfMomentLoadResponse implements IResultOfMomentLoadResponse {
    value!: MomentLoadResponse | undefined;
    error!: BeamOsError | undefined;
    isError!: boolean;

    [key: string]: any;

    constructor(data?: IResultOfMomentLoadResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.value = _data["value"] ? MomentLoadResponse.fromJS(_data["value"]) : <any>undefined;
            this.error = _data["error"] ? BeamOsError.fromJS(_data["error"]) : <any>undefined;
            this.isError = _data["isError"];
        }
    }

    static fromJS(data: any): ResultOfMomentLoadResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ResultOfMomentLoadResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["value"] = this.value ? this.value.toJSON() : <any>undefined;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["isError"] = this.isError;
        return data;
    }
}

export interface IResultOfMomentLoadResponse {
    value: MomentLoadResponse | undefined;
    error: BeamOsError | undefined;
    isError: boolean;

    [key: string]: any;
}

export class ResultOfNodeResponse implements IResultOfNodeResponse {
    value!: NodeResponse | undefined;
    error!: BeamOsError | undefined;
    isError!: boolean;

    [key: string]: any;

    constructor(data?: IResultOfNodeResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.value = _data["value"] ? NodeResponse.fromJS(_data["value"]) : <any>undefined;
            this.error = _data["error"] ? BeamOsError.fromJS(_data["error"]) : <any>undefined;
            this.isError = _data["isError"];
        }
    }

    static fromJS(data: any): ResultOfNodeResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ResultOfNodeResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["value"] = this.value ? this.value.toJSON() : <any>undefined;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["isError"] = this.isError;
        return data;
    }
}

export interface IResultOfNodeResponse {
    value: NodeResponse | undefined;
    error: BeamOsError | undefined;
    isError: boolean;

    [key: string]: any;
}

export class ResultOfNodeResultResponse implements IResultOfNodeResultResponse {
    value!: NodeResultResponse2 | undefined;
    error!: BeamOsError | undefined;
    isError!: boolean;

    [key: string]: any;

    constructor(data?: IResultOfNodeResultResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.value = _data["value"] ? NodeResultResponse2.fromJS(_data["value"]) : <any>undefined;
            this.error = _data["error"] ? BeamOsError.fromJS(_data["error"]) : <any>undefined;
            this.isError = _data["isError"];
        }
    }

    static fromJS(data: any): ResultOfNodeResultResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ResultOfNodeResultResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["value"] = this.value ? this.value.toJSON() : <any>undefined;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["isError"] = this.isError;
        return data;
    }
}

export interface IResultOfNodeResultResponse {
    value: NodeResultResponse2 | undefined;
    error: BeamOsError | undefined;
    isError: boolean;

    [key: string]: any;
}

export class ResultOfPointLoadResponse implements IResultOfPointLoadResponse {
    value!: PointLoadResponse | undefined;
    error!: BeamOsError | undefined;
    isError!: boolean;

    [key: string]: any;

    constructor(data?: IResultOfPointLoadResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.value = _data["value"] ? PointLoadResponse.fromJS(_data["value"]) : <any>undefined;
            this.error = _data["error"] ? BeamOsError.fromJS(_data["error"]) : <any>undefined;
            this.isError = _data["isError"];
        }
    }

    static fromJS(data: any): ResultOfPointLoadResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ResultOfPointLoadResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["value"] = this.value ? this.value.toJSON() : <any>undefined;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["isError"] = this.isError;
        return data;
    }
}

export interface IResultOfPointLoadResponse {
    value: PointLoadResponse | undefined;
    error: BeamOsError | undefined;
    isError: boolean;

    [key: string]: any;
}

export class ResultOfResultSetResponse implements IResultOfResultSetResponse {
    value!: ResultSetResponse2 | undefined;
    error!: BeamOsError | undefined;
    isError!: boolean;

    [key: string]: any;

    constructor(data?: IResultOfResultSetResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.value = _data["value"] ? ResultSetResponse2.fromJS(_data["value"]) : <any>undefined;
            this.error = _data["error"] ? BeamOsError.fromJS(_data["error"]) : <any>undefined;
            this.isError = _data["isError"];
        }
    }

    static fromJS(data: any): ResultOfResultSetResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ResultOfResultSetResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["value"] = this.value ? this.value.toJSON() : <any>undefined;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["isError"] = this.isError;
        return data;
    }
}

export interface IResultOfResultSetResponse {
    value: ResultSetResponse2 | undefined;
    error: BeamOsError | undefined;
    isError: boolean;

    [key: string]: any;
}

export class ResultOfSectionProfileResponse implements IResultOfSectionProfileResponse {
    value!: SectionProfileResponse | undefined;
    error!: BeamOsError | undefined;
    isError!: boolean;

    [key: string]: any;

    constructor(data?: IResultOfSectionProfileResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.value = _data["value"] ? SectionProfileResponse.fromJS(_data["value"]) : <any>undefined;
            this.error = _data["error"] ? BeamOsError.fromJS(_data["error"]) : <any>undefined;
            this.isError = _data["isError"];
        }
    }

    static fromJS(data: any): ResultOfSectionProfileResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ResultOfSectionProfileResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["value"] = this.value ? this.value.toJSON() : <any>undefined;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["isError"] = this.isError;
        return data;
    }
}

export interface IResultOfSectionProfileResponse {
    value: SectionProfileResponse | undefined;
    error: BeamOsError | undefined;
    isError: boolean;

    [key: string]: any;
}

export class ResultSetResponse implements IResultSetResponse {
    id!: number;
    modelId!: string;
    nodeResults?: NodeResultResponse[] | undefined;
    element1dResults?: Element1dResultResponse[] | undefined;

    [key: string]: any;

    constructor(data?: IResultSetResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.modelId = _data["modelId"];
            if (Array.isArray(_data["nodeResults"])) {
                this.nodeResults = [] as any;
                for (let item of _data["nodeResults"])
                    this.nodeResults!.push(NodeResultResponse.fromJS(item));
            }
            if (Array.isArray(_data["element1dResults"])) {
                this.element1dResults = [] as any;
                for (let item of _data["element1dResults"])
                    this.element1dResults!.push(Element1dResultResponse.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ResultSetResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ResultSetResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["modelId"] = this.modelId;
        if (Array.isArray(this.nodeResults)) {
            data["nodeResults"] = [];
            for (let item of this.nodeResults)
                data["nodeResults"].push(item.toJSON());
        }
        if (Array.isArray(this.element1dResults)) {
            data["element1dResults"] = [];
            for (let item of this.element1dResults)
                data["element1dResults"].push(item.toJSON());
        }
        return data;
    }
}

export interface IResultSetResponse {
    id: number;
    modelId: string;
    nodeResults?: NodeResultResponse[] | undefined;
    element1dResults?: Element1dResultResponse[] | undefined;

    [key: string]: any;
}

export class ResultSetResponse2 implements IResultSetResponse2 {
    id!: number;
    modelId!: string;
    nodeResults?: NodeResultResponse[] | undefined;
    element1dResults?: Element1dResultResponse[] | undefined;

    [key: string]: any;

    constructor(data?: IResultSetResponse2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.modelId = _data["modelId"];
            if (Array.isArray(_data["nodeResults"])) {
                this.nodeResults = [] as any;
                for (let item of _data["nodeResults"])
                    this.nodeResults!.push(NodeResultResponse.fromJS(item));
            }
            if (Array.isArray(_data["element1dResults"])) {
                this.element1dResults = [] as any;
                for (let item of _data["element1dResults"])
                    this.element1dResults!.push(Element1dResultResponse.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ResultSetResponse2 {
        data = typeof data === 'object' ? data : {};
        let result = new ResultSetResponse2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["modelId"] = this.modelId;
        if (Array.isArray(this.nodeResults)) {
            data["nodeResults"] = [];
            for (let item of this.nodeResults)
                data["nodeResults"].push(item.toJSON());
        }
        if (Array.isArray(this.element1dResults)) {
            data["element1dResults"] = [];
            for (let item of this.element1dResults)
                data["element1dResults"].push(item.toJSON());
        }
        return data;
    }
}

export interface IResultSetResponse2 {
    id: number;
    modelId: string;
    nodeResults?: NodeResultResponse[] | undefined;
    element1dResults?: Element1dResultResponse[] | undefined;

    [key: string]: any;
}

export class SectionProfileData implements ISectionProfileData {
    area!: number;
    strongAxisMomentOfInertia!: number;
    weakAxisMomentOfInertia!: number;
    polarMomentOfInertia!: number;
    strongAxisShearArea!: number;
    weakAxisShearArea!: number;
    areaUnit?: AreaUnit;
    areaMomentOfInertiaUnit?: AreaMomentOfInertiaUnit;

    [key: string]: any;

    constructor(data?: ISectionProfileData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.area = _data["area"];
            this.strongAxisMomentOfInertia = _data["strongAxisMomentOfInertia"];
            this.weakAxisMomentOfInertia = _data["weakAxisMomentOfInertia"];
            this.polarMomentOfInertia = _data["polarMomentOfInertia"];
            this.strongAxisShearArea = _data["strongAxisShearArea"];
            this.weakAxisShearArea = _data["weakAxisShearArea"];
            this.areaUnit = _data["areaUnit"];
            this.areaMomentOfInertiaUnit = _data["areaMomentOfInertiaUnit"];
        }
    }

    static fromJS(data: any): SectionProfileData {
        data = typeof data === 'object' ? data : {};
        let result = new SectionProfileData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["area"] = this.area;
        data["strongAxisMomentOfInertia"] = this.strongAxisMomentOfInertia;
        data["weakAxisMomentOfInertia"] = this.weakAxisMomentOfInertia;
        data["polarMomentOfInertia"] = this.polarMomentOfInertia;
        data["strongAxisShearArea"] = this.strongAxisShearArea;
        data["weakAxisShearArea"] = this.weakAxisShearArea;
        data["areaUnit"] = this.areaUnit;
        data["areaMomentOfInertiaUnit"] = this.areaMomentOfInertiaUnit;
        return data;
    }
}

export interface ISectionProfileData {
    area: number;
    strongAxisMomentOfInertia: number;
    weakAxisMomentOfInertia: number;
    polarMomentOfInertia: number;
    strongAxisShearArea: number;
    weakAxisShearArea: number;
    areaUnit?: AreaUnit;
    areaMomentOfInertiaUnit?: AreaMomentOfInertiaUnit;

    [key: string]: any;
}

export class SectionProfileResponse implements ISectionProfileResponse {
    id!: number;
    modelId!: string;
    area!: number;
    strongAxisMomentOfInertia!: number;
    weakAxisMomentOfInertia!: number;
    polarMomentOfInertia!: number;
    strongAxisShearArea!: number;
    weakAxisShearArea!: number;
    areaUnit!: AreaUnit;
    areaMomentOfInertiaUnit!: AreaMomentOfInertiaUnit;

    [key: string]: any;

    constructor(data?: ISectionProfileResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.modelId = _data["modelId"];
            this.area = _data["area"];
            this.strongAxisMomentOfInertia = _data["strongAxisMomentOfInertia"];
            this.weakAxisMomentOfInertia = _data["weakAxisMomentOfInertia"];
            this.polarMomentOfInertia = _data["polarMomentOfInertia"];
            this.strongAxisShearArea = _data["strongAxisShearArea"];
            this.weakAxisShearArea = _data["weakAxisShearArea"];
            this.areaUnit = _data["areaUnit"];
            this.areaMomentOfInertiaUnit = _data["areaMomentOfInertiaUnit"];
        }
    }

    static fromJS(data: any): SectionProfileResponse {
        data = typeof data === 'object' ? data : {};
        let result = new SectionProfileResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["modelId"] = this.modelId;
        data["area"] = this.area;
        data["strongAxisMomentOfInertia"] = this.strongAxisMomentOfInertia;
        data["weakAxisMomentOfInertia"] = this.weakAxisMomentOfInertia;
        data["polarMomentOfInertia"] = this.polarMomentOfInertia;
        data["strongAxisShearArea"] = this.strongAxisShearArea;
        data["weakAxisShearArea"] = this.weakAxisShearArea;
        data["areaUnit"] = this.areaUnit;
        data["areaMomentOfInertiaUnit"] = this.areaMomentOfInertiaUnit;
        return data;
    }
}

export interface ISectionProfileResponse {
    id: number;
    modelId: string;
    area: number;
    strongAxisMomentOfInertia: number;
    weakAxisMomentOfInertia: number;
    polarMomentOfInertia: number;
    strongAxisShearArea: number;
    weakAxisShearArea: number;
    areaUnit: AreaUnit;
    areaMomentOfInertiaUnit: AreaMomentOfInertiaUnit;

    [key: string]: any;
}

export class SectionProfileResponse2 implements ISectionProfileResponse2 {
    id!: number;
    modelId!: string;
    area!: number;
    strongAxisMomentOfInertia!: number;
    weakAxisMomentOfInertia!: number;
    polarMomentOfInertia!: number;
    strongAxisShearArea!: number;
    weakAxisShearArea!: number;
    areaUnit!: AreaUnit;
    areaMomentOfInertiaUnit!: AreaMomentOfInertiaUnit;

    [key: string]: any;

    constructor(data?: ISectionProfileResponse2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.modelId = _data["modelId"];
            this.area = _data["area"];
            this.strongAxisMomentOfInertia = _data["strongAxisMomentOfInertia"];
            this.weakAxisMomentOfInertia = _data["weakAxisMomentOfInertia"];
            this.polarMomentOfInertia = _data["polarMomentOfInertia"];
            this.strongAxisShearArea = _data["strongAxisShearArea"];
            this.weakAxisShearArea = _data["weakAxisShearArea"];
            this.areaUnit = _data["areaUnit"];
            this.areaMomentOfInertiaUnit = _data["areaMomentOfInertiaUnit"];
        }
    }

    static fromJS(data: any): SectionProfileResponse2 {
        data = typeof data === 'object' ? data : {};
        let result = new SectionProfileResponse2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["modelId"] = this.modelId;
        data["area"] = this.area;
        data["strongAxisMomentOfInertia"] = this.strongAxisMomentOfInertia;
        data["weakAxisMomentOfInertia"] = this.weakAxisMomentOfInertia;
        data["polarMomentOfInertia"] = this.polarMomentOfInertia;
        data["strongAxisShearArea"] = this.strongAxisShearArea;
        data["weakAxisShearArea"] = this.weakAxisShearArea;
        data["areaUnit"] = this.areaUnit;
        data["areaMomentOfInertiaUnit"] = this.areaMomentOfInertiaUnit;
        return data;
    }
}

export interface ISectionProfileResponse2 {
    id: number;
    modelId: string;
    area: number;
    strongAxisMomentOfInertia: number;
    weakAxisMomentOfInertia: number;
    polarMomentOfInertia: number;
    strongAxisShearArea: number;
    weakAxisShearArea: number;
    areaUnit: AreaUnit;
    areaMomentOfInertiaUnit: AreaMomentOfInertiaUnit;

    [key: string]: any;
}

export class ShearDiagramResponse implements IShearDiagramResponse {
    globalShearDirection!: Vector3;
    lengthUnit!: LengthUnit;
    forceUnit!: ForceUnit;
    elementLength!: Length;
    modelId!: string;
    resultSetId!: number;
    element1dId!: number;
    intervals!: DiagramConsistentIntervalResponse[];

    [key: string]: any;

    constructor(data?: IShearDiagramResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.globalShearDirection = new Vector3();
            this.elementLength = new Length();
            this.intervals = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.globalShearDirection = _data["globalShearDirection"] ? Vector3.fromJS(_data["globalShearDirection"]) : new Vector3();
            this.lengthUnit = _data["lengthUnit"];
            this.forceUnit = _data["forceUnit"];
            this.elementLength = _data["elementLength"] ? Length.fromJS(_data["elementLength"]) : new Length();
            this.modelId = _data["modelId"];
            this.resultSetId = _data["resultSetId"];
            this.element1dId = _data["element1dId"];
            if (Array.isArray(_data["intervals"])) {
                this.intervals = [] as any;
                for (let item of _data["intervals"])
                    this.intervals!.push(DiagramConsistentIntervalResponse.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ShearDiagramResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ShearDiagramResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["globalShearDirection"] = this.globalShearDirection ? this.globalShearDirection.toJSON() : <any>undefined;
        data["lengthUnit"] = this.lengthUnit;
        data["forceUnit"] = this.forceUnit;
        data["elementLength"] = this.elementLength ? this.elementLength.toJSON() : <any>undefined;
        data["modelId"] = this.modelId;
        data["resultSetId"] = this.resultSetId;
        data["element1dId"] = this.element1dId;
        if (Array.isArray(this.intervals)) {
            data["intervals"] = [];
            for (let item of this.intervals)
                data["intervals"].push(item.toJSON());
        }
        return data;
    }
}

export interface IShearDiagramResponse {
    globalShearDirection: Vector3;
    lengthUnit: LengthUnit;
    forceUnit: ForceUnit;
    elementLength: Length;
    modelId: string;
    resultSetId: number;
    element1dId: number;
    intervals: DiagramConsistentIntervalResponse[];

    [key: string]: any;
}

export class SpeckleReceiveParameters implements ISpeckleReceiveParameters {
    apiToken!: string;
    projectId!: string;
    objectId!: string;
    serverUrl!: string;

    [key: string]: any;

    constructor(data?: ISpeckleReceiveParameters) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.apiToken = _data["apiToken"];
            this.projectId = _data["projectId"];
            this.objectId = _data["objectId"];
            this.serverUrl = _data["serverUrl"];
        }
    }

    static fromJS(data: any): SpeckleReceiveParameters {
        data = typeof data === 'object' ? data : {};
        let result = new SpeckleReceiveParameters();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["apiToken"] = this.apiToken;
        data["projectId"] = this.projectId;
        data["objectId"] = this.objectId;
        data["serverUrl"] = this.serverUrl;
        return data;
    }
}

export interface ISpeckleReceiveParameters {
    apiToken: string;
    projectId: string;
    objectId: string;
    serverUrl: string;

    [key: string]: any;
}

export class Torque implements ITorque {
    value!: number;
    unit!: TorqueUnit;

    [key: string]: any;

    constructor(data?: ITorque) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.value = _data["value"];
            this.unit = _data["unit"];
        }
    }

    static fromJS(data: any): Torque {
        data = typeof data === 'object' ? data : {};
        let result = new Torque();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["value"] = this.value;
        data["unit"] = this.unit;
        return data;
    }
}

export interface ITorque {
    value: number;
    unit: TorqueUnit;

    [key: string]: any;
}

export enum TorqueUnit {
    Undefined = "Undefined",
    KilonewtonCentimeter = "KilonewtonCentimeter",
    KilonewtonMeter = "KilonewtonMeter",
    KilonewtonMillimeter = "KilonewtonMillimeter",
    KilopoundForceFoot = "KilopoundForceFoot",
    KilopoundForceInch = "KilopoundForceInch",
    NewtonCentimeter = "NewtonCentimeter",
    NewtonMeter = "NewtonMeter",
    NewtonMillimeter = "NewtonMillimeter",
    PoundForceFoot = "PoundForceFoot",
    PoundForceInch = "PoundForceInch",
}

export class UnitSettings implements IUnitSettings {
    lengthUnit!: LengthUnit;
    forceUnit!: ForceUnit;
    angleUnit?: AngleUnit;

    [key: string]: any;

    constructor(data?: IUnitSettings) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.lengthUnit = _data["lengthUnit"];
            this.forceUnit = _data["forceUnit"];
            this.angleUnit = _data["angleUnit"];
        }
    }

    static fromJS(data: any): UnitSettings {
        data = typeof data === 'object' ? data : {};
        let result = new UnitSettings();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["lengthUnit"] = this.lengthUnit;
        data["forceUnit"] = this.forceUnit;
        data["angleUnit"] = this.angleUnit;
        return data;
    }
}

export interface IUnitSettings {
    lengthUnit: LengthUnit;
    forceUnit: ForceUnit;
    angleUnit?: AngleUnit;

    [key: string]: any;
}

export class UpdateNodeRequest implements IUpdateNodeRequest {
    id!: number;
    locationPoint?: NullableOfPartialPoint | undefined;
    restraint?: NullableOfPartialRestraint | undefined;

    [key: string]: any;

    constructor(data?: IUpdateNodeRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.locationPoint = _data["locationPoint"] ? NullableOfPartialPoint.fromJS(_data["locationPoint"]) : <any>undefined;
            this.restraint = _data["restraint"] ? NullableOfPartialRestraint.fromJS(_data["restraint"]) : <any>undefined;
        }
    }

    static fromJS(data: any): UpdateNodeRequest {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateNodeRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["locationPoint"] = this.locationPoint ? this.locationPoint.toJSON() : <any>undefined;
        data["restraint"] = this.restraint ? this.restraint.toJSON() : <any>undefined;
        return data;
    }
}

export interface IUpdateNodeRequest {
    id: number;
    locationPoint?: NullableOfPartialPoint | undefined;
    restraint?: NullableOfPartialRestraint | undefined;

    [key: string]: any;
}

export class Vector3 implements IVector3 {
    x!: number;
    y!: number;
    z!: number;

    [key: string]: any;

    constructor(data?: IVector3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.x = _data["x"];
            this.y = _data["y"];
            this.z = _data["z"];
        }
    }

    static fromJS(data: any): Vector3 {
        data = typeof data === 'object' ? data : {};
        let result = new Vector3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["x"] = this.x;
        data["y"] = this.y;
        data["z"] = this.z;
        return data;
    }
}

export interface IVector3 {
    x: number;
    y: number;
    z: number;

    [key: string]: any;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}