<Project Sdk="Microsoft.NET.Sdk.Razor">

  <PropertyGroup>
    <Nullable>enable</Nullable>
    <ImplicitUsings>enable</ImplicitUsings>
    <TUnitImplicitUsings>false</TUnitImplicitUsings>
    <LangVersion>preview</LangVersion>
  </PropertyGroup>


  <ItemGroup>
    <SupportedPlatform Include="browser" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.AspNetCore.Components.Authorization" />
    <PackageReference Include="Microsoft.AspNetCore.Components.Web" />
    <PackageReference Include="Microsoft.AspNetCore.Http.Extensions" />
    <PackageReference Include="Microsoft.Extensions.Caching.Hybrid" />
    <PackageReference Include="Microsoft.TypeScript.MSBuild">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="MudBlazor" />
    <PackageReference Include="Fluxor" />
    <PackageReference Include="Fluxor.Blazor.Web" />
    <PackageReference Include="UnitsNet" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\..\..\codeGen\BeamOs.CodeGen.EditorApi\BeamOs.CodeGen.EditorApi.csproj" />
    <ProjectReference Include="..\..\..\codeGen\BeamOs.CodeGen.StructuralAnalysisApiClient\BeamOs.CodeGen.StructuralAnalysisApiClient.csproj" />
    <ProjectReference Include="..\..\..\tests\BeamOs.Tests.Common\BeamOs.Tests.Common.csproj" />
    <ProjectReference Include="..\..\..\tests\Runtime\BeamOs.Tests.Runtime.TestRunner\BeamOs.Tests.Runtime.TestRunner.csproj" />
    <ProjectReference Include="..\..\Common\BeamOs.Common.Api\BeamOs.Common.Api.csproj" />
    <ProjectReference Include="..\..\Common\BeamOs.Common.Application\BeamOs.Common.Application.csproj" />
    <ProjectReference Include="..\..\Identity\BeamOs.Identity\BeamOs.Identity.csproj" />
    <ProjectReference Include="..\..\StructuralAnalysis\BeamOs.StructuralAnalysis.CsSdk\BeamOs.StructuralAnalysis.CsSdk.csproj" />
    <ProjectReference Include="..\BeamOs.WebApp.EditorCommands\BeamOs.WebApp.EditorCommands.csproj" />
  </ItemGroup>

  <ItemGroup>
    <Folder Include="wwwroot\" />
  </ItemGroup>

  <Target Name="NpmInstall" Condition="'$(Configuration)' == 'Release' AND '$(ContinuousIntegrationEnv)' == false" Inputs="$(NpmFolder)/package.json" Outputs="$(NpmFolder)/node_modules/.install-stamp">


    <!--Use npm install or npm ci depending on RestorePackagesWithLockFile value.
        Uncomment the following lines if you want to use this feature:-->

    <!--<PropertyGroup>
          <RestorePackagesWithLockFile>true</RestorePackagesWithLockFile>
        </PropertyGroup>-->


    <Exec WorkingDirectory="$(NpmFolder)" Command="npm ci" Condition="'$(RestorePackagesWithLockFile)' == 'true'" />
    <Exec WorkingDirectory="$(NpmFolder)" Command="npm install" Condition="'$(RestorePackagesWithLockFile)' != 'true'" />


    <!--Write the stamp file, so incremental builds work-->

    <Touch Files="$(NpmFolder)/node_modules/.install-stamp" AlwaysCreate="true" />
  </Target>



  <!--2. Run npm run build before building the .NET project.
      MSBuild runs NpmInstall before this task because of the DependsOnTargets attribute.-->


  <Target Name="NpmRunBuild" DependsOnTargets="NpmInstall" BeforeTargets="BeforeBuild" Condition="'$(Configuration)' == 'Release' AND '$(ContinuousIntegrationEnv)' == false">
    <Exec WorkingDirectory="$(NpmFolder)" Command="npm run build" />
    <!--<Exec WorkingDirectory="$(NpmFolder)" Command="npx @tailwindcss/cli -i ./src/app.css -o ../wwwroot/css/tailwind.css" />-->
  </Target>

</Project>
