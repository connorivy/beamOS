//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export interface IEditorApiAlpha {

    /**
     * @return OK
     */
    createElement1d(body: Element1dResponse): Promise<Result>;

    /**
     * @return OK
     */
    createElement1ds(body: Element1dResponse[]): Promise<Result>;

    /**
     * @return OK
     */
    updateElement1d(body: Element1dResponse): Promise<Result>;

    /**
     * @return OK
     */
    updateElement1ds(body: Element1dResponse[]): Promise<Result>;

    /**
     * @return OK
     */
    deleteElement1d(body: IModelEntity): Promise<Result>;

    /**
     * @return OK
     */
    deleteElement1ds(body: IModelEntity[]): Promise<Result>;

    /**
     * @return OK
     */
    createModel(body: ModelResponse): Promise<Result>;

    /**
     * @return OK
     */
    createNode(body: NodeResponse): Promise<Result>;

    /**
     * @return OK
     */
    createNodes(body: NodeResponse[]): Promise<Result>;

    /**
     * @return OK
     */
    updateNode(body: NodeResponse): Promise<Result>;

    /**
     * @return OK
     */
    updateNodes(body: NodeResponse[]): Promise<Result>;

    /**
     * @return OK
     */
    deleteNode(body: IModelEntity): Promise<Result>;

    /**
     * @return OK
     */
    deleteNodes(body: IModelEntity[]): Promise<Result>;

    /**
     * @return OK
     */
    createPointLoad(body: PointLoadResponse): Promise<Result>;

    /**
     * @return OK
     */
    createPointLoads(body: PointLoadResponse[]): Promise<Result>;

    /**
     * @return OK
     */
    updatePointLoad(body: PointLoadResponse): Promise<Result>;

    /**
     * @return OK
     */
    updatePointLoads(body: PointLoadResponse[]): Promise<Result>;

    /**
     * @return OK
     */
    deletePointLoad(body: IModelEntity): Promise<Result>;

    /**
     * @return OK
     */
    deletePointLoads(body: IModelEntity[]): Promise<Result>;

    /**
     * @return OK
     */
    createShearDiagram(body: ShearDiagramResponse): Promise<Result>;

    /**
     * @return OK
     */
    createShearDiagrams(body: ShearDiagramResponse[]): Promise<Result>;

    /**
     * @return OK
     */
    createMomentDiagram(body: MomentDiagramResponse): Promise<Result>;

    /**
     * @return OK
     */
    createMomentDiagrams(body: MomentDiagramResponse[]): Promise<Result>;

    /**
     * @return OK
     */
    createDeflectionDiagram(body: DeflectionDiagramResponse): Promise<Result>;

    /**
     * @return OK
     */
    createDeflectionDiagrams(body: DeflectionDiagramResponse[]): Promise<Result>;

    /**
     * @return OK
     */
    displayModelProposal(body: ModelProposalResponse): Promise<Result>;

    /**
     * @return OK
     */
    clearModelProposals(): Promise<Result>;

    /**
     * @return OK
     */
    setSettings(body: ModelSettings): Promise<Result>;

    /**
     * @return OK
     */
    setGlobalStresses(body: GlobalStresses): Promise<Result>;

    /**
     * @return OK
     */
    clear(): Promise<Result>;

    /**
     * @return OK
     */
    clearCurrentOverlay(): Promise<Result>;

    /**
     * @return OK
     */
    reduceChangeSelectionCommand(body: ChangeSelectionCommand): Promise<Result>;

    /**
     * @return OK
     */
    reduceMoveNodeCommand(body: MoveNodeCommand): Promise<Result>;

    /**
     * @return OK
     */
    reducePutNodeClientCommand(body: PutNodeClientCommand): Promise<Result>;
}

export class EditorApiAlpha implements IEditorApiAlpha {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @return OK
     */
    createElement1d(body: Element1dResponse): Promise<Result> {
        let url_ = this.baseUrl + "/EditorApiAlpha/CreateElement1d";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateElement1d(_response);
        });
    }

    protected processCreateElement1d(response: Response): Promise<Result> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Result.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * @return OK
     */
    createElement1ds(body: Element1dResponse[]): Promise<Result> {
        let url_ = this.baseUrl + "/EditorApiAlpha/CreateElement1ds";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateElement1ds(_response);
        });
    }

    protected processCreateElement1ds(response: Response): Promise<Result> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Result.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * @return OK
     */
    updateElement1d(body: Element1dResponse): Promise<Result> {
        let url_ = this.baseUrl + "/EditorApiAlpha/UpdateElement1d";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateElement1d(_response);
        });
    }

    protected processUpdateElement1d(response: Response): Promise<Result> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Result.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * @return OK
     */
    updateElement1ds(body: Element1dResponse[]): Promise<Result> {
        let url_ = this.baseUrl + "/EditorApiAlpha/UpdateElement1ds";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateElement1ds(_response);
        });
    }

    protected processUpdateElement1ds(response: Response): Promise<Result> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Result.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * @return OK
     */
    deleteElement1d(body: IModelEntity): Promise<Result> {
        let url_ = this.baseUrl + "/EditorApiAlpha/DeleteElement1d";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteElement1d(_response);
        });
    }

    protected processDeleteElement1d(response: Response): Promise<Result> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Result.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * @return OK
     */
    deleteElement1ds(body: IModelEntity[]): Promise<Result> {
        let url_ = this.baseUrl + "/EditorApiAlpha/DeleteElement1ds";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteElement1ds(_response);
        });
    }

    protected processDeleteElement1ds(response: Response): Promise<Result> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Result.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * @return OK
     */
    createModel(body: ModelResponse): Promise<Result> {
        let url_ = this.baseUrl + "/EditorApiAlpha/CreateModel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateModel(_response);
        });
    }

    protected processCreateModel(response: Response): Promise<Result> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Result.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * @return OK
     */
    createNode(body: NodeResponse): Promise<Result> {
        let url_ = this.baseUrl + "/EditorApiAlpha/CreateNode";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateNode(_response);
        });
    }

    protected processCreateNode(response: Response): Promise<Result> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Result.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * @return OK
     */
    createNodes(body: NodeResponse[]): Promise<Result> {
        let url_ = this.baseUrl + "/EditorApiAlpha/CreateNodes";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateNodes(_response);
        });
    }

    protected processCreateNodes(response: Response): Promise<Result> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Result.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * @return OK
     */
    updateNode(body: NodeResponse): Promise<Result> {
        let url_ = this.baseUrl + "/EditorApiAlpha/UpdateNode";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateNode(_response);
        });
    }

    protected processUpdateNode(response: Response): Promise<Result> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Result.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * @return OK
     */
    updateNodes(body: NodeResponse[]): Promise<Result> {
        let url_ = this.baseUrl + "/EditorApiAlpha/UpdateNodes";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateNodes(_response);
        });
    }

    protected processUpdateNodes(response: Response): Promise<Result> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Result.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * @return OK
     */
    deleteNode(body: IModelEntity): Promise<Result> {
        let url_ = this.baseUrl + "/EditorApiAlpha/DeleteNode";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteNode(_response);
        });
    }

    protected processDeleteNode(response: Response): Promise<Result> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Result.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * @return OK
     */
    deleteNodes(body: IModelEntity[]): Promise<Result> {
        let url_ = this.baseUrl + "/EditorApiAlpha/DeleteNodes";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteNodes(_response);
        });
    }

    protected processDeleteNodes(response: Response): Promise<Result> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Result.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * @return OK
     */
    createPointLoad(body: PointLoadResponse): Promise<Result> {
        let url_ = this.baseUrl + "/EditorApiAlpha/CreatePointLoad";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreatePointLoad(_response);
        });
    }

    protected processCreatePointLoad(response: Response): Promise<Result> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Result.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * @return OK
     */
    createPointLoads(body: PointLoadResponse[]): Promise<Result> {
        let url_ = this.baseUrl + "/EditorApiAlpha/CreatePointLoads";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreatePointLoads(_response);
        });
    }

    protected processCreatePointLoads(response: Response): Promise<Result> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Result.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * @return OK
     */
    updatePointLoad(body: PointLoadResponse): Promise<Result> {
        let url_ = this.baseUrl + "/EditorApiAlpha/UpdatePointLoad";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdatePointLoad(_response);
        });
    }

    protected processUpdatePointLoad(response: Response): Promise<Result> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Result.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * @return OK
     */
    updatePointLoads(body: PointLoadResponse[]): Promise<Result> {
        let url_ = this.baseUrl + "/EditorApiAlpha/UpdatePointLoads";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdatePointLoads(_response);
        });
    }

    protected processUpdatePointLoads(response: Response): Promise<Result> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Result.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * @return OK
     */
    deletePointLoad(body: IModelEntity): Promise<Result> {
        let url_ = this.baseUrl + "/EditorApiAlpha/DeletePointLoad";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeletePointLoad(_response);
        });
    }

    protected processDeletePointLoad(response: Response): Promise<Result> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Result.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * @return OK
     */
    deletePointLoads(body: IModelEntity[]): Promise<Result> {
        let url_ = this.baseUrl + "/EditorApiAlpha/DeletePointLoads";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeletePointLoads(_response);
        });
    }

    protected processDeletePointLoads(response: Response): Promise<Result> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Result.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * @return OK
     */
    createShearDiagram(body: ShearDiagramResponse): Promise<Result> {
        let url_ = this.baseUrl + "/EditorApiAlpha/CreateShearDiagram";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateShearDiagram(_response);
        });
    }

    protected processCreateShearDiagram(response: Response): Promise<Result> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Result.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * @return OK
     */
    createShearDiagrams(body: ShearDiagramResponse[]): Promise<Result> {
        let url_ = this.baseUrl + "/EditorApiAlpha/CreateShearDiagrams";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateShearDiagrams(_response);
        });
    }

    protected processCreateShearDiagrams(response: Response): Promise<Result> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Result.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * @return OK
     */
    createMomentDiagram(body: MomentDiagramResponse): Promise<Result> {
        let url_ = this.baseUrl + "/EditorApiAlpha/CreateMomentDiagram";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateMomentDiagram(_response);
        });
    }

    protected processCreateMomentDiagram(response: Response): Promise<Result> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Result.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * @return OK
     */
    createMomentDiagrams(body: MomentDiagramResponse[]): Promise<Result> {
        let url_ = this.baseUrl + "/EditorApiAlpha/CreateMomentDiagrams";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateMomentDiagrams(_response);
        });
    }

    protected processCreateMomentDiagrams(response: Response): Promise<Result> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Result.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * @return OK
     */
    createDeflectionDiagram(body: DeflectionDiagramResponse): Promise<Result> {
        let url_ = this.baseUrl + "/EditorApiAlpha/CreateDeflectionDiagram";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateDeflectionDiagram(_response);
        });
    }

    protected processCreateDeflectionDiagram(response: Response): Promise<Result> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Result.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * @return OK
     */
    createDeflectionDiagrams(body: DeflectionDiagramResponse[]): Promise<Result> {
        let url_ = this.baseUrl + "/EditorApiAlpha/CreateDeflectionDiagrams";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateDeflectionDiagrams(_response);
        });
    }

    protected processCreateDeflectionDiagrams(response: Response): Promise<Result> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Result.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * @return OK
     */
    displayModelProposal(body: ModelProposalResponse): Promise<Result> {
        let url_ = this.baseUrl + "/EditorApiAlpha/DisplayModelProposal";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDisplayModelProposal(_response);
        });
    }

    protected processDisplayModelProposal(response: Response): Promise<Result> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Result.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * @return OK
     */
    clearModelProposals(): Promise<Result> {
        let url_ = this.baseUrl + "/EditorApiAlpha/ClearModelProposals";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processClearModelProposals(_response);
        });
    }

    protected processClearModelProposals(response: Response): Promise<Result> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Result.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * @return OK
     */
    setSettings(body: ModelSettings): Promise<Result> {
        let url_ = this.baseUrl + "/EditorApiAlpha/SetSettings";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSetSettings(_response);
        });
    }

    protected processSetSettings(response: Response): Promise<Result> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Result.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * @return OK
     */
    setGlobalStresses(body: GlobalStresses): Promise<Result> {
        let url_ = this.baseUrl + "/EditorApiAlpha/SetGlobalStresses";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSetGlobalStresses(_response);
        });
    }

    protected processSetGlobalStresses(response: Response): Promise<Result> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Result.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * @return OK
     */
    clear(): Promise<Result> {
        let url_ = this.baseUrl + "/EditorApiAlpha/Clear";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processClear(_response);
        });
    }

    protected processClear(response: Response): Promise<Result> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Result.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * @return OK
     */
    clearCurrentOverlay(): Promise<Result> {
        let url_ = this.baseUrl + "/EditorApiAlpha/ClearCurrentOverlay";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processClearCurrentOverlay(_response);
        });
    }

    protected processClearCurrentOverlay(response: Response): Promise<Result> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Result.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * @return OK
     */
    reduceChangeSelectionCommand(body: ChangeSelectionCommand): Promise<Result> {
        let url_ = this.baseUrl + "/EditorApiAlpha/ReduceChangeSelectionCommand";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processReduceChangeSelectionCommand(_response);
        });
    }

    protected processReduceChangeSelectionCommand(response: Response): Promise<Result> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Result.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * @return OK
     */
    reduceMoveNodeCommand(body: MoveNodeCommand): Promise<Result> {
        let url_ = this.baseUrl + "/EditorApiAlpha/ReduceMoveNodeCommand";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processReduceMoveNodeCommand(_response);
        });
    }

    protected processReduceMoveNodeCommand(response: Response): Promise<Result> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Result.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * @return OK
     */
    reducePutNodeClientCommand(body: PutNodeClientCommand): Promise<Result> {
        let url_ = this.baseUrl + "/EditorApiAlpha/ReducePutNodeClientCommand";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processReducePutNodeClientCommand(_response);
        });
    }

    protected processReducePutNodeClientCommand(response: Response): Promise<Result> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Result.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class AnalysisSettings implements IAnalysisSettings {
    element1DAnalysisType!: Element1dAnalysisType;

    constructor(data?: IAnalysisSettings) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.element1DAnalysisType = _data["element1DAnalysisType"];
        }
    }

    static fromJS(data: any): AnalysisSettings {
        data = typeof data === 'object' ? data : {};
        let result = new AnalysisSettings();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["element1DAnalysisType"] = this.element1DAnalysisType;
        return data;
    }
}

export interface IAnalysisSettings {
    element1DAnalysisType: Element1dAnalysisType;
}

export class Angle implements IAngle {
    value!: number;
    unit!: AngleUnit;

    constructor(data?: IAngle) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.value = _data["value"];
            this.unit = _data["unit"];
        }
    }

    static fromJS(data: any): Angle {
        data = typeof data === 'object' ? data : {};
        let result = new Angle();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        data["unit"] = this.unit;
        return data;
    }
}

export interface IAngle {
    value: number;
    unit: AngleUnit;
}

export enum AngleUnit {
    _0 = 0,
    _1 = 1,
    _2 = 2,
}

export class BeamOsError implements IBeamOsError {
    code!: string;
    description!: string;
    type!: ErrorType;
    readonly numericType!: number;
    metadata?: { [key: string]: string; } | undefined;

    constructor(data?: IBeamOsError) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.code = _data["code"];
            this.description = _data["description"];
            this.type = _data["type"];
            (<any>this).numericType = _data["numericType"];
            if (_data["metadata"]) {
                this.metadata = {} as any;
                for (let key in _data["metadata"]) {
                    if (_data["metadata"].hasOwnProperty(key))
                        (<any>this.metadata)![key] = _data["metadata"][key];
                }
            }
        }
    }

    static fromJS(data: any): BeamOsError {
        data = typeof data === 'object' ? data : {};
        let result = new BeamOsError();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["description"] = this.description;
        data["type"] = this.type;
        data["numericType"] = this.numericType;
        if (this.metadata) {
            data["metadata"] = {};
            for (let key in this.metadata) {
                if (this.metadata.hasOwnProperty(key))
                    (<any>data["metadata"])[key] = (<any>this.metadata)[key];
            }
        }
        return data;
    }
}

export interface IBeamOsError {
    code: string;
    description: string;
    type: ErrorType;
    numericType: number;
    metadata?: { [key: string]: string; } | undefined;
}

export enum BeamOsObjectType {
    _0 = 0,
    _1 = 1,
    _2 = 2,
    _3 = 3,
    _4 = 4,
    _5 = 5,
    _6 = 6,
    _7 = 7,
    _8 = 8,
    _9 = 9,
    _10 = 10,
    _11 = 11,
    _12 = 12,
}

export class ChangeSelectionCommand implements IChangeSelectionCommand {
    canvasId!: string;
    selectedObjects!: SelectedObject[];

    constructor(data?: IChangeSelectionCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.selectedObjects = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.canvasId = _data["canvasId"];
            if (Array.isArray(_data["selectedObjects"])) {
                this.selectedObjects = [] as any;
                for (let item of _data["selectedObjects"])
                    this.selectedObjects!.push(SelectedObject.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ChangeSelectionCommand {
        data = typeof data === 'object' ? data : {};
        let result = new ChangeSelectionCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["canvasId"] = this.canvasId;
        if (Array.isArray(this.selectedObjects)) {
            data["selectedObjects"] = [];
            for (let item of this.selectedObjects)
                data["selectedObjects"].push(item ? item.toJSON() : <any>undefined);
        }
        return data;
    }
}

export interface IChangeSelectionCommand {
    canvasId: string;
    selectedObjects: SelectedObject[];
}

export class Coordinate3D implements ICoordinate3D {
    x!: number;
    y!: number;
    z!: number;

    constructor(data?: ICoordinate3D) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.x = _data["x"];
            this.y = _data["y"];
            this.z = _data["z"];
        }
    }

    static fromJS(data: any): Coordinate3D {
        data = typeof data === 'object' ? data : {};
        let result = new Coordinate3D();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["x"] = this.x;
        data["y"] = this.y;
        data["z"] = this.z;
        return data;
    }
}

export interface ICoordinate3D {
    x: number;
    y: number;
    z: number;
}

export class CreateElement1dProposalResponse implements ICreateElement1dProposalResponse {
    sectionProfileRotation!: Angle;
    readonly metadata?: { [key: string]: string; } | undefined;
    id!: number;
    startNodeId!: ProposedID;
    endNodeId!: ProposedID;
    materialId!: ProposedID;
    sectionProfileId!: ProposedID;

    constructor(data?: ICreateElement1dProposalResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.sectionProfileRotation = new Angle();
            this.startNodeId = new ProposedID();
            this.endNodeId = new ProposedID();
            this.materialId = new ProposedID();
            this.sectionProfileId = new ProposedID();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.sectionProfileRotation = _data["sectionProfileRotation"] ? Angle.fromJS(_data["sectionProfileRotation"]) : new Angle();
            if (_data["metadata"]) {
                (<any>this).metadata = {} as any;
                for (let key in _data["metadata"]) {
                    if (_data["metadata"].hasOwnProperty(key))
                        (<any>(<any>this).metadata)![key] = _data["metadata"][key];
                }
            }
            this.id = _data["id"];
            this.startNodeId = _data["startNodeId"] ? ProposedID.fromJS(_data["startNodeId"]) : new ProposedID();
            this.endNodeId = _data["endNodeId"] ? ProposedID.fromJS(_data["endNodeId"]) : new ProposedID();
            this.materialId = _data["materialId"] ? ProposedID.fromJS(_data["materialId"]) : new ProposedID();
            this.sectionProfileId = _data["sectionProfileId"] ? ProposedID.fromJS(_data["sectionProfileId"]) : new ProposedID();
        }
    }

    static fromJS(data: any): CreateElement1dProposalResponse {
        data = typeof data === 'object' ? data : {};
        let result = new CreateElement1dProposalResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sectionProfileRotation"] = this.sectionProfileRotation ? this.sectionProfileRotation.toJSON() : <any>undefined;
        if (this.metadata) {
            data["metadata"] = {};
            for (let key in this.metadata) {
                if (this.metadata.hasOwnProperty(key))
                    (<any>data["metadata"])[key] = (<any>this.metadata)[key];
            }
        }
        data["id"] = this.id;
        data["startNodeId"] = this.startNodeId ? this.startNodeId.toJSON() : <any>undefined;
        data["endNodeId"] = this.endNodeId ? this.endNodeId.toJSON() : <any>undefined;
        data["materialId"] = this.materialId ? this.materialId.toJSON() : <any>undefined;
        data["sectionProfileId"] = this.sectionProfileId ? this.sectionProfileId.toJSON() : <any>undefined;
        return data;
    }
}

export interface ICreateElement1dProposalResponse {
    sectionProfileRotation: Angle;
    metadata?: { [key: string]: string; } | undefined;
    id: number;
    startNodeId: ProposedID;
    endNodeId: ProposedID;
    materialId: ProposedID;
    sectionProfileId: ProposedID;
}

export class CreateNodeProposalResponse implements ICreateNodeProposalResponse {
    locationPoint!: Point;
    restraint!: Restraint;
    metadata?: { [key: string]: string; } | undefined;
    id!: number;

    constructor(data?: ICreateNodeProposalResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.locationPoint = new Point();
            this.restraint = new Restraint();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.locationPoint = _data["locationPoint"] ? Point.fromJS(_data["locationPoint"]) : new Point();
            this.restraint = _data["restraint"] ? Restraint.fromJS(_data["restraint"]) : new Restraint();
            if (_data["metadata"]) {
                this.metadata = {} as any;
                for (let key in _data["metadata"]) {
                    if (_data["metadata"].hasOwnProperty(key))
                        (<any>this.metadata)![key] = _data["metadata"][key];
                }
            }
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): CreateNodeProposalResponse {
        data = typeof data === 'object' ? data : {};
        let result = new CreateNodeProposalResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["locationPoint"] = this.locationPoint ? this.locationPoint.toJSON() : <any>undefined;
        data["restraint"] = this.restraint ? this.restraint.toJSON() : <any>undefined;
        if (this.metadata) {
            data["metadata"] = {};
            for (let key in this.metadata) {
                if (this.metadata.hasOwnProperty(key))
                    (<any>data["metadata"])[key] = (<any>this.metadata)[key];
            }
        }
        data["id"] = this.id;
        return data;
    }
}

export interface ICreateNodeProposalResponse {
    locationPoint: Point;
    restraint: Restraint;
    metadata?: { [key: string]: string; } | undefined;
    id: number;
}

export class DeflectionDiagramResponse implements IDeflectionDiagramResponse {
    element1dId!: number;
    numSteps!: number;
    offsets!: number[];

    constructor(data?: IDeflectionDiagramResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.offsets = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.element1dId = _data["element1dId"];
            this.numSteps = _data["numSteps"];
            if (Array.isArray(_data["offsets"])) {
                this.offsets = [] as any;
                for (let item of _data["offsets"])
                    this.offsets!.push(item);
            }
        }
    }

    static fromJS(data: any): DeflectionDiagramResponse {
        data = typeof data === 'object' ? data : {};
        let result = new DeflectionDiagramResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["element1dId"] = this.element1dId;
        data["numSteps"] = this.numSteps;
        if (Array.isArray(this.offsets)) {
            data["offsets"] = [];
            for (let item of this.offsets)
                data["offsets"].push(item);
        }
        return data;
    }
}

export interface IDeflectionDiagramResponse {
    element1dId: number;
    numSteps: number;
    offsets: number[];
}

export class DiagramConsistentIntervalResponse implements IDiagramConsistentIntervalResponse {
    startLocation!: Length;
    endLocation!: Length;
    polynomialCoefficients!: number[];

    constructor(data?: IDiagramConsistentIntervalResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.startLocation = new Length();
            this.endLocation = new Length();
            this.polynomialCoefficients = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.startLocation = _data["startLocation"] ? Length.fromJS(_data["startLocation"]) : new Length();
            this.endLocation = _data["endLocation"] ? Length.fromJS(_data["endLocation"]) : new Length();
            if (Array.isArray(_data["polynomialCoefficients"])) {
                this.polynomialCoefficients = [] as any;
                for (let item of _data["polynomialCoefficients"])
                    this.polynomialCoefficients!.push(item);
            }
        }
    }

    static fromJS(data: any): DiagramConsistentIntervalResponse {
        data = typeof data === 'object' ? data : {};
        let result = new DiagramConsistentIntervalResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["startLocation"] = this.startLocation ? this.startLocation.toJSON() : <any>undefined;
        data["endLocation"] = this.endLocation ? this.endLocation.toJSON() : <any>undefined;
        if (Array.isArray(this.polynomialCoefficients)) {
            data["polynomialCoefficients"] = [];
            for (let item of this.polynomialCoefficients)
                data["polynomialCoefficients"].push(item);
        }
        return data;
    }
}

export interface IDiagramConsistentIntervalResponse {
    startLocation: Length;
    endLocation: Length;
    polynomialCoefficients: number[];
}

export class DiagramConsistentIntervalResponse2 implements IDiagramConsistentIntervalResponse2 {
    startLocation!: Length;
    endLocation!: Length;
    polynomialCoefficients!: number[];

    constructor(data?: IDiagramConsistentIntervalResponse2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.startLocation = new Length();
            this.endLocation = new Length();
            this.polynomialCoefficients = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.startLocation = _data["startLocation"] ? Length.fromJS(_data["startLocation"]) : new Length();
            this.endLocation = _data["endLocation"] ? Length.fromJS(_data["endLocation"]) : new Length();
            if (Array.isArray(_data["polynomialCoefficients"])) {
                this.polynomialCoefficients = [] as any;
                for (let item of _data["polynomialCoefficients"])
                    this.polynomialCoefficients!.push(item);
            }
        }
    }

    static fromJS(data: any): DiagramConsistentIntervalResponse2 {
        data = typeof data === 'object' ? data : {};
        let result = new DiagramConsistentIntervalResponse2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["startLocation"] = this.startLocation ? this.startLocation.toJSON() : <any>undefined;
        data["endLocation"] = this.endLocation ? this.endLocation.toJSON() : <any>undefined;
        if (Array.isArray(this.polynomialCoefficients)) {
            data["polynomialCoefficients"] = [];
            for (let item of this.polynomialCoefficients)
                data["polynomialCoefficients"].push(item);
        }
        return data;
    }
}

export interface IDiagramConsistentIntervalResponse2 {
    startLocation: Length;
    endLocation: Length;
    polynomialCoefficients: number[];
}

export class DisplacementsResponse implements IDisplacementsResponse {
    displacementAlongX!: Length;
    displacementAlongY!: Length;
    displacementAlongZ!: Length;
    rotationAboutX!: Angle;
    rotationAboutY!: Angle;
    rotationAboutZ!: Angle;

    constructor(data?: IDisplacementsResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.displacementAlongX = new Length();
            this.displacementAlongY = new Length();
            this.displacementAlongZ = new Length();
            this.rotationAboutX = new Angle();
            this.rotationAboutY = new Angle();
            this.rotationAboutZ = new Angle();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.displacementAlongX = _data["displacementAlongX"] ? Length.fromJS(_data["displacementAlongX"]) : new Length();
            this.displacementAlongY = _data["displacementAlongY"] ? Length.fromJS(_data["displacementAlongY"]) : new Length();
            this.displacementAlongZ = _data["displacementAlongZ"] ? Length.fromJS(_data["displacementAlongZ"]) : new Length();
            this.rotationAboutX = _data["rotationAboutX"] ? Angle.fromJS(_data["rotationAboutX"]) : new Angle();
            this.rotationAboutY = _data["rotationAboutY"] ? Angle.fromJS(_data["rotationAboutY"]) : new Angle();
            this.rotationAboutZ = _data["rotationAboutZ"] ? Angle.fromJS(_data["rotationAboutZ"]) : new Angle();
        }
    }

    static fromJS(data: any): DisplacementsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new DisplacementsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["displacementAlongX"] = this.displacementAlongX ? this.displacementAlongX.toJSON() : <any>undefined;
        data["displacementAlongY"] = this.displacementAlongY ? this.displacementAlongY.toJSON() : <any>undefined;
        data["displacementAlongZ"] = this.displacementAlongZ ? this.displacementAlongZ.toJSON() : <any>undefined;
        data["rotationAboutX"] = this.rotationAboutX ? this.rotationAboutX.toJSON() : <any>undefined;
        data["rotationAboutY"] = this.rotationAboutY ? this.rotationAboutY.toJSON() : <any>undefined;
        data["rotationAboutZ"] = this.rotationAboutZ ? this.rotationAboutZ.toJSON() : <any>undefined;
        return data;
    }
}

export interface IDisplacementsResponse {
    displacementAlongX: Length;
    displacementAlongY: Length;
    displacementAlongZ: Length;
    rotationAboutX: Angle;
    rotationAboutY: Angle;
    rotationAboutZ: Angle;
}

export enum Element1dAnalysisType {
    _0 = 0,
    _1 = 1,
    _2 = 2,
}

export class Element1dResponse implements IElement1dResponse {
    id!: number;
    modelId!: string;
    startNodeId!: number;
    endNodeId!: number;
    materialId!: number;
    sectionProfileId!: number;
    sectionProfileRotation!: Angle;
    metadata?: { [key: string]: string; } | undefined;

    constructor(data?: IElement1dResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.sectionProfileRotation = new Angle();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.modelId = _data["modelId"];
            this.startNodeId = _data["startNodeId"];
            this.endNodeId = _data["endNodeId"];
            this.materialId = _data["materialId"];
            this.sectionProfileId = _data["sectionProfileId"];
            this.sectionProfileRotation = _data["sectionProfileRotation"] ? Angle.fromJS(_data["sectionProfileRotation"]) : new Angle();
            if (_data["metadata"]) {
                this.metadata = {} as any;
                for (let key in _data["metadata"]) {
                    if (_data["metadata"].hasOwnProperty(key))
                        (<any>this.metadata)![key] = _data["metadata"][key];
                }
            }
        }
    }

    static fromJS(data: any): Element1dResponse {
        data = typeof data === 'object' ? data : {};
        let result = new Element1dResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["modelId"] = this.modelId;
        data["startNodeId"] = this.startNodeId;
        data["endNodeId"] = this.endNodeId;
        data["materialId"] = this.materialId;
        data["sectionProfileId"] = this.sectionProfileId;
        data["sectionProfileRotation"] = this.sectionProfileRotation ? this.sectionProfileRotation.toJSON() : <any>undefined;
        if (this.metadata) {
            data["metadata"] = {};
            for (let key in this.metadata) {
                if (this.metadata.hasOwnProperty(key))
                    (<any>data["metadata"])[key] = (<any>this.metadata)[key];
            }
        }
        return data;
    }
}

export interface IElement1dResponse {
    id: number;
    modelId: string;
    startNodeId: number;
    endNodeId: number;
    materialId: number;
    sectionProfileId: number;
    sectionProfileRotation: Angle;
    metadata?: { [key: string]: string; } | undefined;
}

export class Element1dResultResponse implements IElement1dResultResponse {
    modelId!: string;
    resultSetId!: number;
    element1dId!: number;
    minShear!: Length;
    maxShear!: Length;
    minMoment!: Torque;
    maxMoment!: Torque;
    minDisplacement!: Length;
    maxDisplacement!: Length;

    constructor(data?: IElement1dResultResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.minShear = new Length();
            this.maxShear = new Length();
            this.minMoment = new Torque();
            this.maxMoment = new Torque();
            this.minDisplacement = new Length();
            this.maxDisplacement = new Length();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.modelId = _data["modelId"];
            this.resultSetId = _data["resultSetId"];
            this.element1dId = _data["element1dId"];
            this.minShear = _data["minShear"] ? Length.fromJS(_data["minShear"]) : new Length();
            this.maxShear = _data["maxShear"] ? Length.fromJS(_data["maxShear"]) : new Length();
            this.minMoment = _data["minMoment"] ? Torque.fromJS(_data["minMoment"]) : new Torque();
            this.maxMoment = _data["maxMoment"] ? Torque.fromJS(_data["maxMoment"]) : new Torque();
            this.minDisplacement = _data["minDisplacement"] ? Length.fromJS(_data["minDisplacement"]) : new Length();
            this.maxDisplacement = _data["maxDisplacement"] ? Length.fromJS(_data["maxDisplacement"]) : new Length();
        }
    }

    static fromJS(data: any): Element1dResultResponse {
        data = typeof data === 'object' ? data : {};
        let result = new Element1dResultResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["modelId"] = this.modelId;
        data["resultSetId"] = this.resultSetId;
        data["element1dId"] = this.element1dId;
        data["minShear"] = this.minShear ? this.minShear.toJSON() : <any>undefined;
        data["maxShear"] = this.maxShear ? this.maxShear.toJSON() : <any>undefined;
        data["minMoment"] = this.minMoment ? this.minMoment.toJSON() : <any>undefined;
        data["maxMoment"] = this.maxMoment ? this.maxMoment.toJSON() : <any>undefined;
        data["minDisplacement"] = this.minDisplacement ? this.minDisplacement.toJSON() : <any>undefined;
        data["maxDisplacement"] = this.maxDisplacement ? this.maxDisplacement.toJSON() : <any>undefined;
        return data;
    }
}

export interface IElement1dResultResponse {
    modelId: string;
    resultSetId: number;
    element1dId: number;
    minShear: Length;
    maxShear: Length;
    minMoment: Torque;
    maxMoment: Torque;
    minDisplacement: Length;
    maxDisplacement: Length;
}

export enum ErrorType {
    _0 = 0,
    _1 = 1,
    _2 = 2,
    _3 = 3,
    _4 = 4,
    _5 = 5,
    _6 = 6,
    _7 = 7,
    _8 = 8,
}

export class Force implements IForce {
    value!: number;
    unit!: ForceUnit;

    constructor(data?: IForce) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.value = _data["value"];
            this.unit = _data["unit"];
        }
    }

    static fromJS(data: any): Force {
        data = typeof data === 'object' ? data : {};
        let result = new Force();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        data["unit"] = this.unit;
        return data;
    }
}

export interface IForce {
    value: number;
    unit: ForceUnit;
}

export enum ForceUnit {
    _0 = 0,
    _1 = 1,
    _2 = 2,
    _3 = 3,
    _4 = 4,
}

export class ForcesResponse implements IForcesResponse {
    forceAlongX!: Force;
    forceAlongY!: Force;
    forceAlongZ!: Force;
    momentAboutX!: Torque;
    momentAboutY!: Torque;
    momentAboutZ!: Torque;

    constructor(data?: IForcesResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.forceAlongX = new Force();
            this.forceAlongY = new Force();
            this.forceAlongZ = new Force();
            this.momentAboutX = new Torque();
            this.momentAboutY = new Torque();
            this.momentAboutZ = new Torque();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.forceAlongX = _data["forceAlongX"] ? Force.fromJS(_data["forceAlongX"]) : new Force();
            this.forceAlongY = _data["forceAlongY"] ? Force.fromJS(_data["forceAlongY"]) : new Force();
            this.forceAlongZ = _data["forceAlongZ"] ? Force.fromJS(_data["forceAlongZ"]) : new Force();
            this.momentAboutX = _data["momentAboutX"] ? Torque.fromJS(_data["momentAboutX"]) : new Torque();
            this.momentAboutY = _data["momentAboutY"] ? Torque.fromJS(_data["momentAboutY"]) : new Torque();
            this.momentAboutZ = _data["momentAboutZ"] ? Torque.fromJS(_data["momentAboutZ"]) : new Torque();
        }
    }

    static fromJS(data: any): ForcesResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ForcesResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["forceAlongX"] = this.forceAlongX ? this.forceAlongX.toJSON() : <any>undefined;
        data["forceAlongY"] = this.forceAlongY ? this.forceAlongY.toJSON() : <any>undefined;
        data["forceAlongZ"] = this.forceAlongZ ? this.forceAlongZ.toJSON() : <any>undefined;
        data["momentAboutX"] = this.momentAboutX ? this.momentAboutX.toJSON() : <any>undefined;
        data["momentAboutY"] = this.momentAboutY ? this.momentAboutY.toJSON() : <any>undefined;
        data["momentAboutZ"] = this.momentAboutZ ? this.momentAboutZ.toJSON() : <any>undefined;
        return data;
    }
}

export interface IForcesResponse {
    forceAlongX: Force;
    forceAlongY: Force;
    forceAlongZ: Force;
    momentAboutX: Torque;
    momentAboutY: Torque;
    momentAboutZ: Torque;
}

export class GlobalStresses implements IGlobalStresses {
    maxShear!: Force;
    minShear!: Force;
    maxMoment!: Torque;
    minMoment!: Torque;

    constructor(data?: IGlobalStresses) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.maxShear = new Force();
            this.minShear = new Force();
            this.maxMoment = new Torque();
            this.minMoment = new Torque();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.maxShear = _data["maxShear"] ? Force.fromJS(_data["maxShear"]) : new Force();
            this.minShear = _data["minShear"] ? Force.fromJS(_data["minShear"]) : new Force();
            this.maxMoment = _data["maxMoment"] ? Torque.fromJS(_data["maxMoment"]) : new Torque();
            this.minMoment = _data["minMoment"] ? Torque.fromJS(_data["minMoment"]) : new Torque();
        }
    }

    static fromJS(data: any): GlobalStresses {
        data = typeof data === 'object' ? data : {};
        let result = new GlobalStresses();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["maxShear"] = this.maxShear ? this.maxShear.toJSON() : <any>undefined;
        data["minShear"] = this.minShear ? this.minShear.toJSON() : <any>undefined;
        data["maxMoment"] = this.maxMoment ? this.maxMoment.toJSON() : <any>undefined;
        data["minMoment"] = this.minMoment ? this.minMoment.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGlobalStresses {
    maxShear: Force;
    minShear: Force;
    maxMoment: Torque;
    minMoment: Torque;
}

export class IModelEntity implements IIModelEntity {
    readonly modelId!: string;
    readonly id!: number;

    constructor(data?: IIModelEntity) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).modelId = _data["modelId"];
            (<any>this).id = _data["id"];
        }
    }

    static fromJS(data: any): IModelEntity {
        data = typeof data === 'object' ? data : {};
        let result = new IModelEntity();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["modelId"] = this.modelId;
        data["id"] = this.id;
        return data;
    }
}

export interface IIModelEntity {
    modelId: string;
    id: number;
}

export class Length implements ILength {
    value!: number;
    unit!: LengthUnit;

    constructor(data?: ILength) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.value = _data["value"];
            this.unit = _data["unit"];
        }
    }

    static fromJS(data: any): Length {
        data = typeof data === 'object' ? data : {};
        let result = new Length();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        data["unit"] = this.unit;
        return data;
    }
}

export interface ILength {
    value: number;
    unit: LengthUnit;
}

export enum LengthUnit {
    _0 = 0,
    _1 = 1,
    _2 = 2,
    _3 = 3,
    _4 = 4,
    _5 = 5,
}

export class LoadCase implements ILoadCase {
    name!: string;
    id!: number;

    constructor(data?: ILoadCase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): LoadCase {
        data = typeof data === 'object' ? data : {};
        let result = new LoadCase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["id"] = this.id;
        return data;
    }
}

export interface ILoadCase {
    name: string;
    id: number;
}

export class LoadCombination implements ILoadCombination {
    loadCaseFactors!: { [key: string]: number; };
    id!: number;

    constructor(data?: ILoadCombination) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.loadCaseFactors = {};
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["loadCaseFactors"]) {
                this.loadCaseFactors = {} as any;
                for (let key in _data["loadCaseFactors"]) {
                    if (_data["loadCaseFactors"].hasOwnProperty(key))
                        (<any>this.loadCaseFactors)![key] = _data["loadCaseFactors"][key];
                }
            }
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): LoadCombination {
        data = typeof data === 'object' ? data : {};
        let result = new LoadCombination();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.loadCaseFactors) {
            data["loadCaseFactors"] = {};
            for (let key in this.loadCaseFactors) {
                if (this.loadCaseFactors.hasOwnProperty(key))
                    (<any>data["loadCaseFactors"])[key] = (<any>this.loadCaseFactors)[key];
            }
        }
        data["id"] = this.id;
        return data;
    }
}

export interface ILoadCombination {
    loadCaseFactors: { [key: string]: number; };
    id: number;
}

export class MaterialResponse implements IMaterialResponse {
    id!: number;
    modelId!: string;
    modulusOfElasticity!: number;
    modulusOfRigidity!: number;
    pressureUnit!: PressureUnit;

    constructor(data?: IMaterialResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.modelId = _data["modelId"];
            this.modulusOfElasticity = _data["modulusOfElasticity"];
            this.modulusOfRigidity = _data["modulusOfRigidity"];
            this.pressureUnit = _data["pressureUnit"];
        }
    }

    static fromJS(data: any): MaterialResponse {
        data = typeof data === 'object' ? data : {};
        let result = new MaterialResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["modelId"] = this.modelId;
        data["modulusOfElasticity"] = this.modulusOfElasticity;
        data["modulusOfRigidity"] = this.modulusOfRigidity;
        data["pressureUnit"] = this.pressureUnit;
        return data;
    }
}

export interface IMaterialResponse {
    id: number;
    modelId: string;
    modulusOfElasticity: number;
    modulusOfRigidity: number;
    pressureUnit: PressureUnit;
}

export class ModelProposalInfo implements IModelProposalInfo {
    description?: string | undefined;
    id!: number;
    lastModified!: Date;

    constructor(data?: IModelProposalInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.description = _data["description"];
            this.id = _data["id"];
            this.lastModified = _data["lastModified"] ? new Date(_data["lastModified"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): ModelProposalInfo {
        data = typeof data === 'object' ? data : {};
        let result = new ModelProposalInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["description"] = this.description;
        data["id"] = this.id;
        data["lastModified"] = this.lastModified ? this.lastModified.toISOString() : <any>undefined;
        return data;
    }
}

export interface IModelProposalInfo {
    description?: string | undefined;
    id: number;
    lastModified: Date;
}

export class ModelProposalResponse implements IModelProposalResponse {
    id!: number;
    lastModified!: Date;
    modelProposal!: ModelProposalInfo;
    createNodeProposals?: CreateNodeProposalResponse[] | undefined;
    modifyNodeProposals?: ModifyNodeProposalResponse[] | undefined;
    createElement1dProposals?: CreateElement1dProposalResponse[] | undefined;
    modifyElement1dProposals?: ModifyElement1dProposalResponse[] | undefined;
    materialProposals?: PutMaterialRequest[] | undefined;
    sectionProfileProposals?: PutSectionProfileRequest[] | undefined;
    sectionProfileFromLibraryProposals?: SectionProfileFromLibrary[] | undefined;
    pointLoadProposals?: PointLoad[] | undefined;
    momentLoadProposals?: MomentLoad[] | undefined;
    resultSetProposals?: ResultSet[] | undefined;
    loadCaseProposals?: LoadCase[] | undefined;
    loadCombinationProposals?: LoadCombination[] | undefined;
    proposalIssues?: ProposalIssue[] | undefined;

    constructor(data?: IModelProposalResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.modelProposal = new ModelProposalInfo();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.lastModified = _data["lastModified"] ? new Date(_data["lastModified"].toString()) : <any>undefined;
            this.modelProposal = _data["modelProposal"] ? ModelProposalInfo.fromJS(_data["modelProposal"]) : new ModelProposalInfo();
            if (Array.isArray(_data["createNodeProposals"])) {
                this.createNodeProposals = [] as any;
                for (let item of _data["createNodeProposals"])
                    this.createNodeProposals!.push(CreateNodeProposalResponse.fromJS(item));
            }
            if (Array.isArray(_data["modifyNodeProposals"])) {
                this.modifyNodeProposals = [] as any;
                for (let item of _data["modifyNodeProposals"])
                    this.modifyNodeProposals!.push(ModifyNodeProposalResponse.fromJS(item));
            }
            if (Array.isArray(_data["createElement1dProposals"])) {
                this.createElement1dProposals = [] as any;
                for (let item of _data["createElement1dProposals"])
                    this.createElement1dProposals!.push(CreateElement1dProposalResponse.fromJS(item));
            }
            if (Array.isArray(_data["modifyElement1dProposals"])) {
                this.modifyElement1dProposals = [] as any;
                for (let item of _data["modifyElement1dProposals"])
                    this.modifyElement1dProposals!.push(ModifyElement1dProposalResponse.fromJS(item));
            }
            if (Array.isArray(_data["materialProposals"])) {
                this.materialProposals = [] as any;
                for (let item of _data["materialProposals"])
                    this.materialProposals!.push(PutMaterialRequest.fromJS(item));
            }
            if (Array.isArray(_data["sectionProfileProposals"])) {
                this.sectionProfileProposals = [] as any;
                for (let item of _data["sectionProfileProposals"])
                    this.sectionProfileProposals!.push(PutSectionProfileRequest.fromJS(item));
            }
            if (Array.isArray(_data["sectionProfileFromLibraryProposals"])) {
                this.sectionProfileFromLibraryProposals = [] as any;
                for (let item of _data["sectionProfileFromLibraryProposals"])
                    this.sectionProfileFromLibraryProposals!.push(SectionProfileFromLibrary.fromJS(item));
            }
            if (Array.isArray(_data["pointLoadProposals"])) {
                this.pointLoadProposals = [] as any;
                for (let item of _data["pointLoadProposals"])
                    this.pointLoadProposals!.push(PointLoad.fromJS(item));
            }
            if (Array.isArray(_data["momentLoadProposals"])) {
                this.momentLoadProposals = [] as any;
                for (let item of _data["momentLoadProposals"])
                    this.momentLoadProposals!.push(MomentLoad.fromJS(item));
            }
            if (Array.isArray(_data["resultSetProposals"])) {
                this.resultSetProposals = [] as any;
                for (let item of _data["resultSetProposals"])
                    this.resultSetProposals!.push(ResultSet.fromJS(item));
            }
            if (Array.isArray(_data["loadCaseProposals"])) {
                this.loadCaseProposals = [] as any;
                for (let item of _data["loadCaseProposals"])
                    this.loadCaseProposals!.push(LoadCase.fromJS(item));
            }
            if (Array.isArray(_data["loadCombinationProposals"])) {
                this.loadCombinationProposals = [] as any;
                for (let item of _data["loadCombinationProposals"])
                    this.loadCombinationProposals!.push(LoadCombination.fromJS(item));
            }
            if (Array.isArray(_data["proposalIssues"])) {
                this.proposalIssues = [] as any;
                for (let item of _data["proposalIssues"])
                    this.proposalIssues!.push(ProposalIssue.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ModelProposalResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ModelProposalResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["lastModified"] = this.lastModified ? this.lastModified.toISOString() : <any>undefined;
        data["modelProposal"] = this.modelProposal ? this.modelProposal.toJSON() : <any>undefined;
        if (Array.isArray(this.createNodeProposals)) {
            data["createNodeProposals"] = [];
            for (let item of this.createNodeProposals)
                data["createNodeProposals"].push(item ? item.toJSON() : <any>undefined);
        }
        if (Array.isArray(this.modifyNodeProposals)) {
            data["modifyNodeProposals"] = [];
            for (let item of this.modifyNodeProposals)
                data["modifyNodeProposals"].push(item ? item.toJSON() : <any>undefined);
        }
        if (Array.isArray(this.createElement1dProposals)) {
            data["createElement1dProposals"] = [];
            for (let item of this.createElement1dProposals)
                data["createElement1dProposals"].push(item ? item.toJSON() : <any>undefined);
        }
        if (Array.isArray(this.modifyElement1dProposals)) {
            data["modifyElement1dProposals"] = [];
            for (let item of this.modifyElement1dProposals)
                data["modifyElement1dProposals"].push(item ? item.toJSON() : <any>undefined);
        }
        if (Array.isArray(this.materialProposals)) {
            data["materialProposals"] = [];
            for (let item of this.materialProposals)
                data["materialProposals"].push(item ? item.toJSON() : <any>undefined);
        }
        if (Array.isArray(this.sectionProfileProposals)) {
            data["sectionProfileProposals"] = [];
            for (let item of this.sectionProfileProposals)
                data["sectionProfileProposals"].push(item ? item.toJSON() : <any>undefined);
        }
        if (Array.isArray(this.sectionProfileFromLibraryProposals)) {
            data["sectionProfileFromLibraryProposals"] = [];
            for (let item of this.sectionProfileFromLibraryProposals)
                data["sectionProfileFromLibraryProposals"].push(item ? item.toJSON() : <any>undefined);
        }
        if (Array.isArray(this.pointLoadProposals)) {
            data["pointLoadProposals"] = [];
            for (let item of this.pointLoadProposals)
                data["pointLoadProposals"].push(item ? item.toJSON() : <any>undefined);
        }
        if (Array.isArray(this.momentLoadProposals)) {
            data["momentLoadProposals"] = [];
            for (let item of this.momentLoadProposals)
                data["momentLoadProposals"].push(item ? item.toJSON() : <any>undefined);
        }
        if (Array.isArray(this.resultSetProposals)) {
            data["resultSetProposals"] = [];
            for (let item of this.resultSetProposals)
                data["resultSetProposals"].push(item ? item.toJSON() : <any>undefined);
        }
        if (Array.isArray(this.loadCaseProposals)) {
            data["loadCaseProposals"] = [];
            for (let item of this.loadCaseProposals)
                data["loadCaseProposals"].push(item ? item.toJSON() : <any>undefined);
        }
        if (Array.isArray(this.loadCombinationProposals)) {
            data["loadCombinationProposals"] = [];
            for (let item of this.loadCombinationProposals)
                data["loadCombinationProposals"].push(item ? item.toJSON() : <any>undefined);
        }
        if (Array.isArray(this.proposalIssues)) {
            data["proposalIssues"] = [];
            for (let item of this.proposalIssues)
                data["proposalIssues"].push(item ? item.toJSON() : <any>undefined);
        }
        return data;
    }
}

export interface IModelProposalResponse {
    id: number;
    lastModified: Date;
    modelProposal: ModelProposalInfo;
    createNodeProposals?: CreateNodeProposalResponse[] | undefined;
    modifyNodeProposals?: ModifyNodeProposalResponse[] | undefined;
    createElement1dProposals?: CreateElement1dProposalResponse[] | undefined;
    modifyElement1dProposals?: ModifyElement1dProposalResponse[] | undefined;
    materialProposals?: PutMaterialRequest[] | undefined;
    sectionProfileProposals?: PutSectionProfileRequest[] | undefined;
    sectionProfileFromLibraryProposals?: SectionProfileFromLibrary[] | undefined;
    pointLoadProposals?: PointLoad[] | undefined;
    momentLoadProposals?: MomentLoad[] | undefined;
    resultSetProposals?: ResultSet[] | undefined;
    loadCaseProposals?: LoadCase[] | undefined;
    loadCombinationProposals?: LoadCombination[] | undefined;
    proposalIssues?: ProposalIssue[] | undefined;
}

export class ModelResponse implements IModelResponse {
    id!: string;
    name!: string;
    description!: string;
    settings!: ModelSettings;
    lastModified!: Date;
    nodes?: NodeResponse[] | undefined;
    element1ds?: Element1dResponse[] | undefined;
    materials?: MaterialResponse[] | undefined;
    sectionProfiles?: SectionProfileResponse[] | undefined;
    sectionProfilesFromLibrary?: SectionProfileFromLibrary[] | undefined;
    pointLoads?: PointLoadResponse[] | undefined;
    momentLoads?: MomentLoadResponse[] | undefined;
    resultSets?: ResultSetResponse[] | undefined;
    loadCases?: LoadCase[] | undefined;
    loadCombinations?: LoadCombination[] | undefined;

    constructor(data?: IModelResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.settings = new ModelSettings();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.description = _data["description"];
            this.settings = _data["settings"] ? ModelSettings.fromJS(_data["settings"]) : new ModelSettings();
            this.lastModified = _data["lastModified"] ? new Date(_data["lastModified"].toString()) : <any>undefined;
            if (Array.isArray(_data["nodes"])) {
                this.nodes = [] as any;
                for (let item of _data["nodes"])
                    this.nodes!.push(NodeResponse.fromJS(item));
            }
            if (Array.isArray(_data["element1ds"])) {
                this.element1ds = [] as any;
                for (let item of _data["element1ds"])
                    this.element1ds!.push(Element1dResponse.fromJS(item));
            }
            if (Array.isArray(_data["materials"])) {
                this.materials = [] as any;
                for (let item of _data["materials"])
                    this.materials!.push(MaterialResponse.fromJS(item));
            }
            if (Array.isArray(_data["sectionProfiles"])) {
                this.sectionProfiles = [] as any;
                for (let item of _data["sectionProfiles"])
                    this.sectionProfiles!.push(SectionProfileResponse.fromJS(item));
            }
            if (Array.isArray(_data["sectionProfilesFromLibrary"])) {
                this.sectionProfilesFromLibrary = [] as any;
                for (let item of _data["sectionProfilesFromLibrary"])
                    this.sectionProfilesFromLibrary!.push(SectionProfileFromLibrary.fromJS(item));
            }
            if (Array.isArray(_data["pointLoads"])) {
                this.pointLoads = [] as any;
                for (let item of _data["pointLoads"])
                    this.pointLoads!.push(PointLoadResponse.fromJS(item));
            }
            if (Array.isArray(_data["momentLoads"])) {
                this.momentLoads = [] as any;
                for (let item of _data["momentLoads"])
                    this.momentLoads!.push(MomentLoadResponse.fromJS(item));
            }
            if (Array.isArray(_data["resultSets"])) {
                this.resultSets = [] as any;
                for (let item of _data["resultSets"])
                    this.resultSets!.push(ResultSetResponse.fromJS(item));
            }
            if (Array.isArray(_data["loadCases"])) {
                this.loadCases = [] as any;
                for (let item of _data["loadCases"])
                    this.loadCases!.push(LoadCase.fromJS(item));
            }
            if (Array.isArray(_data["loadCombinations"])) {
                this.loadCombinations = [] as any;
                for (let item of _data["loadCombinations"])
                    this.loadCombinations!.push(LoadCombination.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ModelResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ModelResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["description"] = this.description;
        data["settings"] = this.settings ? this.settings.toJSON() : <any>undefined;
        data["lastModified"] = this.lastModified ? this.lastModified.toISOString() : <any>undefined;
        if (Array.isArray(this.nodes)) {
            data["nodes"] = [];
            for (let item of this.nodes)
                data["nodes"].push(item ? item.toJSON() : <any>undefined);
        }
        if (Array.isArray(this.element1ds)) {
            data["element1ds"] = [];
            for (let item of this.element1ds)
                data["element1ds"].push(item ? item.toJSON() : <any>undefined);
        }
        if (Array.isArray(this.materials)) {
            data["materials"] = [];
            for (let item of this.materials)
                data["materials"].push(item ? item.toJSON() : <any>undefined);
        }
        if (Array.isArray(this.sectionProfiles)) {
            data["sectionProfiles"] = [];
            for (let item of this.sectionProfiles)
                data["sectionProfiles"].push(item ? item.toJSON() : <any>undefined);
        }
        if (Array.isArray(this.sectionProfilesFromLibrary)) {
            data["sectionProfilesFromLibrary"] = [];
            for (let item of this.sectionProfilesFromLibrary)
                data["sectionProfilesFromLibrary"].push(item ? item.toJSON() : <any>undefined);
        }
        if (Array.isArray(this.pointLoads)) {
            data["pointLoads"] = [];
            for (let item of this.pointLoads)
                data["pointLoads"].push(item ? item.toJSON() : <any>undefined);
        }
        if (Array.isArray(this.momentLoads)) {
            data["momentLoads"] = [];
            for (let item of this.momentLoads)
                data["momentLoads"].push(item ? item.toJSON() : <any>undefined);
        }
        if (Array.isArray(this.resultSets)) {
            data["resultSets"] = [];
            for (let item of this.resultSets)
                data["resultSets"].push(item ? item.toJSON() : <any>undefined);
        }
        if (Array.isArray(this.loadCases)) {
            data["loadCases"] = [];
            for (let item of this.loadCases)
                data["loadCases"].push(item ? item.toJSON() : <any>undefined);
        }
        if (Array.isArray(this.loadCombinations)) {
            data["loadCombinations"] = [];
            for (let item of this.loadCombinations)
                data["loadCombinations"].push(item ? item.toJSON() : <any>undefined);
        }
        return data;
    }
}

export interface IModelResponse {
    id: string;
    name: string;
    description: string;
    settings: ModelSettings;
    lastModified: Date;
    nodes?: NodeResponse[] | undefined;
    element1ds?: Element1dResponse[] | undefined;
    materials?: MaterialResponse[] | undefined;
    sectionProfiles?: SectionProfileResponse[] | undefined;
    sectionProfilesFromLibrary?: SectionProfileFromLibrary[] | undefined;
    pointLoads?: PointLoadResponse[] | undefined;
    momentLoads?: MomentLoadResponse[] | undefined;
    resultSets?: ResultSetResponse[] | undefined;
    loadCases?: LoadCase[] | undefined;
    loadCombinations?: LoadCombination[] | undefined;
}

export class ModelSettings implements IModelSettings {
    unitSettings!: UnitSettings;
    analysisSettings!: AnalysisSettings;
    yAxisUp!: boolean;

    constructor(data?: IModelSettings) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.unitSettings = new UnitSettings();
            this.analysisSettings = new AnalysisSettings();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.unitSettings = _data["unitSettings"] ? UnitSettings.fromJS(_data["unitSettings"]) : new UnitSettings();
            this.analysisSettings = _data["analysisSettings"] ? AnalysisSettings.fromJS(_data["analysisSettings"]) : new AnalysisSettings();
            this.yAxisUp = _data["yAxisUp"];
        }
    }

    static fromJS(data: any): ModelSettings {
        data = typeof data === 'object' ? data : {};
        let result = new ModelSettings();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["unitSettings"] = this.unitSettings ? this.unitSettings.toJSON() : <any>undefined;
        data["analysisSettings"] = this.analysisSettings ? this.analysisSettings.toJSON() : <any>undefined;
        data["yAxisUp"] = this.yAxisUp;
        return data;
    }
}

export interface IModelSettings {
    unitSettings: UnitSettings;
    analysisSettings: AnalysisSettings;
    yAxisUp: boolean;
}

export class ModifyElement1dProposalResponse implements IModifyElement1dProposalResponse {
    sectionProfileRotation!: Angle;
    readonly metadata?: { [key: string]: string; } | undefined;
    id!: number;
    existingElement1dId!: number;
    startNodeId!: ProposedID;
    endNodeId!: ProposedID;
    materialId!: ProposedID;
    sectionProfileId!: ProposedID;

    constructor(data?: IModifyElement1dProposalResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.sectionProfileRotation = new Angle();
            this.startNodeId = new ProposedID();
            this.endNodeId = new ProposedID();
            this.materialId = new ProposedID();
            this.sectionProfileId = new ProposedID();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.sectionProfileRotation = _data["sectionProfileRotation"] ? Angle.fromJS(_data["sectionProfileRotation"]) : new Angle();
            if (_data["metadata"]) {
                (<any>this).metadata = {} as any;
                for (let key in _data["metadata"]) {
                    if (_data["metadata"].hasOwnProperty(key))
                        (<any>(<any>this).metadata)![key] = _data["metadata"][key];
                }
            }
            this.id = _data["id"];
            this.existingElement1dId = _data["existingElement1dId"];
            this.startNodeId = _data["startNodeId"] ? ProposedID.fromJS(_data["startNodeId"]) : new ProposedID();
            this.endNodeId = _data["endNodeId"] ? ProposedID.fromJS(_data["endNodeId"]) : new ProposedID();
            this.materialId = _data["materialId"] ? ProposedID.fromJS(_data["materialId"]) : new ProposedID();
            this.sectionProfileId = _data["sectionProfileId"] ? ProposedID.fromJS(_data["sectionProfileId"]) : new ProposedID();
        }
    }

    static fromJS(data: any): ModifyElement1dProposalResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ModifyElement1dProposalResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sectionProfileRotation"] = this.sectionProfileRotation ? this.sectionProfileRotation.toJSON() : <any>undefined;
        if (this.metadata) {
            data["metadata"] = {};
            for (let key in this.metadata) {
                if (this.metadata.hasOwnProperty(key))
                    (<any>data["metadata"])[key] = (<any>this.metadata)[key];
            }
        }
        data["id"] = this.id;
        data["existingElement1dId"] = this.existingElement1dId;
        data["startNodeId"] = this.startNodeId ? this.startNodeId.toJSON() : <any>undefined;
        data["endNodeId"] = this.endNodeId ? this.endNodeId.toJSON() : <any>undefined;
        data["materialId"] = this.materialId ? this.materialId.toJSON() : <any>undefined;
        data["sectionProfileId"] = this.sectionProfileId ? this.sectionProfileId.toJSON() : <any>undefined;
        return data;
    }
}

export interface IModifyElement1dProposalResponse {
    sectionProfileRotation: Angle;
    metadata?: { [key: string]: string; } | undefined;
    id: number;
    existingElement1dId: number;
    startNodeId: ProposedID;
    endNodeId: ProposedID;
    materialId: ProposedID;
    sectionProfileId: ProposedID;
}

export class ModifyNodeProposalResponse implements IModifyNodeProposalResponse {
    locationPoint!: Point;
    restraint!: Restraint;
    metadata?: { [key: string]: string; } | undefined;
    id!: number;
    existingNodeId!: number;

    constructor(data?: IModifyNodeProposalResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.locationPoint = new Point();
            this.restraint = new Restraint();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.locationPoint = _data["locationPoint"] ? Point.fromJS(_data["locationPoint"]) : new Point();
            this.restraint = _data["restraint"] ? Restraint.fromJS(_data["restraint"]) : new Restraint();
            if (_data["metadata"]) {
                this.metadata = {} as any;
                for (let key in _data["metadata"]) {
                    if (_data["metadata"].hasOwnProperty(key))
                        (<any>this.metadata)![key] = _data["metadata"][key];
                }
            }
            this.id = _data["id"];
            this.existingNodeId = _data["existingNodeId"];
        }
    }

    static fromJS(data: any): ModifyNodeProposalResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ModifyNodeProposalResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["locationPoint"] = this.locationPoint ? this.locationPoint.toJSON() : <any>undefined;
        data["restraint"] = this.restraint ? this.restraint.toJSON() : <any>undefined;
        if (this.metadata) {
            data["metadata"] = {};
            for (let key in this.metadata) {
                if (this.metadata.hasOwnProperty(key))
                    (<any>data["metadata"])[key] = (<any>this.metadata)[key];
            }
        }
        data["id"] = this.id;
        data["existingNodeId"] = this.existingNodeId;
        return data;
    }
}

export interface IModifyNodeProposalResponse {
    locationPoint: Point;
    restraint: Restraint;
    metadata?: { [key: string]: string; } | undefined;
    id: number;
    existingNodeId: number;
}

export class MomentDiagramResponse implements IMomentDiagramResponse {
    modelId!: string;
    resultSetId!: number;
    element1dId!: number;
    lengthUnit!: LengthUnit;
    torqueUnit!: TorqueUnit;
    elementLength!: Length;
    intervals!: DiagramConsistentIntervalResponse2[];

    constructor(data?: IMomentDiagramResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.elementLength = new Length();
            this.intervals = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.modelId = _data["modelId"];
            this.resultSetId = _data["resultSetId"];
            this.element1dId = _data["element1dId"];
            this.lengthUnit = _data["lengthUnit"];
            this.torqueUnit = _data["torqueUnit"];
            this.elementLength = _data["elementLength"] ? Length.fromJS(_data["elementLength"]) : new Length();
            if (Array.isArray(_data["intervals"])) {
                this.intervals = [] as any;
                for (let item of _data["intervals"])
                    this.intervals!.push(DiagramConsistentIntervalResponse2.fromJS(item));
            }
        }
    }

    static fromJS(data: any): MomentDiagramResponse {
        data = typeof data === 'object' ? data : {};
        let result = new MomentDiagramResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["modelId"] = this.modelId;
        data["resultSetId"] = this.resultSetId;
        data["element1dId"] = this.element1dId;
        data["lengthUnit"] = this.lengthUnit;
        data["torqueUnit"] = this.torqueUnit;
        data["elementLength"] = this.elementLength ? this.elementLength.toJSON() : <any>undefined;
        if (Array.isArray(this.intervals)) {
            data["intervals"] = [];
            for (let item of this.intervals)
                data["intervals"].push(item ? item.toJSON() : <any>undefined);
        }
        return data;
    }
}

export interface IMomentDiagramResponse {
    modelId: string;
    resultSetId: number;
    element1dId: number;
    lengthUnit: LengthUnit;
    torqueUnit: TorqueUnit;
    elementLength: Length;
    intervals: DiagramConsistentIntervalResponse2[];
}

export class MomentLoad implements IMomentLoad {
    nodeId!: number;
    loadCaseId!: number;
    torque!: Torque;
    axisDirection!: Vector3;
    id!: number;

    constructor(data?: IMomentLoad) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.torque = new Torque();
            this.axisDirection = new Vector3();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.nodeId = _data["nodeId"];
            this.loadCaseId = _data["loadCaseId"];
            this.torque = _data["torque"] ? Torque.fromJS(_data["torque"]) : new Torque();
            this.axisDirection = _data["axisDirection"] ? Vector3.fromJS(_data["axisDirection"]) : new Vector3();
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): MomentLoad {
        data = typeof data === 'object' ? data : {};
        let result = new MomentLoad();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["nodeId"] = this.nodeId;
        data["loadCaseId"] = this.loadCaseId;
        data["torque"] = this.torque ? this.torque.toJSON() : <any>undefined;
        data["axisDirection"] = this.axisDirection ? this.axisDirection.toJSON() : <any>undefined;
        data["id"] = this.id;
        return data;
    }
}

export interface IMomentLoad {
    nodeId: number;
    loadCaseId: number;
    torque: Torque;
    axisDirection: Vector3;
    id: number;
}

export class MomentLoadResponse implements IMomentLoadResponse {
    id!: number;
    nodeId!: number;
    loadCaseId!: number;
    modelId!: string;
    torque!: Torque;
    axisDirection!: Vector3;

    constructor(data?: IMomentLoadResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.torque = new Torque();
            this.axisDirection = new Vector3();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nodeId = _data["nodeId"];
            this.loadCaseId = _data["loadCaseId"];
            this.modelId = _data["modelId"];
            this.torque = _data["torque"] ? Torque.fromJS(_data["torque"]) : new Torque();
            this.axisDirection = _data["axisDirection"] ? Vector3.fromJS(_data["axisDirection"]) : new Vector3();
        }
    }

    static fromJS(data: any): MomentLoadResponse {
        data = typeof data === 'object' ? data : {};
        let result = new MomentLoadResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nodeId"] = this.nodeId;
        data["loadCaseId"] = this.loadCaseId;
        data["modelId"] = this.modelId;
        data["torque"] = this.torque ? this.torque.toJSON() : <any>undefined;
        data["axisDirection"] = this.axisDirection ? this.axisDirection.toJSON() : <any>undefined;
        return data;
    }
}

export interface IMomentLoadResponse {
    id: number;
    nodeId: number;
    loadCaseId: number;
    modelId: string;
    torque: Torque;
    axisDirection: Vector3;
}

export class MoveNodeCommand implements IMoveNodeCommand {
    canvasId!: string;
    nodeId!: number;
    previousLocation!: Coordinate3D;
    newLocation!: Coordinate3D;
    handledByEditor!: boolean;
    handledByBlazor!: boolean;
    handledByServer!: boolean;

    constructor(data?: IMoveNodeCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.previousLocation = new Coordinate3D();
            this.newLocation = new Coordinate3D();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.canvasId = _data["canvasId"];
            this.nodeId = _data["nodeId"];
            this.previousLocation = _data["previousLocation"] ? Coordinate3D.fromJS(_data["previousLocation"]) : new Coordinate3D();
            this.newLocation = _data["newLocation"] ? Coordinate3D.fromJS(_data["newLocation"]) : new Coordinate3D();
            this.handledByEditor = _data["handledByEditor"];
            this.handledByBlazor = _data["handledByBlazor"];
            this.handledByServer = _data["handledByServer"];
        }
    }

    static fromJS(data: any): MoveNodeCommand {
        data = typeof data === 'object' ? data : {};
        let result = new MoveNodeCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["canvasId"] = this.canvasId;
        data["nodeId"] = this.nodeId;
        data["previousLocation"] = this.previousLocation ? this.previousLocation.toJSON() : <any>undefined;
        data["newLocation"] = this.newLocation ? this.newLocation.toJSON() : <any>undefined;
        data["handledByEditor"] = this.handledByEditor;
        data["handledByBlazor"] = this.handledByBlazor;
        data["handledByServer"] = this.handledByServer;
        return data;
    }
}

export interface IMoveNodeCommand {
    canvasId: string;
    nodeId: number;
    previousLocation: Coordinate3D;
    newLocation: Coordinate3D;
    handledByEditor: boolean;
    handledByBlazor: boolean;
    handledByServer: boolean;
}

export class NodeResponse implements INodeResponse {
    id!: number;
    modelId!: string;
    locationPoint!: Point;
    restraint!: Restraint;

    constructor(data?: INodeResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.locationPoint = new Point();
            this.restraint = new Restraint();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.modelId = _data["modelId"];
            this.locationPoint = _data["locationPoint"] ? Point.fromJS(_data["locationPoint"]) : new Point();
            this.restraint = _data["restraint"] ? Restraint.fromJS(_data["restraint"]) : new Restraint();
        }
    }

    static fromJS(data: any): NodeResponse {
        data = typeof data === 'object' ? data : {};
        let result = new NodeResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["modelId"] = this.modelId;
        data["locationPoint"] = this.locationPoint ? this.locationPoint.toJSON() : <any>undefined;
        data["restraint"] = this.restraint ? this.restraint.toJSON() : <any>undefined;
        return data;
    }
}

export interface INodeResponse {
    id: number;
    modelId: string;
    locationPoint: Point;
    restraint: Restraint;
}

export class NodeResultResponse implements INodeResultResponse {
    modelId!: string;
    resultSetId!: number;
    nodeId!: number;
    forces!: ForcesResponse;
    displacements!: DisplacementsResponse;

    constructor(data?: INodeResultResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.forces = new ForcesResponse();
            this.displacements = new DisplacementsResponse();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.modelId = _data["modelId"];
            this.resultSetId = _data["resultSetId"];
            this.nodeId = _data["nodeId"];
            this.forces = _data["forces"] ? ForcesResponse.fromJS(_data["forces"]) : new ForcesResponse();
            this.displacements = _data["displacements"] ? DisplacementsResponse.fromJS(_data["displacements"]) : new DisplacementsResponse();
        }
    }

    static fromJS(data: any): NodeResultResponse {
        data = typeof data === 'object' ? data : {};
        let result = new NodeResultResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["modelId"] = this.modelId;
        data["resultSetId"] = this.resultSetId;
        data["nodeId"] = this.nodeId;
        data["forces"] = this.forces ? this.forces.toJSON() : <any>undefined;
        data["displacements"] = this.displacements ? this.displacements.toJSON() : <any>undefined;
        return data;
    }
}

export interface INodeResultResponse {
    modelId: string;
    resultSetId: number;
    nodeId: number;
    forces: ForcesResponse;
    displacements: DisplacementsResponse;
}

export class Point implements IPoint {
    x!: number;
    y!: number;
    z!: number;
    lengthUnit!: LengthUnit;

    constructor(data?: IPoint) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.x = _data["x"];
            this.y = _data["y"];
            this.z = _data["z"];
            this.lengthUnit = _data["lengthUnit"];
        }
    }

    static fromJS(data: any): Point {
        data = typeof data === 'object' ? data : {};
        let result = new Point();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["x"] = this.x;
        data["y"] = this.y;
        data["z"] = this.z;
        data["lengthUnit"] = this.lengthUnit;
        return data;
    }
}

export interface IPoint {
    x: number;
    y: number;
    z: number;
    lengthUnit: LengthUnit;
}

export class PointLoad implements IPointLoad {
    nodeId!: number;
    loadCaseId!: number;
    force!: Force;
    direction!: Vector3;
    id!: number;

    constructor(data?: IPointLoad) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.force = new Force();
            this.direction = new Vector3();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.nodeId = _data["nodeId"];
            this.loadCaseId = _data["loadCaseId"];
            this.force = _data["force"] ? Force.fromJS(_data["force"]) : new Force();
            this.direction = _data["direction"] ? Vector3.fromJS(_data["direction"]) : new Vector3();
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): PointLoad {
        data = typeof data === 'object' ? data : {};
        let result = new PointLoad();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["nodeId"] = this.nodeId;
        data["loadCaseId"] = this.loadCaseId;
        data["force"] = this.force ? this.force.toJSON() : <any>undefined;
        data["direction"] = this.direction ? this.direction.toJSON() : <any>undefined;
        data["id"] = this.id;
        return data;
    }
}

export interface IPointLoad {
    nodeId: number;
    loadCaseId: number;
    force: Force;
    direction: Vector3;
    id: number;
}

export class PointLoadResponse implements IPointLoadResponse {
    nodeId!: number;
    loadCaseId!: number;
    force!: Force;
    direction!: Vector3;
    id!: number;
    modelId!: string;

    constructor(data?: IPointLoadResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.force = new Force();
            this.direction = new Vector3();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.nodeId = _data["nodeId"];
            this.loadCaseId = _data["loadCaseId"];
            this.force = _data["force"] ? Force.fromJS(_data["force"]) : new Force();
            this.direction = _data["direction"] ? Vector3.fromJS(_data["direction"]) : new Vector3();
            this.id = _data["id"];
            this.modelId = _data["modelId"];
        }
    }

    static fromJS(data: any): PointLoadResponse {
        data = typeof data === 'object' ? data : {};
        let result = new PointLoadResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["nodeId"] = this.nodeId;
        data["loadCaseId"] = this.loadCaseId;
        data["force"] = this.force ? this.force.toJSON() : <any>undefined;
        data["direction"] = this.direction ? this.direction.toJSON() : <any>undefined;
        data["id"] = this.id;
        data["modelId"] = this.modelId;
        return data;
    }
}

export interface IPointLoadResponse {
    nodeId: number;
    loadCaseId: number;
    force: Force;
    direction: Vector3;
    id: number;
    modelId: string;
}

export enum PressureUnit {
    _0 = 0,
    _7 = 7,
    _8 = 8,
    _9 = 9,
    _10 = 10,
    _11 = 11,
    _17 = 17,
    _18 = 18,
    _19 = 19,
    _21 = 21,
    _22 = 22,
}

export class ProposalIssue implements IProposalIssue {
    proposedId!: ProposedID;
    objectType!: BeamOsObjectType;
    message!: string;
    severity!: ProposalIssueSeverity;
    code!: ProposalIssueCode;
    id!: number;

    constructor(data?: IProposalIssue) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.proposedId = new ProposedID();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.proposedId = _data["proposedId"] ? ProposedID.fromJS(_data["proposedId"]) : new ProposedID();
            this.objectType = _data["objectType"];
            this.message = _data["message"];
            this.severity = _data["severity"];
            this.code = _data["code"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): ProposalIssue {
        data = typeof data === 'object' ? data : {};
        let result = new ProposalIssue();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["proposedId"] = this.proposedId ? this.proposedId.toJSON() : <any>undefined;
        data["objectType"] = this.objectType;
        data["message"] = this.message;
        data["severity"] = this.severity;
        data["code"] = this.code;
        data["id"] = this.id;
        return data;
    }
}

export interface IProposalIssue {
    proposedId: ProposedID;
    objectType: BeamOsObjectType;
    message: string;
    severity: ProposalIssueSeverity;
    code: ProposalIssueCode;
    id: number;
}

export enum ProposalIssueCode {
    _0 = 0,
    _1 = 1,
    _2 = 2,
    _3 = 3,
    _4 = 4,
}

export enum ProposalIssueSeverity {
    _0 = 0,
    _10 = 10,
    _20 = 20,
    _30 = 30,
    _40 = 40,
}

export class ProposedID implements IProposedID {
    existingId?: number | undefined;
    proposedId?: number | undefined;

    constructor(data?: IProposedID) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.existingId = _data["existingId"];
            this.proposedId = _data["proposedId"];
        }
    }

    static fromJS(data: any): ProposedID {
        data = typeof data === 'object' ? data : {};
        let result = new ProposedID();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["existingId"] = this.existingId;
        data["proposedId"] = this.proposedId;
        return data;
    }
}

export interface IProposedID {
    existingId?: number | undefined;
    proposedId?: number | undefined;
}

export class PutMaterialRequest implements IPutMaterialRequest {
    modulusOfElasticity!: number;
    modulusOfRigidity!: number;
    pressureUnit!: PressureUnit;
    id!: number;

    constructor(data?: IPutMaterialRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.modulusOfElasticity = _data["modulusOfElasticity"];
            this.modulusOfRigidity = _data["modulusOfRigidity"];
            this.pressureUnit = _data["pressureUnit"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): PutMaterialRequest {
        data = typeof data === 'object' ? data : {};
        let result = new PutMaterialRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["modulusOfElasticity"] = this.modulusOfElasticity;
        data["modulusOfRigidity"] = this.modulusOfRigidity;
        data["pressureUnit"] = this.pressureUnit;
        data["id"] = this.id;
        return data;
    }
}

export interface IPutMaterialRequest {
    modulusOfElasticity: number;
    modulusOfRigidity: number;
    pressureUnit: PressureUnit;
    id: number;
}

export class PutNodeClientCommand implements IPutNodeClientCommand {
    previous!: NodeResponse;
    new!: NodeResponse;
    readonly id!: string;
    handledByEditor!: boolean;
    handledByBlazor!: boolean;
    handledByServer!: boolean;

    constructor(data?: IPutNodeClientCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.previous = new NodeResponse();
            this.new = new NodeResponse();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.previous = _data["previous"] ? NodeResponse.fromJS(_data["previous"]) : new NodeResponse();
            this.new = _data["new"] ? NodeResponse.fromJS(_data["new"]) : new NodeResponse();
            (<any>this).id = _data["id"];
            this.handledByEditor = _data["handledByEditor"];
            this.handledByBlazor = _data["handledByBlazor"];
            this.handledByServer = _data["handledByServer"];
        }
    }

    static fromJS(data: any): PutNodeClientCommand {
        data = typeof data === 'object' ? data : {};
        let result = new PutNodeClientCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["previous"] = this.previous ? this.previous.toJSON() : <any>undefined;
        data["new"] = this.new ? this.new.toJSON() : <any>undefined;
        data["id"] = this.id;
        data["handledByEditor"] = this.handledByEditor;
        data["handledByBlazor"] = this.handledByBlazor;
        data["handledByServer"] = this.handledByServer;
        return data;
    }
}

export interface IPutNodeClientCommand {
    previous: NodeResponse;
    new: NodeResponse;
    id: string;
    handledByEditor: boolean;
    handledByBlazor: boolean;
    handledByServer: boolean;
}

export class PutSectionProfileRequest implements IPutSectionProfileRequest {
    name!: string;
    area!: number;
    strongAxisMomentOfInertia!: number;
    weakAxisMomentOfInertia!: number;
    polarMomentOfInertia!: number;
    strongAxisPlasticSectionModulus!: number;
    weakAxisPlasticSectionModulus!: number;
    strongAxisShearArea?: number | undefined;
    weakAxisShearArea?: number | undefined;
    lengthUnit!: LengthUnit;
    id!: number;

    constructor(data?: IPutSectionProfileRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.area = _data["area"];
            this.strongAxisMomentOfInertia = _data["strongAxisMomentOfInertia"];
            this.weakAxisMomentOfInertia = _data["weakAxisMomentOfInertia"];
            this.polarMomentOfInertia = _data["polarMomentOfInertia"];
            this.strongAxisPlasticSectionModulus = _data["strongAxisPlasticSectionModulus"];
            this.weakAxisPlasticSectionModulus = _data["weakAxisPlasticSectionModulus"];
            this.strongAxisShearArea = _data["strongAxisShearArea"];
            this.weakAxisShearArea = _data["weakAxisShearArea"];
            this.lengthUnit = _data["lengthUnit"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): PutSectionProfileRequest {
        data = typeof data === 'object' ? data : {};
        let result = new PutSectionProfileRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["area"] = this.area;
        data["strongAxisMomentOfInertia"] = this.strongAxisMomentOfInertia;
        data["weakAxisMomentOfInertia"] = this.weakAxisMomentOfInertia;
        data["polarMomentOfInertia"] = this.polarMomentOfInertia;
        data["strongAxisPlasticSectionModulus"] = this.strongAxisPlasticSectionModulus;
        data["weakAxisPlasticSectionModulus"] = this.weakAxisPlasticSectionModulus;
        data["strongAxisShearArea"] = this.strongAxisShearArea;
        data["weakAxisShearArea"] = this.weakAxisShearArea;
        data["lengthUnit"] = this.lengthUnit;
        data["id"] = this.id;
        return data;
    }
}

export interface IPutSectionProfileRequest {
    name: string;
    area: number;
    strongAxisMomentOfInertia: number;
    weakAxisMomentOfInertia: number;
    polarMomentOfInertia: number;
    strongAxisPlasticSectionModulus: number;
    weakAxisPlasticSectionModulus: number;
    strongAxisShearArea?: number | undefined;
    weakAxisShearArea?: number | undefined;
    lengthUnit: LengthUnit;
    id: number;
}

export class Restraint implements IRestraint {
    canTranslateAlongX!: boolean;
    canTranslateAlongY!: boolean;
    canTranslateAlongZ!: boolean;
    canRotateAboutX!: boolean;
    canRotateAboutY!: boolean;
    canRotateAboutZ!: boolean;

    constructor(data?: IRestraint) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.canTranslateAlongX = _data["canTranslateAlongX"];
            this.canTranslateAlongY = _data["canTranslateAlongY"];
            this.canTranslateAlongZ = _data["canTranslateAlongZ"];
            this.canRotateAboutX = _data["canRotateAboutX"];
            this.canRotateAboutY = _data["canRotateAboutY"];
            this.canRotateAboutZ = _data["canRotateAboutZ"];
        }
    }

    static fromJS(data: any): Restraint {
        data = typeof data === 'object' ? data : {};
        let result = new Restraint();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["canTranslateAlongX"] = this.canTranslateAlongX;
        data["canTranslateAlongY"] = this.canTranslateAlongY;
        data["canTranslateAlongZ"] = this.canTranslateAlongZ;
        data["canRotateAboutX"] = this.canRotateAboutX;
        data["canRotateAboutY"] = this.canRotateAboutY;
        data["canRotateAboutZ"] = this.canRotateAboutZ;
        return data;
    }
}

export interface IRestraint {
    canTranslateAlongX: boolean;
    canTranslateAlongY: boolean;
    canTranslateAlongZ: boolean;
    canRotateAboutX: boolean;
    canRotateAboutY: boolean;
    canRotateAboutZ: boolean;
}

export class Result implements IResult {
    error!: BeamOsError;
    isError!: boolean;

    constructor(data?: IResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.error = new BeamOsError();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error = _data["error"] ? BeamOsError.fromJS(_data["error"]) : new BeamOsError();
            this.isError = _data["isError"];
        }
    }

    static fromJS(data: any): Result {
        data = typeof data === 'object' ? data : {};
        let result = new Result();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["isError"] = this.isError;
        return data;
    }
}

export interface IResult {
    error: BeamOsError;
    isError: boolean;
}

export class ResultSet implements IResultSet {
    id!: number;
    modelId!: string;
    nodeResults?: NodeResultResponse[] | undefined;
    element1dResults?: Element1dResultResponse[] | undefined;

    constructor(data?: IResultSet) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.modelId = _data["modelId"];
            if (Array.isArray(_data["nodeResults"])) {
                this.nodeResults = [] as any;
                for (let item of _data["nodeResults"])
                    this.nodeResults!.push(NodeResultResponse.fromJS(item));
            }
            if (Array.isArray(_data["element1dResults"])) {
                this.element1dResults = [] as any;
                for (let item of _data["element1dResults"])
                    this.element1dResults!.push(Element1dResultResponse.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ResultSet {
        data = typeof data === 'object' ? data : {};
        let result = new ResultSet();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["modelId"] = this.modelId;
        if (Array.isArray(this.nodeResults)) {
            data["nodeResults"] = [];
            for (let item of this.nodeResults)
                data["nodeResults"].push(item ? item.toJSON() : <any>undefined);
        }
        if (Array.isArray(this.element1dResults)) {
            data["element1dResults"] = [];
            for (let item of this.element1dResults)
                data["element1dResults"].push(item ? item.toJSON() : <any>undefined);
        }
        return data;
    }
}

export interface IResultSet {
    id: number;
    modelId: string;
    nodeResults?: NodeResultResponse[] | undefined;
    element1dResults?: Element1dResultResponse[] | undefined;
}

export class ResultSetResponse implements IResultSetResponse {
    id!: number;
    modelId!: string;
    nodeResults?: NodeResultResponse[] | undefined;
    element1dResults?: Element1dResultResponse[] | undefined;

    constructor(data?: IResultSetResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.modelId = _data["modelId"];
            if (Array.isArray(_data["nodeResults"])) {
                this.nodeResults = [] as any;
                for (let item of _data["nodeResults"])
                    this.nodeResults!.push(NodeResultResponse.fromJS(item));
            }
            if (Array.isArray(_data["element1dResults"])) {
                this.element1dResults = [] as any;
                for (let item of _data["element1dResults"])
                    this.element1dResults!.push(Element1dResultResponse.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ResultSetResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ResultSetResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["modelId"] = this.modelId;
        if (Array.isArray(this.nodeResults)) {
            data["nodeResults"] = [];
            for (let item of this.nodeResults)
                data["nodeResults"].push(item ? item.toJSON() : <any>undefined);
        }
        if (Array.isArray(this.element1dResults)) {
            data["element1dResults"] = [];
            for (let item of this.element1dResults)
                data["element1dResults"].push(item ? item.toJSON() : <any>undefined);
        }
        return data;
    }
}

export interface IResultSetResponse {
    id: number;
    modelId: string;
    nodeResults?: NodeResultResponse[] | undefined;
    element1dResults?: Element1dResultResponse[] | undefined;
}

export class SectionProfileFromLibrary implements ISectionProfileFromLibrary {
    name!: string;
    library!: StructuralCode;
    id!: number;

    constructor(data?: ISectionProfileFromLibrary) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.library = _data["library"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): SectionProfileFromLibrary {
        data = typeof data === 'object' ? data : {};
        let result = new SectionProfileFromLibrary();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["library"] = this.library;
        data["id"] = this.id;
        return data;
    }
}

export interface ISectionProfileFromLibrary {
    name: string;
    library: StructuralCode;
    id: number;
}

export class SectionProfileResponse implements ISectionProfileResponse {
    id!: number;
    modelId!: string;
    name!: string;
    area!: number;
    strongAxisMomentOfInertia!: number;
    weakAxisMomentOfInertia!: number;
    polarMomentOfInertia!: number;
    strongAxisPlasticSectionModulus!: number;
    weakAxisPlasticSectionModulus!: number;
    strongAxisShearArea?: number | undefined;
    weakAxisShearArea?: number | undefined;
    lengthUnit!: LengthUnit;

    constructor(data?: ISectionProfileResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.modelId = _data["modelId"];
            this.name = _data["name"];
            this.area = _data["area"];
            this.strongAxisMomentOfInertia = _data["strongAxisMomentOfInertia"];
            this.weakAxisMomentOfInertia = _data["weakAxisMomentOfInertia"];
            this.polarMomentOfInertia = _data["polarMomentOfInertia"];
            this.strongAxisPlasticSectionModulus = _data["strongAxisPlasticSectionModulus"];
            this.weakAxisPlasticSectionModulus = _data["weakAxisPlasticSectionModulus"];
            this.strongAxisShearArea = _data["strongAxisShearArea"];
            this.weakAxisShearArea = _data["weakAxisShearArea"];
            this.lengthUnit = _data["lengthUnit"];
        }
    }

    static fromJS(data: any): SectionProfileResponse {
        data = typeof data === 'object' ? data : {};
        let result = new SectionProfileResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["modelId"] = this.modelId;
        data["name"] = this.name;
        data["area"] = this.area;
        data["strongAxisMomentOfInertia"] = this.strongAxisMomentOfInertia;
        data["weakAxisMomentOfInertia"] = this.weakAxisMomentOfInertia;
        data["polarMomentOfInertia"] = this.polarMomentOfInertia;
        data["strongAxisPlasticSectionModulus"] = this.strongAxisPlasticSectionModulus;
        data["weakAxisPlasticSectionModulus"] = this.weakAxisPlasticSectionModulus;
        data["strongAxisShearArea"] = this.strongAxisShearArea;
        data["weakAxisShearArea"] = this.weakAxisShearArea;
        data["lengthUnit"] = this.lengthUnit;
        return data;
    }
}

export interface ISectionProfileResponse {
    id: number;
    modelId: string;
    name: string;
    area: number;
    strongAxisMomentOfInertia: number;
    weakAxisMomentOfInertia: number;
    polarMomentOfInertia: number;
    strongAxisPlasticSectionModulus: number;
    weakAxisPlasticSectionModulus: number;
    strongAxisShearArea?: number | undefined;
    weakAxisShearArea?: number | undefined;
    lengthUnit: LengthUnit;
}

export class SelectedObject implements ISelectedObject {
    id!: number;
    typeName!: string;

    constructor(data?: ISelectedObject) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.typeName = _data["typeName"];
        }
    }

    static fromJS(data: any): SelectedObject {
        data = typeof data === 'object' ? data : {};
        let result = new SelectedObject();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["typeName"] = this.typeName;
        return data;
    }
}

export interface ISelectedObject {
    id: number;
    typeName: string;
}

export class ShearDiagramResponse implements IShearDiagramResponse {
    modelId!: string;
    resultSetId!: number;
    element1dId!: number;
    intervals!: DiagramConsistentIntervalResponse[];
    globalShearDirection!: Vector3;
    lengthUnit!: LengthUnit;
    forceUnit!: ForceUnit;
    elementLength!: Length;

    constructor(data?: IShearDiagramResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.intervals = [];
            this.globalShearDirection = new Vector3();
            this.elementLength = new Length();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.modelId = _data["modelId"];
            this.resultSetId = _data["resultSetId"];
            this.element1dId = _data["element1dId"];
            if (Array.isArray(_data["intervals"])) {
                this.intervals = [] as any;
                for (let item of _data["intervals"])
                    this.intervals!.push(DiagramConsistentIntervalResponse.fromJS(item));
            }
            this.globalShearDirection = _data["globalShearDirection"] ? Vector3.fromJS(_data["globalShearDirection"]) : new Vector3();
            this.lengthUnit = _data["lengthUnit"];
            this.forceUnit = _data["forceUnit"];
            this.elementLength = _data["elementLength"] ? Length.fromJS(_data["elementLength"]) : new Length();
        }
    }

    static fromJS(data: any): ShearDiagramResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ShearDiagramResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["modelId"] = this.modelId;
        data["resultSetId"] = this.resultSetId;
        data["element1dId"] = this.element1dId;
        if (Array.isArray(this.intervals)) {
            data["intervals"] = [];
            for (let item of this.intervals)
                data["intervals"].push(item ? item.toJSON() : <any>undefined);
        }
        data["globalShearDirection"] = this.globalShearDirection ? this.globalShearDirection.toJSON() : <any>undefined;
        data["lengthUnit"] = this.lengthUnit;
        data["forceUnit"] = this.forceUnit;
        data["elementLength"] = this.elementLength ? this.elementLength.toJSON() : <any>undefined;
        return data;
    }
}

export interface IShearDiagramResponse {
    modelId: string;
    resultSetId: number;
    element1dId: number;
    intervals: DiagramConsistentIntervalResponse[];
    globalShearDirection: Vector3;
    lengthUnit: LengthUnit;
    forceUnit: ForceUnit;
    elementLength: Length;
}

export enum StructuralCode {
    _0 = 0,
    _1 = 1,
}

export class Torque implements ITorque {
    value!: number;
    unit!: TorqueUnit;

    constructor(data?: ITorque) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.value = _data["value"];
            this.unit = _data["unit"];
        }
    }

    static fromJS(data: any): Torque {
        data = typeof data === 'object' ? data : {};
        let result = new Torque();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        data["unit"] = this.unit;
        return data;
    }
}

export interface ITorque {
    value: number;
    unit: TorqueUnit;
}

export enum TorqueUnit {
    _0 = 0,
    _7 = 7,
    _8 = 8,
    _9 = 9,
    _10 = 10,
    _11 = 11,
    _17 = 17,
    _18 = 18,
    _19 = 19,
    _21 = 21,
    _22 = 22,
}

export class UnitSettings implements IUnitSettings {
    lengthUnit!: LengthUnit;
    forceUnit!: ForceUnit;
    angleUnit!: AngleUnit;

    constructor(data?: IUnitSettings) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.lengthUnit = _data["lengthUnit"];
            this.forceUnit = _data["forceUnit"];
            this.angleUnit = _data["angleUnit"];
        }
    }

    static fromJS(data: any): UnitSettings {
        data = typeof data === 'object' ? data : {};
        let result = new UnitSettings();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["lengthUnit"] = this.lengthUnit;
        data["forceUnit"] = this.forceUnit;
        data["angleUnit"] = this.angleUnit;
        return data;
    }
}

export interface IUnitSettings {
    lengthUnit: LengthUnit;
    forceUnit: ForceUnit;
    angleUnit: AngleUnit;
}

export class Vector3 implements IVector3 {
    x!: number;
    y!: number;
    z!: number;

    constructor(data?: IVector3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.x = _data["x"];
            this.y = _data["y"];
            this.z = _data["z"];
        }
    }

    static fromJS(data: any): Vector3 {
        data = typeof data === 'object' ? data : {};
        let result = new Vector3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["x"] = this.x;
        data["y"] = this.y;
        data["z"] = this.z;
        return data;
    }
}

export interface IVector3 {
    x: number;
    y: number;
    z: number;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}