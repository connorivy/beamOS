@page "/editor"
@using BeamOS.PhysicalModel.Client
@using BeamOS.PhysicalModel.Contracts.Element1D
@using BeamOS.PhysicalModel.Contracts.Model
@using BeamOS.PhysicalModel.Contracts.Node
@using BeamOS.WebApp.EditorApi
@rendermode InteractiveServer

@inject IJSRuntime js
@inject IPhysicalModelAlphaClient apiClient
@inject IEditorApiAlpha editorApiAlpha

<PageTitle>Editor</PageTitle>

<canvas id="editor" style="height: 600px; width: 100%;"></canvas>

<button @onclick="AddNode">
    Add Node
</button>

<button @onclick="AddElement1d">
    Add Element1d
</button>

<button @onclick="LoadModel">
    Load Model
</button>

<button @onclick="SayHello">
    Say Hello
</button>

@code {
    ElementReference editorReference;
    string? startNodeId;
    string? endNodeId;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await js.InvokeVoidAsync("createFromId", "editor");
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task AddNode()
    {
        // Trace.WriteLine("AddNode");
        CreateNodeRequest request = new(
            "00000000-0000-0000-0000-000000000000",
            10,
            5,
            10,
            "Foot");

        NodeResponse response = await apiClient.CreateNodeAsync(request);

        if (startNodeId is null)
        {
            startNodeId = response.Id;
        }
        else
        {
            endNodeId = response.Id;
        }
        var x = await editorApiAlpha.CreateNodeAsync(response);
    }

    private async Task AddElement1d()
    {
        CreateElement1DRequest createElement1DRequest = new(
            "00000000-0000-0000-0000-000000000000",
            startNodeId,
            endNodeId,
            "00000000-0000-0000-0000-000000000000",
            "00000000-0000-0000-0000-000000000000"
        );

        Element1DResponse response = await apiClient.CreateElement1dAsync(createElement1DRequest);
        var newResponse = new Element1DResponse(
            response.Id,
            response.ModelId,
            response.StartNodeId,
            "error",
            response.MaterialId,
            response.SectionProfileId,
            response.SectionProfileRotation
        );
        var x = await editorApiAlpha.CreateElement1dAsync(newResponse);
    }

    private async Task LoadModel()
    {
        // ModelResponse response = await physicalModelClient.GetApiModelsAsync("00000000-0000-0000-0000-000000000000", null);
        // foreach (NodeResponse? nodeResponse in response.Nodes)
        // {
        //     await js.InvokeVoidAsync("beamOsEditor.commands.addNodeCommand", nodeResponse);
        // }
        ;
    }

    private async Task LoadEditor()
    {
    }

    private async Task SayHello()
    {
        await js.InvokeVoidAsync("beamOsEditor.api.sayHello");
    }
}

