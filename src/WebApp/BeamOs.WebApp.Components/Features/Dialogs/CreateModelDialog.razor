@using System.Reflection
@using BeamOs.CodeGen.StructuralAnalysisApiClient
@using System.Text.Json
@using BeamOs.StructuralAnalysis.Contracts.PhysicalModel.Models
@using BeamOs.WebApp.Components.Features.SelectionInfo

<MudDialog>
    <DialogContent>
        <MudForm @ref="form" @bind-IsValid="@validationSuccess" @bind-Errors="@errors">
            <SelectionInfoSingleItemComponent ObjectToDisplay="@parameterValues"></SelectionInfoSingleItemComponent>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton OnClick="HandleSubmit" Color="Color.Primary">Submit</MudButton>
    </DialogActions>
</MudDialog>

<style>
    .mud-expand-panel-header {
    padding-left: 0px !important;
    padding-right: 0px !important;
    padding-top: 0px !important;
    padding-bottom: 8px !important;
    min-height: 24px !important;
    }

    .mud-expand-panel-content {
    padding-left: 12px !important;
    padding-right: 0px !important;
    padding-top: 0px !important;
    border-style: none;
    height: fit-content;
    }

    .mud-panel-expanded > .mud-expand-panel-header .mud-expand-panel-text {
    color: var(--mud-palette-primary-lighten);
    }

    .mud-expand-panel.mud-panel-expanded {
    margin-top: 0px;
    margin-block: 0px;
    }

    .mud-expand-panel-text {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
    }

    .mud-input-control {
    margin-top: 0px;
    }

</style>

@code {
    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }

    [Inject]
    private IStructuralAnalysisApiClientV1 StructuralAnalysisApiAlphaClient { get; init; }

    // private ComplexFieldTypeMarker parameterValues = StructuralApiClientComponent.GetSettableParameterPropertiesAsync(typeof(CreateModelRequest), null, true);

    private bool validationSuccess;
    private string[] errors = [];
    private MudForm form;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        EditableSelectionInfoFactory selectionInfoFactory = new(new Guid());
        parameterValues = selectionInfoFactory.Create(null, typeof(CreateModelRequest), "Create Model", true, 1);
    }

    private static MethodInfo CreateModel { get; } = typeof(IStructuralAnalysisApiClientV1)
        .GetMethods(BindingFlags.Public | BindingFlags.Instance)
            .Where(m => m.Name.Equals(nameof(IStructuralAnalysisApiClientV1.CreateModelAsync)))
            .First();

    private void Cancel() => MudDialog.Cancel();

    private ISelectionInfo parameterValues { get; set; }

    private async Task HandleSubmit()
    {
        await this.form.Validate();

        if (!this.validationSuccess)
        {
            return;
        }

        var parameterType = typeof(CreateModelRequest);
        object parameterInstance;

        string serialized;
        if (this.parameterValues is ComplexFieldSelectionInfo complexFieldSelectionInfo)
        {
            serialized = complexFieldSelectionInfo.ToJsonObject()?.ToString();
        }
        else
        {
            throw new InvalidOperationException($"The 'parameterValues' object is of an unexpected type, {parameterValues.GetType()}");
        }

        try
        {
            parameterInstance = JsonSerializer.Deserialize(serialized, parameterType);
        }
        catch (JsonException ex)
        {
            // Handle JSON deserialization error
            Console.WriteLine($"Error deserializing JSON: {ex.Message}");
            return;
        }

        var result = CreateModel
            .Invoke(this.StructuralAnalysisApiAlphaClient, new[] { parameterInstance, CancellationToken.None });

        if (result is Task t)
        {
            await t.ConfigureAwait(true);
            result = ((dynamic)result).Result;
        }

        MudDialog.Close(DialogResult.Ok(result));
    }
}
