// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using BeamOs.StructuralAnalysis.Contracts.Common;
using BeamOs.StructuralAnalysis.Domain.Common;
using BeamOs.StructuralAnalysis.Domain.PhysicalModel.Element1dAggregate;
using BeamOs.StructuralAnalysis.Domain.PhysicalModel.ModelAggregate;
using BeamOs.StructuralAnalysis.Domain.PhysicalModel.NodeAggregate;
using BeamOs.StructuralAnalysis.Infrastructure.Common;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using UnitsNet;

#pragma warning disable 219, 612, 618
#nullable disable

namespace BeamOs.StructuralAnalysis.Api
{
    [EntityFrameworkInternal]
    public partial class InternalNodeEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "BeamOs.StructuralAnalysis.Domain.PhysicalModel.NodeAggregate.InternalNode",
                typeof(InternalNode),
                baseEntityType,
                discriminatorProperty: "NodeType",
                discriminatorValue: BeamOsObjectType.InternalNode,
                propertyCount: 2,
                complexPropertyCount: 1,
                navigationCount: 2,
                foreignKeyCount: 2,
                unnamedIndexCount: 2);

            var element1dId = runtimeEntityType.AddProperty(
                "Element1dId",
                typeof(Element1dId),
                propertyInfo: typeof(InternalNode).GetProperty("Element1dId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(InternalNode).GetField("<Element1dId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueConverter: new Element1dIdConverter());
            element1dId.SetSentinelFromProviderValue(0);

            var ratioAlongElement1d = runtimeEntityType.AddProperty(
                "RatioAlongElement1d",
                typeof(Ratio),
                propertyInfo: typeof(InternalNode).GetProperty("RatioAlongElement1d", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(InternalNode).GetField("<RatioAlongElement1d>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueConverter: new RatioValueConverter());
            ratioAlongElement1d.SetSentinelFromProviderValue(0.0);

            RestraintComplexProperty.Create(runtimeEntityType);
            var index = runtimeEntityType.AddIndex(
                new[] { runtimeEntityType.FindProperty("ModelId") });

            var index0 = runtimeEntityType.AddIndex(
                new[] { element1dId, runtimeEntityType.FindProperty("ModelId") });

            return runtimeEntityType;
        }

        public static class RestraintComplexProperty
        {
            public static RuntimeComplexProperty Create(RuntimeEntityType declaringType)
            {
                var complexProperty = declaringType.AddComplexProperty("Restraint",
                    typeof(Restraint),
                    "BeamOs.StructuralAnalysis.Domain.PhysicalModel.NodeAggregate.InternalNode.Restraint#Restraint",
                    typeof(Restraint),
                    propertyInfo: typeof(InternalNode).GetProperty("Restraint", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    fieldInfo: typeof(InternalNode).GetField("<Restraint>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    propertyCount: 6);

                var complexType = complexProperty.ComplexType;
                var canRotateAboutX = complexType.AddProperty(
                    "CanRotateAboutX",
                    typeof(bool),
                    propertyInfo: typeof(Restraint).GetProperty("CanRotateAboutX", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    fieldInfo: typeof(Restraint).GetField("<CanRotateAboutX>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    valueGenerated: ValueGenerated.OnUpdateSometimes,
                    sentinel: false);

                var canRotateAboutY = complexType.AddProperty(
                    "CanRotateAboutY",
                    typeof(bool),
                    propertyInfo: typeof(Restraint).GetProperty("CanRotateAboutY", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    fieldInfo: typeof(Restraint).GetField("<CanRotateAboutY>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    valueGenerated: ValueGenerated.OnUpdateSometimes,
                    sentinel: false);

                var canRotateAboutZ = complexType.AddProperty(
                    "CanRotateAboutZ",
                    typeof(bool),
                    propertyInfo: typeof(Restraint).GetProperty("CanRotateAboutZ", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    fieldInfo: typeof(Restraint).GetField("<CanRotateAboutZ>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    valueGenerated: ValueGenerated.OnUpdateSometimes,
                    sentinel: false);

                var canTranslateAlongX = complexType.AddProperty(
                    "CanTranslateAlongX",
                    typeof(bool),
                    propertyInfo: typeof(Restraint).GetProperty("CanTranslateAlongX", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    fieldInfo: typeof(Restraint).GetField("<CanTranslateAlongX>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    valueGenerated: ValueGenerated.OnUpdateSometimes,
                    sentinel: false);

                var canTranslateAlongY = complexType.AddProperty(
                    "CanTranslateAlongY",
                    typeof(bool),
                    propertyInfo: typeof(Restraint).GetProperty("CanTranslateAlongY", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    fieldInfo: typeof(Restraint).GetField("<CanTranslateAlongY>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    valueGenerated: ValueGenerated.OnUpdateSometimes,
                    sentinel: false);

                var canTranslateAlongZ = complexType.AddProperty(
                    "CanTranslateAlongZ",
                    typeof(bool),
                    propertyInfo: typeof(Restraint).GetProperty("CanTranslateAlongZ", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    fieldInfo: typeof(Restraint).GetField("<CanTranslateAlongZ>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    valueGenerated: ValueGenerated.OnUpdateSometimes,
                    sentinel: false);

                complexType.AddAnnotation("Relational:FunctionName", null);
                complexType.AddAnnotation("Relational:Schema", null);
                complexType.AddAnnotation("Relational:SqlQuery", null);
                complexType.AddAnnotation("Relational:TableName", "NodeDefinitions");
                complexType.AddAnnotation("Relational:ViewName", null);
                complexType.AddAnnotation("Relational:ViewSchema", null);
                return complexProperty;
            }
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ModelId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id") }),
                principalEntityType,
                deleteBehavior: DeleteBehavior.Cascade,
                required: true);

            var model = declaringEntityType.AddNavigation("Model",
                runtimeForeignKey,
                onDependent: true,
                typeof(Model),
                propertyInfo: typeof(BeamOsModelEntity<NodeId>).GetProperty("Model", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(BeamOsModelEntity<NodeId>).GetField("<Model>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var internalNodes = principalEntityType.AddNavigation("InternalNodes",
                runtimeForeignKey,
                onDependent: false,
                typeof(IList<InternalNode>),
                propertyInfo: typeof(Model).GetProperty("InternalNodes", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Model).GetField("<InternalNodes>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey2(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("Element1dId"), declaringEntityType.FindProperty("ModelId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id"), principalEntityType.FindProperty("ModelId") }),
                principalEntityType,
                deleteBehavior: DeleteBehavior.Cascade,
                required: true);

            var element1d = declaringEntityType.AddNavigation("Element1d",
                runtimeForeignKey,
                onDependent: true,
                typeof(Element1d),
                propertyInfo: typeof(InternalNode).GetProperty("Element1d", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(InternalNode).GetField("<Element1d>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var internalNodes = principalEntityType.AddNavigation("InternalNodes",
                runtimeForeignKey,
                onDependent: false,
                typeof(IList<InternalNode>),
                propertyInfo: typeof(Element1d).GetProperty("InternalNodes", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Element1d).GetField("<InternalNodes>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "NodeDefinitions");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
